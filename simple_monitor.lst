
simple_monitor.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
08000188 l    d  .text	00000000 .text
080070e0 l    d  .rodata	00000000 .rodata
08017a38 l    d  .init_array	00000000 .init_array
08017a40 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
20000a3c l    d  .bss	00000000 .bss
200070f8 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
08018480 l    d  .parsetable	00000000 .parsetable
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 Drivers/CMSIS/Device/ST/STM32F3xx/Source/Templates/gcc/startup_stm32f303xc.o
f1e0f85f l       *ABS*	00000000 BootRAM
080052cc l       .text	00000000 LoopCopyDataInit
080052c4 l       .text	00000000 CopyDataInit
080052e0 l       .text	00000000 LoopFillZerobss
080052da l       .text	00000000 FillZerobss
080052f2 l       .text	00000000 LoopForever
0800530c l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
080070c8 l     O .text	00000000 __EH_FRAME_BEGIN__
08000188 l     F .text	00000000 deregister_tm_clones
080001b0 l     F .text	00000000 register_tm_clones
080001e0 l     F .text	00000000 __do_global_dtors_aux
20000a3c l       .bss	00000000 completed.6140
08017a40 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000210 l     F .text	00000000 frame_dummy
20000a40 l       .bss	00000000 object.6145
08017a3c l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 mycode.o
00000000 l    df *ABS*	00000000 lib_a-memcpy.o
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 monitor.c
00000000 l    df *ABS*	00000000 parser.c
08007305 l     O .rodata	00000006 __FUNCTION__.5747
20000a58 l     O .bss	00000004 saved.5731
20000a5c l     O .bss	00000004 count.5730
20000008 l     O .data	00000004 buf.5732
2000000c l     O .data	00000004 printPrompt.5733
00000000 l    df *ABS*	00000000 dump.c
20000010 l     O .data	00000004 count.5159
20000a60 l     O .bss	00000004 address.5158
00000000 l    df *ABS*	00000000 syscall.c
20000a64 l     O .bss	00000004 heap_end.5621
00000000 l    df *ABS*	00000000 terminal.c
08000954 l     F .text	00000080 USBD_CDC_DataIn
20000a68 l     O .bss	00000124 TerminalState
00000000 l    df *ABS*	00000000 decoder.c
00000000 l    df *ABS*	00000000 printf_stdarg.c
080010a0 l     F .text	00000028 printchar
080010c8 l     F .text	00000082 prints
0800114a l     F .text	0000009a printi
080011e4 l     F .text	00000120 print
00000000 l    df *ABS*	00000000 mytest.c
00000000 l    df *ABS*	00000000 simpleTask.c
20000b8c l     O .bss	00000004 counter
00000000 l    df *ABS*	00000000 task_executive.c
080014e8 l     F .text	00000024 TaskShell
00000000 l    df *ABS*	00000000 task_executive_cmd.c
00000000 l    df *ABS*	00000000 system_stm32f3xx.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_rcc.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal.c
20000b90 l     O .bss	00000004 uwTick
00000000 l    df *ABS*	00000000 stm32f3xx_hal_cortex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_gpio.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_pcd_ex.c
00000000 l    df *ABS*	00000000 stm32f3xx_hal_i2c.c
080032f8 l     F .text	00000024 I2C_TransferConfig
0800331c l     F .text	00000090 I2C_IsAcknowledgeFailed
080033ac l     F .text	00000068 I2C_WaitOnFlagUntilTimeout
08003414 l     F .text	00000054 I2C_WaitOnTXISFlagUntilTimeout
08003468 l     F .text	00000066 I2C_RequestMemoryWrite
080034ce l     F .text	00000064 I2C_RequestMemoryRead
08003532 l     F .text	00000050 I2C_WaitOnSTOPFlagUntilTimeout
00000000 l    df *ABS*	00000000 stm32f3xx_hal_spi.c
0800384e l     F .text	0000008a SPI_WaitFlagStateUntilTimeout
080038d8 l     F .text	0000009a SPI_WaitFifoStateUntilTimeout
08003972 l     F .text	00000042 SPI_EndRxTxTransaction
00000000 l    df *ABS*	00000000 usbd_core.c
00000000 l    df *ABS*	00000000 usbd_ctlreq.c
20000b94 l     O .bss	00000001 cfgidx.10049
00000000 l    df *ABS*	00000000 usbd_ioreq.c
00000000 l    df *ABS*	00000000 usbd_cdc.c
0800431c l     F .text	00000012 USBD_CDC_DataIn
0800432e l     F .text	00000028 USBD_CDC_EP0_RxReady
08004358 l     F .text	0000000c USBD_CDC_GetFSCfgDesc
08004364 l     F .text	0000000c USBD_CDC_GetHSCfgDesc
08004370 l     F .text	0000000c USBD_CDC_GetOtherSpeedCfgDesc
08004388 l     F .text	0000002e USBD_CDC_DataOut
080043b6 l     F .text	0000005a USBD_CDC_Setup
08004410 l     F .text	0000003a USBD_CDC_DeInit
0800444a l     F .text	00000086 USBD_CDC_Init
20000094 l     O .data	0000000a USBD_CDC_DeviceQualifierDesc
00000000 l    df *ABS*	00000000 usbd_conf.c
20000b98 l     O .bss	00000230 mem.10266
00000000 l    df *ABS*	00000000 usbd_desc.c
0800478c l     F .text	00000028 IntToUnicode
00000000 l    df *ABS*	00000000 usbd_cdc_interface.c
08004860 l     F .text	00000004 CDC_Itf_DeInit
08004864 l     F .text	00000020 CDC_Itf_Receive
08004884 l     F .text	00000018 CDC_Itf_Init
0800489c l     F .text	00000058 CDC_Itf_Control
00000000 l    df *ABS*	00000000 stm32f3_discovery.c
080048f4 l     F .text	00000080 SPIx_Init
08004974 l     F .text	00000040 SPIx_WriteRead
080049b4 l     F .text	0000006c I2Cx_Init
20000dc8 l     O .bss	00000060 SpiHandle
20000e28 l     O .bss	00000038 I2cHandle
00000000 l    df *ABS*	00000000 stm32f3_discovery_accelerometer.c
20000e60 l     O .bss	00000004 AccelerometerDrv
00000000 l    df *ABS*	00000000 stm32f3_discovery_gyroscope.c
20000e64 l     O .bss	00000004 GyroscopeDrv
00000000 l    df *ABS*	00000000 lsm303dlhc.c
00000000 l    df *ABS*	00000000 l3gd20.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 setvbuf.c
00000000 l    df *ABS*	00000000 strcasecmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strtok.c
00000000 l    df *ABS*	00000000 strtok_r.c
00000000 l    df *ABS*	00000000 strtoul.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
08005a0c l     F .text	00000018 register_fini
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr-stub.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv7e-m/softfp/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.8.2/armv7e-m/softfp/crtn.o
00000000 l    df *ABS*	00000000 STM32F30x_decoder.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 impure.c
20000200 l     O .data	00000428 impure_data
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
00000000 l       *UND*	00000000 HAL_DMA_Start_IT
08017a44 l       .fini_array	00000000 __fini_array_end
20000a3c l       .bss	00000000 __bss_start__
200070f8 l       .bss	00000000 __bss_end__
00000200 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 HAL_DMA_Abort
00000000 l       *UND*	00000000 software_init_hook
08017a40 l       .fini_array	00000000 __fini_array_start
08017a40 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
08017a38 l       .init_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08017a38 l       .init_array	00000000 __init_array_start
00000000 l       *UND*	00000000 _exit
08017a38 l       .init_array	00000000 __preinit_array_start
0800530c  w    F .text	00000002 RTC_Alarm_IRQHandler
08012654 g     O .rodata	00000010 RTC_BKP19R_fields
08017885 g     O .rodata	00000010 APBAHBPrescTable
080087c8 g     O .rodata	00000058 TIM2_SR_fields
0800fcdc g     O .rodata	00000108 CAN_F10R1_fields
080134d4 g     O .rodata	00000010 TIM16_DMAR_fields
0800544c g     F .text	00000012 putchar
0800530c  w    F .text	00000002 TIM8_TRG_COM_IRQHandler
08012244 g     O .rodata	00000010 I2C1_RXDR_fields
08004e88 g     F .text	0000001e LSM303DLHC_AccFilterCmd
0800530c  w    F .text	00000002 TIM8_CC_IRQHandler
08012824 g     O .rodata	00000038 TIM6_CR1_fields
08008404 g     O .rodata	00000050 I2C1_ICR_fields
0800094c g     F .text	00000004 _isatty_r
20000e9c g     O .bss	00000050 input_b
08012514 g     O .rodata	00000010 TIM2_PSC_fields
08009020 g     O .rodata	00000030 TIM17_CCMR1_Output_fields
08005678 g     F .text	000000ba strcpy
0800143c g     F .text	00000038 TaskKill
08012ab4 g     O .rodata	00000058 COMP_COMP5_CSR_fields
0800e560 g     O .rodata	00000010 I2C1_TXDR_fields
08005460 g     F .text	00000062 _puts_r
08004828 g     F .text	0000001c USBD_VCP_ConfigStrDescriptor
0800a618 g     O .rodata	00000108 CAN_F19R1_fields
08000d00 g     F .text	0000003c DecodeWriteRegister
080031aa g     F .text	000000c8 HAL_PCD_EP_ClrStall
0800f930 g     O .rodata	00000010 TIM16_CCR1_fields
0800530c  w    F .text	00000002 DebugMon_Handler
08000950 g     F .text	00000004 _lseek_r
08001664 g     F .text	00000098 CmdTasks
0800ed90 g     O .rodata	00000028 FPU_MVFR1_fields
08004624 g     F .text	0000001a HAL_PCD_ResetCallback
080032a6 g     F .text	0000002e PCD_WritePMA
08013784 g     O .rodata	00000108 CAN_F22R1_fields
08008a08 g     O .rodata	000000e8 CAN_FA1R_fields
20000f3c g     O .bss	00000224 hUSBDDevice
0800a828 g     O .rodata	00000050 TIM2_SMCR_fields
08001634 g     F .text	00000030 CmdTaskKill
080184a4 g     O .parsetable	0000000c CmdTestE
08008fc8 g     O .rodata	00000028 NVIC_IPR1_fields
0800ea60 g     O .rodata	00000108 CAN_F14R1_fields
0800fccc g     O .rodata	00000010 TIM8_PSC_fields
0800dd60 g     O .rodata	00000038 TIM15_EGR_fields
080009d4 g     F .text	00000050 CmdStats
08005184 g     F .text	0000002e L3GD20_FilterConfig
08003272 g     F .text	00000034 HAL_PCDEx_PMAConfig
08010710 g     O .rodata	000000fc TIM2_registers
08011ef8 g     O .rodata	00000060 TIM15_DIER_fields
0800989c g     O .rodata	00000010 DMA1_CMAR3_fields
0800a0b0 g     O .rodata	00000108 GPIOA_BSRR_fields
08017154 g     O .rodata	00000068 DMA1_CCR7_fields
080028b8 g     F .text	000001b6 HAL_PCD_EP_Close
0800ef10 g     O .rodata	00000010 TSC_IOG6CR_fields
080098ac g     O .rodata	00000030 ADC1_SQR1_fields
0800976c g     O .rodata	000000e8 CAN_FS1R_fields
0800f868 g     O .rodata	00000038 TIM1_CCMR2_Input_fields
08007fc4 g     O .rodata	00000018 RTC_SHIFTR_fields
08001304 g     F .text	0000001c printf
08005108 g     F .text	00000040 L3GD20_EnableIT
080126ac g     O .rodata	00000030 CAN_TI1R_fields
08003d56 g     F .text	00000016 USBD_SetClassConfig
0800f488 g     O .rodata	00000028 NVIC_IPR14_fields
0800530c  w    F .text	00000002 TIM1_CC_IRQHandler
08002278 g     F .text	00000064 HAL_NVIC_SetPriority
0800ae00 g     O .rodata	00000150 ADC1_registers
0800460c g     F .text	00000010 HAL_PCD_DataInStageCallback
08012664 g     O .rodata	00000020 TIM2_CR2_fields
0800f3b8 g     O .rodata	00000010 Flash_WRPR_fields
08006dbc g     F .text	00000020 __sseek
08005bb8 g     F .text	000000f6 __sinit
0800a368 g     O .rodata	00000068 DMA1_CCR2_fields
08006de4 g     F .text	000000a4 __swbuf_r
0800530c  w    F .text	00000002 HardFault_Handler
08008bc8 g     O .rodata	00000108 TSC_IOHCR_fields
0800e410 g     O .rodata	00000028 CRC_CR_fields
08008ba8 g     O .rodata	00000010 NVIC_ISER0_fields
08006924 g     F .text	00000002 __malloc_unlock
08011224 g     O .rodata	00000010 TIM15_ARR_fields
08013114 g     O .rodata	00000010 RTC_BKP24R_fields
0800e968 g     O .rodata	00000010 TIM1_CCR3_fields
080171d4 g     O .rodata	00000010 TIM1_DMAR_fields
0800a028 g     O .rodata	00000010 TIM15_CCR1_fields
0800530c  w    F .text	00000002 USB_HP_IRQHandler
080124ec g     O .rodata	00000018 USART1_RTOR_fields
0800ca34 g     O .rodata	00000078 RCC_AHBENR_fields
080101e0 g     O .rodata	00000020 TIM2_CNT_fields
0801110c g     O .rodata	00000090 I2C1_registers
08000560 g     F .text	00000004 SysTick_Handler
0800d2e4 g     O .rodata	00000010 RTC_WPR_fields
080131a4 g     O .rodata	00000010 RTC_SSR_fields
0800249c g     F .text	0000000a HAL_GPIO_WritePin
0800ec68 g     O .rodata	00000010 TSC_IOG2CR_fields
08004528 g     F .text	00000026 USBD_CDC_ReceivePacket
0800530c  w    F .text	00000002 PVD_IRQHandler
08008bb8 g     O .rodata	00000010 DMA1_CPAR7_fields
08004e4e g     F .text	0000001c LSM303DLHC_AccRebootCmd
08010200 g     O .rodata	00000018 TIM6_CNT_fields
08011054 g     O .rodata	00000080 TIM1_DIER_fields
0800461c g     F .text	00000008 HAL_PCD_SOFCallback
0800ddf0 g     O .rodata	00000010 NVIC_ICPR0_fields
0800685c g     F .text	000000c2 memmove
0800530c  w    F .text	00000002 TAMP_STAMP_IRQHandler
08004b64 g     F .text	00000068 GYRO_IO_Init
08012f7c g     O .rodata	00000028 NVIC_IPR2_fields
08017a44 g       *ABS*	00000000 _sidata
08002198 g     F .text	00000038 HAL_RCC_GetHCLKFreq
0800530c  w    F .text	00000002 PendSV_Handler
08018498 g     O .parsetable	0000000c CmdButtonE
080115a8 g     O .rodata	00000010 NVIC_ICPR1_fields
0800530c  w    F .text	00000002 NMI_Handler
080022dc g     F .text	00000018 HAL_NVIC_EnableIRQ
08017a38 g       .init_array	00000000 __exidx_end
080057a8 g     F .text	00000064 __strtok_r
0800530c  w    F .text	00000002 EXTI3_IRQHandler
0800212c g     F .text	0000006c HAL_RCC_GetSysClockFreq
08004aa4 g     F .text	0000001c BSP_LED_Off
08016e7c g     O .rodata	00000010 DMA1_CNDTR5_fields
0800cdbc g     O .rodata	000000a0 TIM8_CCER_fields
0800d644 g     O .rodata	00000108 CAN_F8R2_fields
08018534 g       .parsetable	00000000 _parsetable_end
08011d60 g     O .rodata	00000050 RCC_AHBRSTR_fields
0800531c g     F .text	0000000c __errno
08008af0 g     O .rodata	00000010 RTC_BKP6R_fields
08009114 g     O .rodata	00000030 CAN_TI2R_fields
08003f58 g     F .text	00000218 USBD_StdDevReq
08003584 g     F .text	00000090 HAL_I2C_Init
0801139c g     O .rodata	00000010 NVIC_ISER2_fields
0801851c g     O .parsetable	0000000c CmdWE
08003614  w    F .text	00000002 HAL_I2C_MspDeInit
0800c174 g     O .rodata	00000028 CAN_RDH0R_fields
0800e910 g     O .rodata	00000028 FPU_FPDSCR_fields
08004774 g     F .text	0000000c USBD_VCP_DeviceDescriptor
080021d0  w    F .text	00000002 HAL_MspInit
0800a500 g     O .rodata	00000108 CAN_F0R2_fields
08007f0c g     O .rodata	00000010 TSC_IOG8CR_fields
20001164 g     O .bss	00000460 tasks
0800470c g     F .text	00000026 USBD_LL_IsStallEP
080129ac g     O .rodata	00000108 CAN_F0R1_fields
0800d74c g     O .rodata	00000028 TIM15_SMCR_fields
080046c0 g     F .text	0000000e USBD_LL_Start
08004cbc g     F .text	00000048 COMPASSACCELERO_IO_ITConfig
08004d80 g     F .text	00000030 BSP_ACCELERO_Init
08003d4c g     F .text	0000000a USBD_Start
08000942 g     F .text	0000000a _fstat_r
080024a6 g     F .text	00000008 HAL_GPIO_TogglePin
080116f8 g     O .rodata	00000050 TIM8_CR1_fields
0800f690 g     O .rodata	00000010 Flash_AR_fields
0800b7b8 g     O .rodata	00000108 CAN_F2R1_fields
0800e5e8 g     O .rodata	00000060 COMP_COMP4_CSR_fields
08009c84 g     O .rodata	00000048 GPIOB_AFRH_fields
08001584 g     F .text	00000030 TaskAccel
080070e0 g       .text	00000000 _etext
0800e5a0 g     O .rodata	00000018 EXTI_PR2_fields
0800f4c8 g     O .rodata	00000030 USB_FS_FNR_fields
20000a3c g       .bss	00000000 _sbss
0800e330 g     O .rodata	00000060 COMP_registers
080115b8 g     O .rodata	00000108 CAN_F4R2_fields
08004770 g     F .text	00000002 USBD_static_free
0800dd50 g     O .rodata	00000010 DMA1_CMAR1_fields
0800b53c g     O .rodata	00000068 TIM2_DIER_fields
0800c394 g     O .rodata	00000010 TSC_IOG1CR_fields
0801348c g     O .rodata	00000028 TIM17_CCER_fields
08013284 g     O .rodata	00000010 TIM8_RCR_fields
0800fab8 g     O .rodata	00000018 TIM16_CNT_fields
0800b334 g     O .rodata	00000108 GPIOB_BSRR_fields
0800c854 g     O .rodata	00000108 CAN_F16R2_fields
0800a2f8 g     O .rodata	00000020 ADC1_OFR1_fields
08011f58 g     O .rodata	00000108 CAN_F24R2_fields
0800bb08 g     O .rodata	00000010 RTC_BKP23R_fields
0800f130 g     O .rodata	00000010 TIM15_CCR2_fields
08009484 g     O .rodata	000000a0 ADC1_CFGR_fields
08008f30 g     O .rodata	00000010 RTC_BKP13R_fields
08003d3e g     F .text	0000000e USBD_RegisterClass
0800cabc g     O .rodata	00000108 CAN_F20R1_fields
0800c95c g     O .rodata	00000068 USART1_ICR_fields
08017498 g     O .rodata	00000108 CAN_F25R2_fields
080134b4 g     O .rodata	00000010 TSC_IOG4CR_fields
0800cbc4 g     O .rodata	00000108 CAN_F27R2_fields
08017408 g     O .rodata	00000080 TIM8_SR_fields
080083ac g     O .rodata	00000058 USB_FS_ISTR_fields
080111f4 g     O .rodata	00000010 DMA1_CMAR2_fields
08009ea4 g     O .rodata	00000010 RTC_BKP26R_fields
0800ddc0 g     O .rodata	00000030 ADC1_SQR2_fields
0800d2f4 g     O .rodata	00000018 TIM17_CNT_fields
08009d54 g     O .rodata	00000010 WWDG_SR_fields
08002320 g     F .text	00000170 HAL_GPIO_Init
0800b6c4 g     O .rodata	0000009c EXTI_registers
200065c8 g     O .bss	00000006 xyz
08003efc g     F .text	00000006 USBD_LL_SetSpeed
2000017c g     O .data	00000004 BUTTON_PORT
08004db0 g     F .text	00000014 BSP_ACCELERO_GetXYZ
0800bae8 g     O .rodata	00000010 NVIC_ICTR_fields
08008dd8 g     O .rodata	00000010 TIM6_ARR_fields
0800c1ac g     O .rodata	000000b8 CAN_TSR_fields
08000810 g     F .text	000000a4 DumpBuffer
08001350 g     F .text	00000038 CmdCount
0800d5bc g     O .rodata	00000088 GPIOA_IDR_fields
08007e2c g     O .rodata	00000058 USB_FS_USB_EP3R_fields
08004640 g     F .text	00000002 HAL_PCD_ResumeCallback
0800028c g     F .text	00000134 memcpy
08012524 g     O .rodata	00000108 CAN_F7R2_fields
08012110 g     O .rodata	00000018 TIM1_CNT_fields
08004bcc g     F .text	00000044 GYRO_IO_Write
0800551c g     F .text	00000112 setvbuf
080003c0 g     F .text	0000005c CmdLED
20000a3c g     O .data	00000000 .hidden __TMC_END__
0800b958 g     O .rodata	00000080 TIM1_SR_fields
0800a3d0 g     O .rodata	00000028 NVIC_IPR13_fields
08008ff0 g     O .rodata	00000010 TIM15_PSC_fields
080041a0 g     F .text	000000b4 USBD_StdEPReq
08005bac g     F .text	0000000c _cleanup_r
0800fe9c g     O .rodata	00000048 GPIOA_AFRH_fields
080113f4 g     O .rodata	00000018 DAC_DHR12RD_fields
08011798 g     O .rodata	00000060 COMP_COMP2_CSR_fields
0801140c g     O .rodata	00000080 TIM8_DIER_fields
080171bc g     O .rodata	00000018 ADC1_DIFSEL_fields
08004adc g     F .text	00000074 BSP_PB_Init
0800530c  w    F .text	00000002 USB_HP_CAN_TX_IRQHandler
0800530c  w    F .text	00000002 EXTI0_IRQHandler
08012b9c g     O .rodata	00000018 TIM8_OR_fields
0800530c  w    F .text	00000002 I2C2_EV_IRQHandler
080090d4 g     O .rodata	00000028 CAN_TDH0R_fields
0800b8d0 g     O .rodata	00000058 USB_FS_USB_EP4R_fields
0800e570 g     O .rodata	00000030 WWDG_registers
0800818c g     O .rodata	00000010 TIM17_RCR_fields
080054c4 g     F .text	00000010 puts
080042f0 g     F .text	00000016 USBD_CtlSendStatus
0800530c  w    F .text	00000002 FPU_IRQHandler
08002238  w    F .text	0000001a HAL_Delay
08004170 g     F .text	00000030 USBD_StdItfReq
0800b8c0 g     O .rodata	00000010 TIM8_CCR4_fields
20000014 g     O .data	00000004 SystemCoreClock
08012128 g     O .rodata	000000e4 TIM15_registers
08002b4e g     F .text	00000158 HAL_PCD_EP_Transmit
08000268 g     F .text	00000012 my_Tick
0800e808 g     O .rodata	00000108 CAN_F3R1_fields
08003f1a g     F .text	00000028 USBD_ParseSetupRequest
0800f800 g     O .rodata	00000018 TIM2_CCR1_fields
0800c67c g     O .rodata	00000018 DAC_SWTRIGR_fields
0800530c  w    F .text	00000002 TIM1_UP_TIM16_IRQHandler
0800b1d4 g     O .rodata	00000108 CAN_F13R1_fields
08006258 g     F .text	00000010 malloc
0800db28 g     O .rodata	00000010 IWDG_RLR_fields
080032d4 g     F .text	00000022 PCD_ReadPMA
08000444 g     F .text	00000054 CmdGyro
08013164 g     O .rodata	00000018 CAN_FMR_fields
0801724c g     O .rodata	0000003c OPAMP_registers
08010f84 g     O .rodata	00000010 DMA1_CNDTR4_fields
0801290c g     O .rodata	00000010 NVIC_IABR1_fields
080127e4 g     O .rodata	00000030 ADC1_2_registers
20000128 g     O .data	0000001c VCP_Desc
08012294 g     O .rodata	000000d8 EXTI_PR1_fields
0800530c  w    F .text	00000002 UsageFault_Handler
08010ab4 g     O .rodata	00000028 TIM8_CCR5_fields
0800530c  w    F .text	00000002 ADC1_2_IRQHandler
20000e70 g     O .bss	00000004 __malloc_top_pad
20000eec g     O .bss	00000050 input
080117f8 g     O .rodata	00000108 CAN_F4R1_fields
0800f4b0 g     O .rodata	00000018 ADC1_TR3_fields
0800b9d8 g     O .rodata	00000010 DMA1_CPAR2_fields
08009d64 g     O .rodata	00000050 TIM16_DIER_fields
08002490 g     F .text	0000000c HAL_GPIO_ReadPin
0800e540 g     O .rodata	00000010 NVIC_ICER2_fields
08005944 g     F .text	0000001a strtoul
2000684c g     O .bss	00000004 BuffLength
08009d44 g     O .rodata	00000010 TIM8_CCR1_fields
20006850 g     O .bss	0000006c UartHandle
08012d64 g     O .rodata	00000108 CAN_F9R2_fields
08010700 g     O .rodata	00000010 DAC_DHR12L2_fields
08005ef8 g     F .text	00000314 __sfvwrite_r
08003f02 g     F .text	00000018 USBD_LL_SOF
20000000 g       .data	00000000 _sdata
0800530c  w    F .text	00000002 SPI1_IRQHandler
0800e978 g     O .rodata	00000030 CAN_TI0R_fields
0800530c  w    F .text	00000002 CAN_SCE_IRQHandler
08012ed4 g     O .rodata	00000050 ADC1_SMPR2_fields
0800f9c8 g     O .rodata	00000028 NVIC_IPR4_fields
08000908 g     F .text	00000034 _sbrk_r
08008f08 g     O .rodata	00000028 NVIC_IPR18_fields
08004550 g     F .text	0000009c HAL_PCD_MspInit
0801092c g     O .rodata	00000018 TIM6_DIER_fields
08009ad4 g     O .rodata	00000068 TIM1_CCMR1_Output_fields
08016d4c g     O .rodata	000000b8 USART1_ISR_fields
0800530c  w    F .text	00000002 TIM6_DAC_IRQHandler
0800a8f8 g     O .rodata	00000070 I2C1_CR2_fields
0800ec58 g     O .rodata	00000010 TIM8_CCR2_fields
08003108 g     F .text	000000a2 HAL_PCD_EP_SetStall
08000ae8 g     F .text	0000000a _read_r
08007f74 g     O .rodata	00000050 TIM1_SMCR_fields
0800ee70 g     O .rodata	00000038 CAN_ESR_fields
08003d14 g     F .text	0000002a USBD_Init
08011920 g     O .rodata	00000088 GPIOB_BRR_fields
200065d4 g     O .bss	00000178 hpcd
08006f50 g     F .text	00000082 _fclose_r
0800f940 g     O .rodata	00000020 ADC1_OFR2_fields
08009050 g     O .rodata	00000018 TIM2_ARR_fields
08004c58 g     F .text	00000064 COMPASSACCELERO_IO_Init
20000e6c g     O .bss	00000004 __malloc_max_sbrked_mem
0801352c g     O .rodata	00000108 CAN_F9R1_fields
0800f6a0 g     O .rodata	00000040 RTC_DR_fields
08012078 g     O .rodata	00000010 TIM1_CCR1_fields
080022f4 g     F .text	0000002c HAL_SYSTICK_Config
08010e6c g     O .rodata	00000010 Flash_OPTKEYR_fields
0800bf74 g     O .rodata	00000020 ADC1_OFR4_fields
20001160 g     O .bss	00000004 USBDDataIn
0800530c  w    F .text	00000002 TIM8_UP_IRQHandler
20000144 g     O .data	0000001a USBD_StringSerial
0800c4bc g     O .rodata	00000108 CAN_F25R1_fields
080132c4 g     O .rodata	00000020 SPI1_I2SPR_fields
080109bc g     O .rodata	00000010 ADC1_JDR1_fields
08011598 g     O .rodata	00000010 IWDG_KR_fields
0801285c g     O .rodata	00000058 USB_FS_USB_EP0R_fields
08004d04 g     F .text	0000003c COMPASSACCELERO_IO_Write
0800ec78 g     O .rodata	00000108 CAN_F23R2_fields
0800e9d8 g     O .rodata	00000048 CRC_registers
0800b12c g     O .rodata	000000a8 USART1_CR1_fields
0800bb48 g     O .rodata	00000264 RTC_registers
0800c28c g     O .rodata	00000108 CAN_F5R2_fields
0800af50 g     O .rodata	00000030 TIM17_CR2_fields
08017a38 g       .init_array	00000000 __exidx_start
0800a808 g     O .rodata	00000020 TIM16_CCMR1_Input_fields
080093f4 g     O .rodata	00000010 Flash_KEYR_fields
08005016 g     F .text	0000001c LSM303DLHC_AccZClickITConfig
0800f340 g     O .rodata	00000068 TIM8_CCMR2_Output_fields
08009c54 g     O .rodata	00000030 PWR_CSR_fields
200015c4 g     O .bss	00000004 currentTask
08011ee0 g     O .rodata	00000018 RTC_ALRMASSR_fields
200000a0 g     O .data	00000043 USBD_CDC_OtherSpeedCfgDesc
0801262c g     O .rodata	00000028 SYSCFG_EXTICR4_fields
0800b454 g     O .rodata	00000010 NVIC_IABR0_fields
08017a30 g     O .rodata	00000004 _global_impure_ptr
0800b604 g     O .rodata	00000048 FPU_MVFR0_fields
080110e4 g     O .rodata	00000010 TIM16_RCR_fields
08006980 g     F .text	000003de _realloc_r
0800535c g     F .text	0000005a __libc_init_array
080042de g     F .text	00000012 USBD_CtlContinueRx
08012504 g     O .rodata	00000010 RTC_BKP12R_fields
080088d8 g     O .rodata	00000018 USART1_GTPR_fields
08002572 g     F .text	00000346 HAL_PCD_EP_Open
0800530c  w    F .text	00000002 DMA2_Channel2_IRQHandler
0800530c  w    F .text	00000002 DMA1_Channel4_IRQHandler
08009b4c g     O .rodata	00000018 TIM1_OR_fields
08007e84 g     O .rodata	00000088 GPIOB_PUPDR_fields
08002ca6 g     F .text	00000462 HAL_PCD_IRQHandler
08000580 g     F .text	00000020 CmdR
080131b4 g     O .rodata	00000010 TIM1_CCR4_fields
0800dd18 g     O .rodata	00000028 CAN_TDL1R_fields
08011770 g     O .rodata	00000028 NVIC_IPR7_fields
080051b2 g     F .text	0000002e L3GD20_FilterCmd
08012254 g     O .rodata	00000010 TIM17_DMAR_fields
08003616 g     F .text	0000002e HAL_I2C_DeInit
08010914 g     O .rodata	00000018 TIM15_CNT_fields
080039b6 g     F .text	000000a4 HAL_SPI_Init
0800aac0 g     O .rodata	00000010 RTC_BKP10R_fields
0800b5a4 g     O .rodata	00000050 CAN_MSR_fields
0800f558 g     O .rodata	000000a8 RCC_registers
080070c8 g     F .text	00000000 _init
0800c264 g     O .rodata	00000028 CAN_TDL0R_fields
0800e938 g     O .rodata	00000010 DAC_DHR8R2_fields
0800fee4 g     O .rodata	00000098 RCC_APB1RSTR_fields
08004e08 g     F .text	00000014 BSP_GYRO_GetXYZ
0800a608 g     O .rodata	00000010 RTC_BKP0R_fields
08010290 g     O .rodata	00000438 CAN_registers
08018480 g       .parsetable	00000000 _parsetable_start
0800c0e4 g     O .rodata	00000068 DMA1_CCR5_fields
0800b7a8 g     O .rodata	00000010 RTC_BKP8R_fields
0800ad28 g     O .rodata	000000d8 TSC_registers
0800e648 g     O .rodata	00000038 TIM2_CCMR2_Input_fields
080046f0 g     F .text	0000000e USBD_LL_StallEP
08009724 g     O .rodata	00000010 NVIC_ICER1_fields
08012264 g     O .rodata	00000030 TIM16_EGR_fields
080184f8 g     O .parsetable	0000000c CmdRE
080039b4  w    F .text	00000002 HAL_SPI_MspInit
0801080c g     O .rodata	00000108 CAN_F8R1_fields
0800530c  w    F .text	00000002 USART3_IRQHandler
0800dbe8 g     O .rodata	00000108 CAN_F21R1_fields
0800b2dc g     O .rodata	00000058 RCC_CSR_fields
080047b4 g     F .text	0000003c USBD_VCP_SerialStrDescriptor
0800e158 g     O .rodata	00000088 GPIOA_OTYPER_fields
080134e4 g     O .rodata	00000018 DAC_DHR12LD_fields
0800a1b8 g     O .rodata	00000038 TIM16_SR_fields
0800ff7c g     O .rodata	00000144 TIM1_registers
08005328 g     F .text	00000032 __libc_fini_array
08012b5c g     O .rodata	00000040 ADC1_JSQR_fields
200070f8 g       .bss	00000000 _ebss
08001320 g     F .text	00000030 CmdTest
08004d40 g     F .text	00000040 COMPASSACCELERO_IO_Read
200001d0 g     O .data	0000002c L3gd20Drv
0800e6a8 g     O .rodata	00000058 FPU_CPACR_fields
0800530c  w    F .text	00000002 DMA1_Channel7_IRQHandler
0800eb80 g     O .rodata	00000028 CAN_TDL2R_fields
08003740 g     F .text	00000108 HAL_I2C_Mem_Read
08009854 g     O .rodata	00000048 GPIOA_AFRL_fields
080052bc  w    F .text	00000038 Reset_Handler
20000018 g     O .data	00000043 USBD_CDC_CfgFSDesc
0801700c g     O .rodata	00000010 RTC_BKP29R_fields
08004dc4 g     F .text	00000044 BSP_GYRO_Init
080095dc g     O .rodata	00000028 NVIC_IPR0_fields
0800de30 g     O .rodata	00000088 GPIOA_ODR_fields
0800b9e8 g     O .rodata	00000028 NVIC_IPR15_fields
08009b3c g     O .rodata	00000010 TIM1_CCR2_fields
0800afb4 g     O .rodata	000000d8 EXTI_RTSR1_fields
0800c0d4 g     O .rodata	00000010 DAC_DOR2_fields
0800dd40 g     O .rodata	00000010 CRC_DR_fields
0800963c g     O .rodata	00000088 GPIOB_OSPEEDR_fields
080184ec g     O .parsetable	0000000c CmdLEDE
0800530c  w    F .text	00000002 UART5_IRQHandler
200065d0 g     O .bss	00000004 r
08000dc8 g     F .text	0000003c DecodePeripheral
0801221c g     O .rodata	00000028 SYSCFG_EXTICR1_fields
080082a4 g     O .rodata	00000108 CAN_F11R2_fields
0800530c  w    F .text	00000002 ADC3_IRQHandler
0800db38 g     O .rodata	00000040 RTC_TSTR_fields
0800ee20 g     O .rodata	00000050 TIM2_CR1_fields
080021f8 g     F .text	00000024 HAL_Init
0800d804 g     O .rodata	00000108 CAN_F1R2_fields
08006928 g     F .text	00000058 _putc_r
080042be g     F .text	00000020 USBD_CtlPrepareRx
0800d394 g     O .rodata	00000010 RTC_BKP17R_fields
080013a8 g     F .text	00000024 TaskInit
080100c0 g     O .rodata	00000028 CAN_RDL1R_fields
0800aae0 g     O .rodata	00000108 CAN_F23R1_fields
08003a5c g     F .text	0000002e HAL_SPI_DeInit
0800530c  w    F .text	00000002 TIM4_IRQHandler
0800bfbc g     O .rodata	00000108 CAN_F18R1_fields
080131c4 g     O .rodata	000000a8 USB_FS_registers
0801347c g     O .rodata	00000010 TIM8_CCR3_fields
08010e7c g     O .rodata	00000108 CAN_F13R2_fields
080072b2 g     O .rodata	00000008 LEDs
0800f600 g     O .rodata	00000038 TIM2_CCMR1_Input_fields
08017488 g     O .rodata	00000010 DAC_DHR12R1_fields
08013744 g     O .rodata	00000030 I2C1_OAR1_fields
08004768 g     F .text	00000008 USBD_static_malloc
08009744 g     O .rodata	00000028 CAN_RF0R_fields
0800530c  w    F .text	00000002 CAN_RX1_IRQHandler
0800530c  w    F .text	00000002 DMA2_Channel1_IRQHandler
08009734 g     O .rodata	00000010 RTC_BKP7R_fields
0800e1e0 g     O .rodata	00000018 ADC1_TR1_fields
08013104 g     O .rodata	00000010 DMA1_CNDTR7_fields
080044fa g     F .text	0000002e USBD_CDC_TransmitPacket
20000180 g     O .data	00000004 I2cxTimeout
0800c0c4 g     O .rodata	00000010 TSC_IOG5CR_fields
0800ca24 g     O .rodata	00000010 DAC_DHR12R2_fields
0800e958 g     O .rodata	00000010 RTC_BKP18R_fields
08000250 g     F .text	00000016 mytest
0800aad0 g     O .rodata	00000010 DMA1_CMAR6_fields
0800c9ec g     O .rodata	00000038 TIM15_CCMR1_Input_fields
08000498 g     F .text	0000002c CmdButton
00000000  w      *UND*	00000000 __deregister_frame_info
08004306 g     F .text	00000016 USBD_CtlReceiveStatus
0800bed4 g     O .rodata	00000018 TIM2_CCR4_fields
200070f8 g       ._user_heap_stack	00000000 end
20000160 g     O .data	00000008 LineCoding
0800b64c g     O .rodata	00000078 SPI1_CR1_fields
0800530c  w    F .text	00000002 I2C1_EV_IRQHandler
08010218 g     O .rodata	00000078 SPI1_registers
080046ce g     F .text	00000014 USBD_LL_OpenEP
0800f960 g     O .rodata	00000018 TIM8_DCR_fields
08000e54 g     F .text	00000054 DecodePrintRegisters
0800e060 g     O .rodata	00000070 USB_FS_USB_CNTR_fields
0800c5ec g     O .rodata	00000090 USART1_registers
08005148 g     F .text	0000003c L3GD20_DisableIT
08009b64 g     O .rodata	00000010 USART1_TDR_fields
0800fdf4 g     O .rodata	00000080 RCC_APB1ENR_fields
08003a5a  w    F .text	00000002 HAL_SPI_MspDeInit
08013774 g     O .rodata	00000010 DMA1_CNDTR2_fields
0801148c g     O .rodata	00000078 CAN_IER_fields
0801291c g     O .rodata	00000068 DMA1_CCR1_fields
08012d54 g     O .rodata	00000010 NVIC_ICER0_fields
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
0800dbc0 g     O .rodata	00000010 NVIC_ISER1_fields
08003e34 g     F .text	0000008a USBD_LL_DataInStage
08016ffc g     O .rodata	00000010 RTC_BKP31R_fields
0800e010 g     O .rodata	00000050 TIM1_EGR_fields
080120a8 g     O .rodata	00000068 TIM2_CCMR1_Output_fields
08011234 g     O .rodata	00000018 DAC_SR_fields
0800f200 g     O .rodata	00000018 TIM2_CCR2_fields
08004644 g     F .text	0000007c USBD_LL_Init
080116e8 g     O .rodata	00000010 RTC_BKP3R_fields
08004a88 g     F .text	0000001c BSP_LED_On
08005032 g     F .text	00000032 L3GD20_Init
0800530c  w    F .text	00000002 DMA1_Channel6_IRQHandler
08003f42 g     F .text	00000016 USBD_CtlError
2000005c g     O .data	00000038 USBD_CDC
08003d6c g     F .text	0000000e USBD_ClrClassConfig
08016e04 g     O .rodata	00000010 RTC_BKP5R_fields
0800530c  w    F .text	00000002 UART4_IRQHandler
0800530c  w    F .text	00000002 DMA2_Channel4_IRQHandler
080044d0 g     F .text	0000000e USBD_CDC_RegisterInterface
08005cb0 g     F .text	00000002 __sfp_lock_acquire
080067cc g     F .text	00000090 memchr
08005d5c g     F .text	0000019c _free_r
0800530c  w    F .text	00000002 TIM3_IRQHandler
0800530c  w    F .text	00000002 RCC_IRQHandler
080087a0 g     O .rodata	00000028 RTC_CALR_fields
0800b5f4 g     O .rodata	00000010 DAC_DHR12L1_fields
080088a0 g     O .rodata	00000038 TIM17_SR_fields
0800df40 g     O .rodata	00000088 GPIOB_OTYPER_fields
0800530c  w    F .text	00000002 DMA1_Channel1_IRQHandler
080123f4 g     O .rodata	00000010 RTC_BKP9R_fields
080132e4 g     O .rodata	00000108 CAN_F14R2_fields
080045fa g     F .text	00000012 HAL_PCD_DataOutStageCallback
0800530c g       .text	00000002 Default_Handler
20000a38 g     O .data	00000004 __malloc_sbrk_base
0800480c g     F .text	0000001c USBD_VCP_ManufacturerStrDescriptor
0800f8a0 g     O .rodata	00000090 GPIOA_LCKR_fields
0800c7ac g     O .rodata	00000098 RTC_TAFCR_fields
20000168 g     O .data	00000010 USBD_CDC_fops
080133ec g     O .rodata	00000090 GPIOA_registers
0800beb4 g     O .rodata	00000010 NVIC_ISPR2_fields
0800530c  w    F .text	00000002 USBWakeUp_RMP_IRQHandler
08010954 g     O .rodata	00000068 TIM2_CCMR2_Output_fields
08009a34 g     O .rodata	00000090 GPIOB_LCKR_fields
08009404 g     O .rodata	00000080 TIM8_CR2_fields
08002b3e g     F .text	00000010 HAL_PCD_EP_GetRxCount
08008f40 g     O .rodata	00000038 CAN_BTR_fields
080054d4 g     F .text	00000046 rand
08016e14 g     O .rodata	00000068 DMA1_CCR4_fields
0800a000 g     O .rodata	00000028 NVIC_IPR10_fields
0800c844 g     O .rodata	00000010 TIM17_ARR_fields
0800c694 g     O .rodata	00000108 CAN_F12R2_fields
08010c34 g     O .rodata	00000030 USART1_RQR_fields
0800f508 g     O .rodata	00000050 TIM17_DIER_fields
08008114 g     O .rodata	00000010 RTC_BKP22R_fields
08010c64 g     O .rodata	00000028 CAN_TDH2R_fields
0800e3a8 g     O .rodata	00000010 TIM1_RCR_fields
080046fe g     F .text	0000000e USBD_LL_ClearStallEP
080173e0 g     O .rodata	00000028 NVIC_IPR5_fields
08009eb4 g     O .rodata	00000060 Flash_OBR_fields
0800530c  w    F .text	00000002 EXTI15_10_IRQHandler
0800a878 g     O .rodata	00000020 CAN_TDT1R_fields
080051e0 g     F .text	000000dc L3GD20_ReadXYZAngRate
0800ef68 g     O .rodata	00000040 RTC_TR_fields
0800fa90 g     O .rodata	00000028 NVIC_IPR17_fields
08005960 g     F .text	000000ac __register_exitproc
08009e44 g     O .rodata	00000060 Flash_CR_fields
0800ba78 g     O .rodata	00000060 SPI1_SR_fields
0800b760 g     O .rodata	00000048 USB_FS_DADDR_fields
080013cc g     F .text	00000070 TaskAdd
0800c15c g     O .rodata	00000018 EXTI_SWIER2_fields
080184e0 g     O .parsetable	0000000c CmdTaskKillE
08002546 g     F .text	0000002c HAL_PCD_SetAddress
0800dd98 g     O .rodata	00000028 NVIC_IPR19_fields
0800cccc g     O .rodata	00000010 TIM6_SR_fields
08008900 g     O .rodata	00000108 CAN_F1R1_fields
08010dfc g     O .rodata	00000060 DES_registers
08011910 g     O .rodata	00000010 TIM17_PSC_fields
08008820 g     O .rodata	00000028 SYSCFG_EXTICR2_fields
0800d1dc g     O .rodata	00000010 SPI1_CRCPR_fields
08004e6a g     F .text	0000001e LSM303DLHC_AccFilterConfig
08001e30 g     F .text	000002fc HAL_RCC_ClockConfig
08002254 g     F .text	00000024 HAL_NVIC_SetPriorityGrouping
20000004 g     O .data	00000004 Commands
08012e6c g     O .rodata	00000018 ADC1_TR2_fields
20000e74 g     O .bss	00000028 __malloc_current_mallinfo
08004f94 g     F .text	0000001e LSM303DLHC_AccFilterClickCmd
0800e9c8 g     O .rodata	00000010 RTC_TSSSR_fields
0800069c g     F .text	0000012c TaskInput
0800c4ac g     O .rodata	00000010 TIM6_CR2_fields
08010ffc g     O .rodata	00000058 RCC_CR_fields
0800e1f8 g     O .rodata	000000e8 CAN_FM1R_fields
0800ed80 g     O .rodata	00000010 TIM1_CCR6_fields
0800f9f0 g     O .rodata	000000a0 USART1_CR2_fields
08010b24 g     O .rodata	00000068 TIM1_BDTR_fields
08005630 g     F .text	00000046 strcasecmp
08008650 g     O .rodata	00000010 IWDG_WINR_fields
0800e2e0 g     O .rodata	00000050 ADC1_SMPR1_fields
08004c10 g     F .text	00000048 GYRO_IO_Read
08000280 g     F .text	00000004 my_Init
0800bb18 g     O .rodata	00000020 I2C1_OAR2_fields
08012bb4 g     O .rodata	00000108 CAN_F26R1_fields
0800580c g     F .text	00000136 _strtoul_r
0800f3a8 g     O .rodata	00000010 CRC_POL_fields
0801701c g     O .rodata	00000010 DMA1_CMAR4_fields
0800530c  w    F .text	00000002 TIM7_IRQHandler
080050ac g     F .text	0000005c L3GD20_INT1InterruptConfig
0800463e g     F .text	00000002 HAL_PCD_SuspendCallback
08010c9c g     O .rodata	00000010 DMA1_CPAR3_fields
0800caac g     O .rodata	00000010 RTC_BKP14R_fields
0800437c g     F .text	0000000c USBD_CDC_GetDeviceQualifierDescriptor
0800093c g     F .text	00000006 _close_r
08007d64 g     O .rodata	00000010 SPI1_DR_fields
080093c4 g     O .rodata	00000020 RCC_CFGR2_fields
08008ef0 g     O .rodata	00000018 TIM15_DCR_fields
08009000 g     O .rodata	00000020 Flash_ACR_fields
08017134 g     O .rodata	00000010 CRC_IDR_fields
200001a4 g     O .data	0000002c Lsm303dlhcDrv
0800bec4 g     O .rodata	00000010 DMA1_CPAR5_fields
080126dc g     O .rodata	00000108 CAN_F18R2_fields
08010adc g     O .rodata	00000048 IWDG_registers
08005794 g     F .text	00000012 strtok
080184d4 g     O .parsetable	0000000c CmdGyroE
080099e4 g     O .rodata	00000010 IWDG_PR_fields
0800f108 g     O .rodata	00000028 NVIC_IPR11_fields
0800e3b8 g     O .rodata	00000058 COMP_COMP7_CSR_fields
08008768 g     O .rodata	00000028 CAN_RF1R_fields
08000a24 g     F .text	0000007c TerminalInit
08006e88 g     F .text	000000c6 __swsetup_r
0800afa4 g     O .rodata	00000010 TIM8_ARR_fields
08001548 g     F .text	0000003c TaskLedOff
0800530c  w    F .text	00000002 EXTI9_5_IRQHandler
08003d0e g     F .text	00000006 HAL_SPI_GetState
0800ac10 g     O .rodata	00000010 ADC1_DR_fields
0800530c  w    F .text	00000002 RTC_WKUP_IRQHandler
08016fe4 g     O .rodata	00000018 USART1_BRR_fields
080128b4 g     O .rodata	00000058 TIM15_CCMR1_Output_fields
2000062c g     O .data	00000408 __malloc_av_
0800f760 g     O .rodata	00000090 SYSCFG_CFGR1_fields
08000af2 g     F .text	00000012 TerminalReadNonBlock
0801350c g     O .rodata	00000020 CAN_TDT0R_fields
080008b4 g     F .text	00000054 CmdDump
08006d60 g     F .text	00000022 __sread
0800de00 g     O .rodata	00000030 TIM16_CCMR1_Output_fields
08011204 g     O .rodata	00000020 WWDG_CFR_fields
08011ac0 g     O .rodata	000002a0 Peripherals
0801236c g     O .rodata	00000088 GPIOB_ODR_fields
080015b4 g     F .text	0000002c TaskPB
0800222c  w    F .text	0000000c HAL_GetTick
0800f3c8 g     O .rodata	00000058 USB_FS_USB_EP5R_fields
0800c3a4 g     O .rodata	00000108 CAN_F11R1_fields
0800150c g     F .text	0000003c TaskLedOn
08006920 g     F .text	00000002 __malloc_lock
08010c8c g     O .rodata	00000010 NVIC_ISPR0_fields
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
080096c4 g     O .rodata	00000060 ADC1_ISR_fields
08009ccc g     O .rodata	00000050 FPU_FPCCR_fields
0801326c g     O .rodata	00000018 TSC_ICR_fields
08004ea6 g     F .text	000000ee LSM303DLHC_AccReadXYZ
0800a358 g     O .rodata	00000010 NVIC_IABR2_fields
08005b80 g     F .text	0000002c _fflush_r
08000b04 g     F .text	00000012 TerminalReadAnyNonBlock
080047f0 g     F .text	0000001c USBD_VCP_ProductStrDescriptor
0801388c g     O .rodata	00000088 GPIOA_PUPDR_fields
0800530c  w    F .text	00000002 SPI2_IRQHandler
08011748 g     O .rodata	00000010 RTC_BKP21R_fields
08017906 g     O .rodata	00000012 hUSBDDeviceDesc
080080e4 g     O .rodata	00000030 RTC_TSDR_fields
08000cb4 g     F .text	0000000c USB_LP_CAN_RX0_IRQHandler
080112b4 g     O .rodata	00000050 RCC_CFGR3_fields
080053b8 g     F .text	00000094 memset
0800530c  w    F .text	00000002 MemManage_Handler
080004d0 g     F .text	00000090 main
08010cac g     O .rodata	00000108 TSC_IOSCR_fields
08007bf0 g     O .rodata	00000174 DMA1_registers
08004b50 g     F .text	00000014 BSP_PB_GetState
0800f150 g     O .rodata	00000028 SYSCFG_EXTICR3_fields
20000e68 g     O .bss	00000004 __malloc_max_total_mem
0800bad8 g     O .rodata	00000010 ADC1_JDR3_fields
0800f0f8 g     O .rodata	00000010 SPI1_TXCRCR_fields
08003a8a g     F .text	00000284 HAL_SPI_TransmitReceive
20000178 g     O .data	00000004 SpixTimeout
08018480 g       *ABS*	00000000 _siccmram
080171f4 g     O .rodata	00000058 COMP_COMP3_CSR_fields
0800cd94 g     O .rodata	00000028 NVIC_IPR9_fields
080016fc g     F .text	00000088 CmdTaskAdd
0800d020 g     O .rodata	0000003c DBGMCU_registers
080116c0 g     O .rodata	00000028 NVIC_IPR16_fields
0800bdac g     O .rodata	00000108 CAN_F2R2_fields
0800530c  w    F .text	00000002 SVC_Handler
08006ddc g     F .text	00000008 __sclose
0800530c  w    F .text	00000002 DMA2_Channel5_IRQHandler
0800a720 g     O .rodata	000000e8 DMA1_IFCR_fields
08006fd4 g     F .text	00000010 fclose
08009554 g     O .rodata	00000088 TSC_IOGCSR_fields
08000c40 g     F .text	00000074 TerminalInputBufferWrite
080134c4 g     O .rodata	00000010 DMA1_CPAR1_fields
0800b43c g     O .rodata	00000018 DES_UID0_fields
08006268 g     F .text	00000562 _malloc_r
0800ef20 g     O .rodata	00000048 GPIOB_AFRL_fields
08009144 g     O .rodata	00000060 ADC1_IER_fields
08009ac4 g     O .rodata	00000010 DAC_DHR8R1_fields
080106c8 g     O .rodata	00000038 TIM1_CCMR1_Input_fields
080092bc g     O .rodata	00000108 TSC_IOASCR_fields
0800abe8 g     O .rodata	00000028 NVIC_IPR20_fields
0800620c g     F .text	0000004a _fwalk
08003ebe g     F .text	0000003e USBD_LL_Reset
080100e8 g     O .rodata	00000020 CAN_RDT1R_fields
0800d30c g     O .rodata	00000088 GPIOA_BRR_fields
080119b8 g     O .rodata	00000108 CAN_F20R2_fields
0800e390 g     O .rodata	00000018 TSC_ISR_fields
00000000  w      *UND*	00000000 __libc_fini
08001388 g     F .text	00000020 TaskCounter
0800475c g     F .text	0000000c USBD_LL_GetRxDataSize
0800530c  w    F .text	00000002 DMA1_Channel5_IRQHandler
08004e1c g     F .text	00000020 LSM303DLHC_AccInit
0800530c  w    F .text	00000002 USB_LP_IRQHandler
200068bc g     O .bss	00000800 UserRxBuffer
0800f0b0 g     O .rodata	00000048 SPI1_I2SCFGR_fields
080178b5 g     O .rodata	00000004 USBD_LangIDDesc
080098dc g     O .rodata	00000108 CAN_F15R2_fields
0800530c  w    F .text	00000002 EXTI4_IRQHandler
0801119c g     O .rodata	00000058 USB_FS_USB_EP2R_fields
20000184 g     O .data	00000020 LED_PORT
08008504 g     O .rodata	00000010 TIM8_CCR6_fields
08004fd0 g     F .text	00000046 LSM303DLHC_AccClickITEnable
08003dd4 g     F .text	00000060 USBD_LL_DataOutStage
0800c79c g     O .rodata	00000010 RTC_BKP4R_fields
08005cb8 g     F .text	000000a2 _malloc_trim_r
0801220c g     O .rodata	00000010 TSC_IOG7CR_fields
08008790 g     O .rodata	00000010 RTC_BKP16R_fields
0800dfc8 g     O .rodata	00000030 DBGMCU_CR_fields
0800e9a8 g     O .rodata	00000020 CAN_RDT0R_fields
08009f14 g     O .rodata	00000010 ADC1_AWD2CR_fields
08012cbc g     O .rodata	00000010 DMA1_CMAR5_fields
0800c5c4 g     O .rodata	00000028 CAN_RDL0R_fields
0801397c g     O .rodata	00000010 DMA1_CPAR4_fields
08011504 g     O .rodata	0000006c TIM6_registers
0800041c g     F .text	00000028 CmdAccel
0800e698 g     O .rodata	00000010 RTC_BKP11R_fields
08003848 g     F .text	00000006 HAL_I2C_GetState
08001784 g     F .text	00000068 SystemInit
0800f978 g     O .rodata	00000050 TIM16_BDTR_fields
0800e0e0 g     O .rodata	00000078 RTC_ALRMBR_fields
0800eb68 g     O .rodata	00000018 TIM2_DCR_fields
08013924 g     O .rodata	00000058 ADC1_CR_fields
080070d4 g     F .text	00000000 _fini
08000564 g     F .text	0000001c CmdW
0800253a g     F .text	0000000c HAL_PCD_Start
0800530c  w    F .text	00000002 TIM1_TRG_COM_TIM17_IRQHandler
0800d05c g     O .rodata	00000028 EXTI_EMR2_fields
08004e3c g     F .text	00000012 LSM303DLHC_AccReadID
0800962c g     O .rodata	00000010 RTC_WUTR_fields
0800f140 g     O .rodata	00000010 DMA1_CPAR6_fields
08012b4c g     O .rodata	00000010 CRC_INIT_fields
08008464 g     O .rodata	00000090 RTC_ISR_fields
080090fc g     O .rodata	00000018 TIM1_DCR_fields
08008b68 g     O .rodata	00000040 PWR_CR_fields
0800b464 g     O .rodata	00000038 TIM2_EGR_fields
08005310 g     F .text	0000000c atexit
08012ccc g     O .rodata	00000088 OPAMP_OPAMP1_CR_fields
08009f24 g     O .rodata	00000054 FPU_registers
080091b4 g     O .rodata	00000108 EXTI_IMR1_fields
08000c08 g     F .text	00000038 _write_r
08009bdc g     O .rodata	00000018 ADC1_SQR4_fields
10000000 g       .data	00000000 _eccmram
08013124 g     O .rodata	00000030 ADC1_SQR3_fields
0800530c  w    F .text	00000002 DMA1_Channel3_IRQHandler
080136bc g     O .rodata	00000088 DBGMCU_APB1FZ_fields
0800edb8 g     O .rodata	00000068 SPI1_CR2_fields
0801318c g     O .rodata	00000018 ADC1_CALFACT_fields
08011900 g     O .rodata	00000010 RTC_BKP28R_fields
080021d2  w    F .text	00000024 HAL_InitTick
08009db4 g     O .rodata	00000028 TIM1_CCR5_fields
08004732 g     F .text	0000000e USBD_LL_SetUSBAddress
08012984 g     O .rodata	00000028 NVIC_IPR12_fields
08017918 g     O .rodata	00000010 LED_PIN
20000628 g     O .data	00000004 _impure_ptr
0800e5b8 g     O .rodata	00000020 CAN_TDT2R_fields
08010e5c g     O .rodata	00000010 ADC1_JDR4_fields
08010db4 g     O .rodata	00000048 TIM15_CR2_fields
08005a24 g     F .text	0000015a __sflush_r
08008b00 g     O .rodata	00000068 RCC_CFGR_fields
0800221c  w    F .text	00000010 HAL_IncTick
08009524 g     O .rodata	00000030 TIM17_EGR_fields
080046e2 g     F .text	0000000e USBD_LL_CloseEP
0800530c  w    F .text	00000002 ADC4_IRQHandler
08010b8c g     O .rodata	000000a8 RTC_CR_fields
080042ac g     F .text	00000012 USBD_CtlContinueSendData
08012404 g     O .rodata	000000e8 DMA1_ISR_fields
0800a1f0 g     O .rodata	00000108 CAN_F6R1_fields
08005064 g     F .text	0000001c L3GD20_ReadID
0800530c  w    F .text	00000002 WWDG_IRQHandler
08003582  w    F .text	00000002 HAL_I2C_MspInit
0800819c g     O .rodata	00000108 EXTI_EMR1_fields
0800c9c4 g     O .rodata	00000028 NVIC_IPR6_fields
0801398c g     O .rodata	00000018 TIM2_CCR3_fields
0801124c g     O .rodata	00000068 DMA1_CCR6_fields
0800deb8 g     O .rodata	00000088 GPIOA_MODER_fields
08011314 g     O .rodata	00000088 OPAMP_OPAMP2_CR_fields
0800f6e0 g     O .rodata	00000080 TIM1_CR2_fields
0800b940 g     O .rodata	00000018 RTC_PRER_fields
08004740 g     F .text	0000000e USBD_LL_Transmit
0800530c  w    F .text	00000002 TIM2_IRQHandler
0800027c g     F .text	00000004 my_Loop
08012b0c g     O .rodata	00000028 TIM16_CCER_fields
080024ae g     F .text	0000008c HAL_PCD_Init
200000e4 g     O .data	00000043 USBD_CDC_CfgHSDesc
0800dbd0 g     O .rodata	00000018 DES_UID1_fields
080184c8 g     O .parsetable	0000000c CmdDecodeE
0800a9b8 g     O .rodata	00000108 CAN_F26R2_fields
0801848c g     O .parsetable	0000000c CmdTaskAddE
20000000 g       .data	00000000 myTickCount
0800f218 g     O .rodata	00000108 CAN_F6R2_fields
0800ac20 g     O .rodata	00000108 CAN_F16R1_fields
080084f4 g     O .rodata	00000010 RTC_BKP27R_fields
0800e680 g     O .rodata	00000018 EXTI_RTSR2_fields
08013294 g     O .rodata	00000030 TIM16_CR2_fields
0800a038 g     O .rodata	00000078 RTC_ALRMAR_fields
08011588 g     O .rodata	00000010 TIM1_ARR_fields
08004254 g     F .text	0000003c USBD_GetString
08004ac0 g     F .text	0000001c BSP_LED_Toggle
0800a3f8 g     O .rodata	00000108 CAN_F22R2_fields
08007fdc g     O .rodata	00000108 CAN_F24R1_fields
080045ec g     F .text	0000000e HAL_PCD_SetupStageCallback
0801702c g     O .rodata	00000108 CAN_F5R1_fields
0800530c  w    F .text	00000002 COMP7_IRQHandler
20007fff g       *ABS*	00000000 _estack
080005a0 g     F .text	000000fc parse
0800fde4 g     O .rodata	00000010 RTC_BKP2R_fields
0800530c  w    F .text	00000002 COMP1_2_3_IRQHandler
0800efa8 g     O .rodata	00000108 CAN_F17R1_fields
0800530c  w    F .text	00000002 EXTI1_IRQHandler
08009ddc g     O .rodata	00000068 TIM8_BDTR_fields
0800f638 g     O .rodata	00000058 USB_FS_USB_EP1R_fields
08007d74 g     O .rodata	000000b8 ADC1_2_CSR_fields
0800f4f8 g     O .rodata	00000010 FPU_FPCAR_fields
20000a3c g       .data	00000000 _edata
0800d90c g     O .rodata	00000144 TIM8_registers
0800baf8 g     O .rodata	00000010 RTC_BKP30R_fields
0800f320 g     O .rodata	00000020 TIM17_CCMR1_Input_fields
10000000 g       .data	00000000 _sccmram
0800ea20 g     O .rodata	00000040 TIM16_CR1_fields
08017288 g     O .rodata	00000108 CAN_F17R2_fields
0800a318 g     O .rodata	00000040 TIM15_CR1_fields
08000ea8 g     F .text	000001f8 CmdDecode
0800e5d8 g     O .rodata	00000010 TIM15_RCR_fields
0800beec g     O .rodata	00000088 GPIOB_IDR_fields
08007f1c g     O .rodata	00000058 TIM1_CCMR3_Output_fields
0800e0d0 g     O .rodata	00000010 TIM8_DMAR_fields
08009068 g     O .rodata	0000006c Flash_registers
0800d1ec g     O .rodata	00000018 TIM16_DCR_fields
08016f9c g     O .rodata	00000048 RCC_APB2RSTR_fields
080007c8 g     F .text	00000028 fetch_uint32_arg
08011570 g     O .rodata	00000018 RTC_ALRMBSSR_fields
080113ac g     O .rodata	00000048 SYSCFG_RCR_fields
0800530c  w    F .text	00000002 USART2_IRQHandler
08012e94 g     O .rodata	00000040 TIM17_CR1_fields
0800faf8 g     O .rodata	000001d4 NVIC_registers
0800530c  w    F .text	00000002 COMP4_5_6_IRQHandler
08006d84 g     F .text	00000038 __swrite
080017ec g     F .text	00000644 HAL_RCC_OscConfig
20000a34 g     O .data	00000004 __malloc_trim_threshold
0800e550 g     O .rodata	00000010 TIM17_CCR1_fields
0800b0fc g     O .rodata	00000030 I2C1_TIMINGR_fields
080119a8 g     O .rodata	00000010 USB_FS_BTABLE_fields
0800cd6c g     O .rodata	00000028 CAN_TDH1R_fields
0800eba8 g     O .rodata	000000b0 I2C1_CR1_fields
08000000 g     O .isr_vector	00000000 g_pfnVectors
08004290 g     F .text	0000001c USBD_CtlSendData
08011dd8 g     O .rodata	00000108 CAN_F15R1_fields
080110f4 g     O .rodata	00000018 ADC1_2_CDR_fields
0800c19c g     O .rodata	00000010 TIM6_PSC_fields
08010944 g     O .rodata	00000010 RTC_BKP15R_fields
0800af80 g     O .rodata	00000024 PWR_registers
080184b0 g     O .parsetable	0000000c CmdCountE
200015c8 g     O .bss	00005000 stacks
08011db0 g     O .rodata	00000028 Flash_SR_fields
080134fc g     O .rodata	00000010 ADC1_JDR2_fields
08001474 g     F .text	00000074 TaskSwitcher
0800dd08 g     O .rodata	00000010 RTC_BKP20R_fields
200001fc g     O .data	00000004 __ctype_ptr__
0800c14c g     O .rodata	00000010 DMA1_CNDTR6_fields
08008660 g     O .rodata	00000108 CAN_F19R2_fields
0800530c  w    F .text	00000002 I2C2_ER_IRQHandler
0800d204 g     O .rodata	00000048 ADC1_2_CCR_fields
0800530c  w    F .text	00000002 DMA1_Channel2_IRQHandler
0800859c g     O .rodata	000000b4 DAC_registers
08013634 g     O .rodata	00000088 GPIOA_OSPEEDR_fields
08016f64 g     O .rodata	00000038 TIM8_CCMR2_Input_fields
08005cb4 g     F .text	00000002 __sfp_lock_release
08008514 g     O .rodata	00000050 TIM17_BDTR_fields
0800fad0 g     O .rodata	00000028 CAN_RDH1R_fields
0800eea8 g     O .rodata	00000068 TIM2_CCER_fields
08012b34 g     O .rodata	00000018 DAC_DHR8RD_fields
080007f0 g     F .text	00000020 fetch_string_arg
08004a20 g     F .text	00000068 BSP_LED_Init
0800d4ac g     O .rodata	00000088 GPIOB_MODER_fields
080184bc g     O .parsetable	0000000c CmdDumpE
080178a5 g     O .rodata	00000010 PLLMULFactorTable
0800b49c g     O .rodata	000000a0 USART1_CR3_fields
08000d3c g     F .text	00000040 DecodeField
08012684 g     O .rodata	00000028 CAN_RI0R_fields
0800530c  w    F .text	00000002 TIM8_BRK_IRQHandler
08009d1c g     O .rodata	00000028 DBGMCU_APB2FZ_fields
080093e4 g     O .rodata	00000010 TIM1_PSC_fields
08000e04 g     F .text	00000050 DecodePrintPeripherals
0800d24c g     O .rodata	00000040 TIM15_CCER_fields
08017928 g     O .rodata	00000101 _ctype_
0800f7f0 g     O .rodata	00000010 DMA1_CMAR7_fields
0800bf94 g     O .rodata	00000028 CAN_RI1R_fields
08012fa4 g     O .rodata	00000030 SYSCFG_CFGR2_fields
0800ccdc g     O .rodata	00000090 RCC_CIR_fields
08018510 g     O .parsetable	0000000c CmdStatsE
0800530c  w    F .text	00000002 FLASH_IRQHandler
0800d010 g     O .rodata	00000010 TIM15_DMAR_fields
08012fd4 g     O .rodata	00000018 EXTI_FTSR2_fields
0800d0d4 g     O .rodata	00000108 CAN_F10R2_fields
0800b0d4 g     O .rodata	00000028 NVIC_IPR3_fields
0801317c g     O .rodata	00000010 DMA1_CNDTR1_fields
08009a04 g     O .rodata	00000030 I2C1_TIMEOUTR_fields
08008f78 g     O .rodata	00000050 TIM15_BDTR_fields
08004780 g     F .text	0000000c USBD_VCP_LangIDStrDescriptor
2000674c g     O .bss	00000100 USBD_StrDesc
08018504 g     O .parsetable	0000000c CmdTasksE
08000b18 g     F .text	000000f0 TerminalOutputBufferWrite
0800530c  w    F .text	00000002 BusFault_Handler
0800530c  w    F .text	00000002 USART1_IRQHandler
0800d28c g     O .rodata	00000058 COMP_COMP1_CSR_fields
08017390 g     O .rodata	00000050 TIM8_EGR_fields
08006fe4 g     F .text	000000e4 __smakebuf_r
0800db78 g     O .rodata	00000048 TIM15_SR_fields
08005734 g     F .text	0000005e strlen
0800b08c g     O .rodata	00000048 RCC_APB2ENR_fields
0800530c  w    F .text	00000002 SPI3_IRQHandler
200070bc g     O .bss	0000003c TimHandle
0800f420 g     O .rodata	00000068 DMA1_CCR3_fields
0800a968 g     O .rodata	00000050 TIM1_CR1_fields
08012088 g     O .rodata	00000020 IWDG_SR_fields
08012f24 g     O .rodata	00000058 USB_FS_USB_EP6R_fields
08010108 g     O .rodata	000000d8 TIM16_registers
080032f6  w    F .text	00000002 HAL_PCDEx_SetConnectionState
0800cf44 g     O .rodata	000000cc TIM17_registers
08003644 g     F .text	000000fc HAL_I2C_Mem_Write
08007b50 g     O .rodata	000000a0 TIM1_CCER_fields
0800e700 g     O .rodata	00000108 CAN_F3R2_fields
08009f78 g     O .rodata	00000088 DAC_CR_fields
0800530c  w    F .text	00000002 I2C1_ER_IRQHandler
08009b84 g     O .rodata	00000058 USB_FS_USB_EP7R_fields
0800d774 g     O .rodata	00000090 I2C1_ISR_fields
08008124 g     O .rodata	00000068 TIM1_CCMR2_Output_fields
08009604 g     O .rodata	00000028 NVIC_IPR8_fields
08017895 g     O .rodata	00000010 PredivFactorTable
08012fec g     O .rodata	00000010 TSC_IOG3CR_fields
0800474e g     F .text	0000000e USBD_LL_PrepareReceive
0800bb38 g     O .rodata	00000010 DMA1_CNDTR3_fields
080015e0 g     F .text	00000054 TaskGyro
08005080 g     F .text	0000002c L3GD20_RebootCmd
08008cd0 g     O .rodata	00000108 CAN_F27R1_fields
0800dff8 g     O .rodata	00000018 TSC_IER_fields
0800ce5c g     O .rodata	000000e8 CAN_FFA1R_fields
0800b928 g     O .rodata	00000018 TIM8_CNT_fields
08012e84 g     O .rodata	00000010 ADC1_AWD3CR_fields
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08013154 g     O .rodata	00000010 RTC_BKP25R_fields
0800e438 g     O .rodata	00000108 TSC_IOCCR_fields
0800f178 g     O .rodata	00000088 OPAMP_OPAMP3_CR_fields
080044ee g     F .text	0000000c USBD_CDC_SetRxBuffer
08016e8c g     O .rodata	000000d8 EXTI_SWIER1_fields
08008454 g     O .rodata	00000010 TIM16_ARR_fields
0800dcf0 g     O .rodata	00000018 DBGMCU_IDCODE_fields
0800fe74 g     O .rodata	00000028 EXTI_IMR2_fields
08011304 g     O .rodata	00000010 TIM6_EGR_fields
0800f858 g     O .rodata	00000010 SPI1_RXCRCR_fields
080171e4 g     O .rodata	00000010 I2C1_PECR_fields
08002a6e g     F .text	000000d0 HAL_PCD_EP_Receive
08016d2c g     O .rodata	00000020 ADC1_OFR3_fields
0800a898 g     O .rodata	00000060 COMP_COMP6_CSR_fields
0800e948 g     O .rodata	00000010 RTC_BKP1R_fields
08010f94 g     O .rodata	00000068 TIM8_CCMR1_Output_fields
08010a24 g     O .rodata	00000090 GPIOB_registers
08000d7c g     F .text	0000004c DecodeRegister
0800d084 g     O .rodata	00000050 TIM8_SMCR_fields
08000cc0 g     F .text	00000040 DecodeReadRegister
00000000  w      *UND*	00000000 __register_frame_info
08008848 g     O .rodata	00000058 CAN_MCR_fields
080088f0 g     O .rodata	00000010 DAC_DOR1_fields
08000aa0 g     F .text	00000048 TerminalRead
0800ba10 g     O .rodata	00000068 TSC_CR_fields
080099f4 g     O .rodata	00000010 TIM2_DMAR_fields
08008564 g     O .rodata	00000038 TIM8_CCMR1_Input_fields
08004fb2 g     F .text	0000001e LSM303DLHC_AccIT1Enable
08008de8 g     O .rodata	00000108 CAN_F12R1_fields
0800530c  w    F .text	00000002 USBWakeUp_IRQHandler
08017144 g     O .rodata	00000010 TIM16_PSC_fields
080110d4 g     O .rodata	00000010 USART1_RDR_fields
0800f818 g     O .rodata	00000040 RCC_BDCR_fields
08011758 g     O .rodata	00000018 TIM17_DCR_fields
08013914 g     O .rodata	00000010 NVIC_ISPR1_fields
080091a4 g     O .rodata	00000010 NVIC_ICPR2_fields
08018480 g     O .parsetable	0000000c CmdAccelE
08012ffc g     O .rodata	00000108 CAN_F21R2_fields
08012814 g     O .rodata	00000010 DES_UID2_fields
080044de g     F .text	00000010 USBD_CDC_SetTxBuffer
08009bf4 g     O .rodata	00000060 SYSCFG_registers
0800d534 g     O .rodata	00000088 OPAMP_OPAMP4_CR_fields
0800530c  w    F .text	00000002 DMA2_Channel3_IRQHandler
0800da50 g     O .rodata	000000d8 EXTI_FTSR1_fields
08004844 g     F .text	0000001c USBD_VCP_InterfaceStrDescriptor
0800d3a4 g     O .rodata	00000108 CAN_F7R1_fields
08003d7a g     F .text	0000005a USBD_LL_SetupStage
080004c4 g     F .text	0000000a Error_Handler
08012060 g     O .rodata	00000018 WWDG_CR_fields
0800530c  w    F .text	00000002 EXTI2_TSC_IRQHandler
08009b74 g     O .rodata	00000010 NVIC_STIR_fields
0800530c  w    F .text	00000002 TIM1_BRK_TIM15_IRQHandler
080109cc g     O .rodata	00000058 TIM8_CCMR3_Output_fields



Disassembly of section .text:

08000188 <deregister_tm_clones>:
 8000188:	b508      	push	{r3, lr}
 800018a:	f640 203c 	movw	r0, #2620	; 0xa3c
 800018e:	4b07      	ldr	r3, [pc, #28]	; (80001ac <deregister_tm_clones+0x24>)
 8000190:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000194:	1a1b      	subs	r3, r3, r0
 8000196:	2b06      	cmp	r3, #6
 8000198:	d800      	bhi.n	800019c <deregister_tm_clones+0x14>
 800019a:	bd08      	pop	{r3, pc}
 800019c:	f240 0300 	movw	r3, #0
 80001a0:	f2c0 0300 	movt	r3, #0
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d0f8      	beq.n	800019a <deregister_tm_clones+0x12>
 80001a8:	4798      	blx	r3
 80001aa:	e7f6      	b.n	800019a <deregister_tm_clones+0x12>
 80001ac:	20000a3f 	.word	0x20000a3f

080001b0 <register_tm_clones>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	f640 203c 	movw	r0, #2620	; 0xa3c
 80001b6:	f640 233c 	movw	r3, #2620	; 0xa3c
 80001ba:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80001be:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80001c2:	1a1b      	subs	r3, r3, r0
 80001c4:	109b      	asrs	r3, r3, #2
 80001c6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80001ca:	1059      	asrs	r1, r3, #1
 80001cc:	d100      	bne.n	80001d0 <register_tm_clones+0x20>
 80001ce:	bd08      	pop	{r3, pc}
 80001d0:	f240 0200 	movw	r2, #0
 80001d4:	f2c0 0200 	movt	r2, #0
 80001d8:	2a00      	cmp	r2, #0
 80001da:	d0f8      	beq.n	80001ce <register_tm_clones+0x1e>
 80001dc:	4790      	blx	r2
 80001de:	e7f6      	b.n	80001ce <register_tm_clones+0x1e>

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	f640 243c 	movw	r4, #2620	; 0xa3c
 80001e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80001ea:	7823      	ldrb	r3, [r4, #0]
 80001ec:	b973      	cbnz	r3, 800020c <__do_global_dtors_aux+0x2c>
 80001ee:	f7ff ffcb 	bl	8000188 <deregister_tm_clones>
 80001f2:	f240 0300 	movw	r3, #0
 80001f6:	f2c0 0300 	movt	r3, #0
 80001fa:	b12b      	cbz	r3, 8000208 <__do_global_dtors_aux+0x28>
 80001fc:	f247 00c8 	movw	r0, #28872	; 0x70c8
 8000200:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000204:	f3af 8000 	nop.w
 8000208:	2301      	movs	r3, #1
 800020a:	7023      	strb	r3, [r4, #0]
 800020c:	bd10      	pop	{r4, pc}
 800020e:	bf00      	nop

08000210 <frame_dummy>:
 8000210:	b508      	push	{r3, lr}
 8000212:	f240 0300 	movw	r3, #0
 8000216:	f2c0 0300 	movt	r3, #0
 800021a:	b14b      	cbz	r3, 8000230 <frame_dummy+0x20>
 800021c:	f247 00c8 	movw	r0, #28872	; 0x70c8
 8000220:	f640 2140 	movw	r1, #2624	; 0xa40
 8000224:	f6c0 0000 	movt	r0, #2048	; 0x800
 8000228:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800022c:	f3af 8000 	nop.w
 8000230:	f640 203c 	movw	r0, #2620	; 0xa3c
 8000234:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8000238:	6803      	ldr	r3, [r0, #0]
 800023a:	b12b      	cbz	r3, 8000248 <frame_dummy+0x38>
 800023c:	f240 0300 	movw	r3, #0
 8000240:	f2c0 0300 	movt	r3, #0
 8000244:	b103      	cbz	r3, 8000248 <frame_dummy+0x38>
 8000246:	4798      	blx	r3
 8000248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800024c:	e7b0      	b.n	80001b0 <register_tm_clones>
 800024e:	bf00      	nop

08000250 <mytest>:
    .type   mytest, %function   @@ - symbol type (not req)
@@ Declaration : int mytest(int x)
@@ Uses r0 for param 0
@@   r0: x
mytest:
    push {lr}
 8000250:	b500      	push	{lr}
    push {r1}
 8000252:	b402      	push	{r1}
    push {r0-r7}
 8000254:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r0, =0
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <my_Init+0x4>)
    bl   BSP_LED_Toggle           @@ call BSP function
 8000258:	f004 fc32 	bl	8004ac0 <BSP_LED_Toggle>
    pop  {r0-r7}
 800025c:	bcff      	pop	{r0, r1, r2, r3, r4, r5, r6, r7}
    ldr  r1, =myTickCount
 800025e:	490a      	ldr	r1, [pc, #40]	; (8000288 <my_Init+0x8>)
    ldr  r0, [r1]
 8000260:	6808      	ldr	r0, [r1, #0]
    pop  {r1} 
 8000262:	bc02      	pop	{r1}
    pop  {pc}
 8000264:	bd00      	pop	{pc}
 8000266:	bf00      	nop

08000268 <my_Tick>:
    .thumb_func             @@ /
    .type   my_Tick, %function   @@ - symbol type (not req)
@@ Declaration : void my_Tick( void )
@@ Uses nothing
my_Tick:
    push {lr}
 8000268:	b500      	push	{lr}
    push {r0-r1}
 800026a:	b403      	push	{r0, r1}

    ldr  r1, =myTickCount
 800026c:	4906      	ldr	r1, [pc, #24]	; (8000288 <my_Init+0x8>)
    ldr  r0, [r1]
 800026e:	6808      	ldr	r0, [r1, #0]
    add  r0, r0, #1
 8000270:	f100 0001 	add.w	r0, r0, #1
    str  r0, [r1]
 8000274:	6008      	str	r0, [r1, #0]
    pop {r0-r1}
 8000276:	bc03      	pop	{r0, r1}
    pop  {pc}
 8000278:	bd00      	pop	{pc}
 800027a:	bf00      	nop

0800027c <my_Loop>:
    .thumb_func             @@ /
    .type   my_Loop, %function   @@ - symbol type (not req)
@@ Declaration : void my_Loop( void )
@@ Uses nothing
my_Loop:
    push {lr}
 800027c:	b500      	push	{lr}
    pop  {pc}
 800027e:	bd00      	pop	{pc}

08000280 <my_Init>:
    .thumb_func             @@ /
    .type   my_Init, %function   @@ - symbol type (not req)
@@ Declaration : void my_Init( void )
@@ Uses nothing
my_Init:
    push {lr}
 8000280:	b500      	push	{lr}
    pop  {pc}
 8000282:	bd00      	pop	{pc}
@@   r0: x
mytest:
    push {lr}
    push {r1}
    push {r0-r7}
    ldr  r0, =0
 8000284:	00000000 	.word	0x00000000
    bl   BSP_LED_Toggle           @@ call BSP function
    pop  {r0-r7}
    ldr  r1, =myTickCount
 8000288:	20000000 	.word	0x20000000

0800028c <memcpy>:
 800028c:	4684      	mov	ip, r0
 800028e:	ea41 0300 	orr.w	r3, r1, r0
 8000292:	f013 0303 	ands.w	r3, r3, #3
 8000296:	d16d      	bne.n	8000374 <memcpy+0xe8>
 8000298:	3a40      	subs	r2, #64	; 0x40
 800029a:	d341      	bcc.n	8000320 <memcpy+0x94>
 800029c:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a0:	f840 3b04 	str.w	r3, [r0], #4
 80002a4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002a8:	f840 3b04 	str.w	r3, [r0], #4
 80002ac:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b0:	f840 3b04 	str.w	r3, [r0], #4
 80002b4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002b8:	f840 3b04 	str.w	r3, [r0], #4
 80002bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c0:	f840 3b04 	str.w	r3, [r0], #4
 80002c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c8:	f840 3b04 	str.w	r3, [r0], #4
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d8:	f840 3b04 	str.w	r3, [r0], #4
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f0:	f840 3b04 	str.w	r3, [r0], #4
 80002f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f8:	f840 3b04 	str.w	r3, [r0], #4
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	3a40      	subs	r2, #64	; 0x40
 800031e:	d2bd      	bcs.n	800029c <memcpy+0x10>
 8000320:	3230      	adds	r2, #48	; 0x30
 8000322:	d311      	bcc.n	8000348 <memcpy+0xbc>
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	3a10      	subs	r2, #16
 8000346:	d2ed      	bcs.n	8000324 <memcpy+0x98>
 8000348:	320c      	adds	r2, #12
 800034a:	d305      	bcc.n	8000358 <memcpy+0xcc>
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	3a04      	subs	r2, #4
 8000356:	d2f9      	bcs.n	800034c <memcpy+0xc0>
 8000358:	3204      	adds	r2, #4
 800035a:	d008      	beq.n	800036e <memcpy+0xe2>
 800035c:	07d2      	lsls	r2, r2, #31
 800035e:	bf1c      	itt	ne
 8000360:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000364:	f800 3b01 	strbne.w	r3, [r0], #1
 8000368:	d301      	bcc.n	800036e <memcpy+0xe2>
 800036a:	880b      	ldrh	r3, [r1, #0]
 800036c:	8003      	strh	r3, [r0, #0]
 800036e:	4660      	mov	r0, ip
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	2a08      	cmp	r2, #8
 8000376:	d313      	bcc.n	80003a0 <memcpy+0x114>
 8000378:	078b      	lsls	r3, r1, #30
 800037a:	d08d      	beq.n	8000298 <memcpy+0xc>
 800037c:	f010 0303 	ands.w	r3, r0, #3
 8000380:	d08a      	beq.n	8000298 <memcpy+0xc>
 8000382:	f1c3 0304 	rsb	r3, r3, #4
 8000386:	1ad2      	subs	r2, r2, r3
 8000388:	07db      	lsls	r3, r3, #31
 800038a:	bf1c      	itt	ne
 800038c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000390:	f800 3b01 	strbne.w	r3, [r0], #1
 8000394:	d380      	bcc.n	8000298 <memcpy+0xc>
 8000396:	f831 3b02 	ldrh.w	r3, [r1], #2
 800039a:	f820 3b02 	strh.w	r3, [r0], #2
 800039e:	e77b      	b.n	8000298 <memcpy+0xc>
 80003a0:	3a04      	subs	r2, #4
 80003a2:	d3d9      	bcc.n	8000358 <memcpy+0xcc>
 80003a4:	3a01      	subs	r2, #1
 80003a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003aa:	f800 3b01 	strb.w	r3, [r0], #1
 80003ae:	d2f9      	bcs.n	80003a4 <memcpy+0x118>
 80003b0:	780b      	ldrb	r3, [r1, #0]
 80003b2:	7003      	strb	r3, [r0, #0]
 80003b4:	784b      	ldrb	r3, [r1, #1]
 80003b6:	7043      	strb	r3, [r0, #1]
 80003b8:	788b      	ldrb	r3, [r1, #2]
 80003ba:	7083      	strb	r3, [r0, #2]
 80003bc:	4660      	mov	r0, ip
 80003be:	4770      	bx	lr

080003c0 <CmdLED>:
{
    HAL_IncTick();
}

void CmdLED(int mode)
{
 80003c0:	b507      	push	{r0, r1, r2, lr}
  uint32_t led,val;
  int rc;
  if(mode != CMD_INTERACTIVE) {
 80003c2:	b9f8      	cbnz	r0, 8000404 <CmdLED+0x44>
    return;
  }

  rc = fetch_uint32_arg(&led);
 80003c4:	4668      	mov	r0, sp
 80003c6:	f000 f9ff 	bl	80007c8 <fetch_uint32_arg>
  if(rc) {
 80003ca:	b108      	cbz	r0, 80003d0 <CmdLED+0x10>
    printf("Missing LED index\n");
 80003cc:	480f      	ldr	r0, [pc, #60]	; (800040c <CmdLED+0x4c>)
 80003ce:	e004      	b.n	80003da <CmdLED+0x1a>
    return;
  }
    
  rc = fetch_uint32_arg(&val);
 80003d0:	a801      	add	r0, sp, #4
 80003d2:	f000 f9f9 	bl	80007c8 <fetch_uint32_arg>
  if(rc) {
 80003d6:	b118      	cbz	r0, 80003e0 <CmdLED+0x20>
    printf("Missing state value, 0 for Off, 1 for On\n");
 80003d8:	480d      	ldr	r0, [pc, #52]	; (8000410 <CmdLED+0x50>)
 80003da:	f005 f873 	bl	80054c4 <puts>
    return;
 80003de:	e011      	b.n	8000404 <CmdLED+0x44>
  }
  
  if((led < 3) || (led > 10)) {
 80003e0:	9900      	ldr	r1, [sp, #0]
 80003e2:	1ecb      	subs	r3, r1, #3
 80003e4:	2b07      	cmp	r3, #7
 80003e6:	d903      	bls.n	80003f0 <CmdLED+0x30>
    printf("Led index of %u is out of the range (3..10)\n",
 80003e8:	480a      	ldr	r0, [pc, #40]	; (8000414 <CmdLED+0x54>)
 80003ea:	f000 ff8b 	bl	8001304 <printf>
	   (unsigned int)led);
    return;
 80003ee:	e009      	b.n	8000404 <CmdLED+0x44>
 80003f0:	4a09      	ldr	r2, [pc, #36]	; (8000418 <CmdLED+0x58>)
  }

  led -= 3;
  if(val) {
 80003f2:	9901      	ldr	r1, [sp, #4]
    printf("Led index of %u is out of the range (3..10)\n",
	   (unsigned int)led);
    return;
  }

  led -= 3;
 80003f4:	9300      	str	r3, [sp, #0]
  if(val) {
    BSP_LED_On(LEDs[led]);
 80003f6:	5cd0      	ldrb	r0, [r2, r3]
	   (unsigned int)led);
    return;
  }

  led -= 3;
  if(val) {
 80003f8:	b111      	cbz	r1, 8000400 <CmdLED+0x40>
    BSP_LED_On(LEDs[led]);
 80003fa:	f004 fb45 	bl	8004a88 <BSP_LED_On>
 80003fe:	e001      	b.n	8000404 <CmdLED+0x44>
  } else {
    BSP_LED_Off(LEDs[led]);
 8000400:	f004 fb50 	bl	8004aa4 <BSP_LED_Off>
  }

} 
 8000404:	b003      	add	sp, #12
 8000406:	f85d fb04 	ldr.w	pc, [sp], #4
 800040a:	bf00      	nop
 800040c:	080070e0 	.word	0x080070e0
 8000410:	080070f2 	.word	0x080070f2
 8000414:	0800711b 	.word	0x0800711b
 8000418:	080072b2 	.word	0x080072b2

0800041c <CmdAccel>:

ADD_CMD("led",CmdLED,"<index> <state> Turn off/on LED")

void CmdAccel(int mode)
{
 800041c:	b507      	push	{r0, r1, r2, lr}
  int16_t xyz[3];

  if(mode != CMD_INTERACTIVE) {
 800041e:	b958      	cbnz	r0, 8000438 <CmdAccel+0x1c>
    return;
  }

  BSP_ACCELERO_GetXYZ(xyz);
 8000420:	4668      	mov	r0, sp
 8000422:	f004 fcc5 	bl	8004db0 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 8000426:	4806      	ldr	r0, [pc, #24]	; (8000440 <CmdAccel+0x24>)
 8000428:	f9bd 1000 	ldrsh.w	r1, [sp]
 800042c:	f9bd 2002 	ldrsh.w	r2, [sp, #2]
 8000430:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8000434:	f000 ff66 	bl	8001304 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);


}
 8000438:	b003      	add	sp, #12
 800043a:	f85d fb04 	ldr.w	pc, [sp], #4
 800043e:	bf00      	nop
 8000440:	08007148 	.word	0x08007148

08000444 <CmdGyro>:

ADD_CMD("accel", CmdAccel,"                Read Accelerometer");

void CmdGyro(int mode)
{
 8000444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  if(mode != CMD_INTERACTIVE) {
 8000446:	b9f8      	cbnz	r0, 8000488 <CmdGyro+0x44>
    return;
  }

  BSP_GYRO_GetXYZ(xyz);
 8000448:	a801      	add	r0, sp, #4
 800044a:	f004 fcdd 	bl	8004e08 <BSP_GYRO_GetXYZ>

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 800044e:	eddf 7a10 	vldr	s15, [pc, #64]	; 8000490 <CmdGyro+0x4c>
 8000452:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 8000456:	ed9d 7a02 	vldr	s14, [sp, #8]
	 (int)(xyz[2]*256));
 800045a:	ed9d 6a03 	vldr	s12, [sp, #12]

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 800045e:	ee66 6aa7 	vmul.f32	s13, s13, s15
	 (int)(xyz[1]*256),
 8000462:	ee27 7a27 	vmul.f32	s14, s14, s15
	 (int)(xyz[2]*256));
 8000466:	ee66 7a27 	vmul.f32	s15, s12, s15
    return;
  }

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 800046a:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 800046e:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 8000472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000476:	4807      	ldr	r0, [pc, #28]	; (8000494 <CmdGyro+0x50>)
 8000478:	ee16 1a90 	vmov	r1, s13
 800047c:	ee17 2a10 	vmov	r2, s14
 8000480:	ee17 3a90 	vmov	r3, s15
 8000484:	f000 ff3e 	bl	8001304 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
}
 8000488:	b005      	add	sp, #20
 800048a:	f85d fb04 	ldr.w	pc, [sp], #4
 800048e:	bf00      	nop
 8000490:	43800000 	.word	0x43800000
 8000494:	0800717b 	.word	0x0800717b

08000498 <CmdButton>:

ADD_CMD("gyro", CmdGyro,"                Read Gyroscope");

void CmdButton(int mode)
{
 8000498:	b508      	push	{r3, lr}
  uint32_t button;

  if(mode != CMD_INTERACTIVE) {
 800049a:	b958      	cbnz	r0, 80004b4 <CmdButton+0x1c>
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
 800049c:	f004 fb58 	bl	8004b50 <BSP_PB_GetState>
  
  printf("Button is currently: %s\n",
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <CmdButton+0x20>)
 80004a2:	4906      	ldr	r1, [pc, #24]	; (80004bc <CmdButton+0x24>)
 80004a4:	2800      	cmp	r0, #0
 80004a6:	bf18      	it	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4805      	ldr	r0, [pc, #20]	; (80004c0 <CmdButton+0x28>)
	 button ? "Pressed" : "Released");

  return;
}
 80004ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return;
  }

  button = BSP_PB_GetState(BUTTON_USER);
  
  printf("Button is currently: %s\n",
 80004b0:	f000 bf28 	b.w	8001304 <printf>
 80004b4:	bd08      	pop	{r3, pc}
 80004b6:	bf00      	nop
 80004b8:	080071aa 	.word	0x080071aa
 80004bc:	080071b2 	.word	0x080071b2
 80004c0:	080071bb 	.word	0x080071bb

080004c4 <Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void Error_Handler(void)
{
 80004c4:	b508      	push	{r3, lr}
  BSP_LED_On(LED6);
 80004c6:	2003      	movs	r0, #3
 80004c8:	f004 fade 	bl	8004a88 <BSP_LED_On>
 80004cc:	e7fe      	b.n	80004cc <Error_Handler+0x8>
	...

080004d0 <main>:

/* Private function prototypes -----------------------------------------------*/
static void SystemClock_Config(void);

int main(int argc, char **argv)
{
 80004d0:	b510      	push	{r4, lr}
 80004d2:	b090      	sub	sp, #64	; 0x40
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004d4:	2301      	movs	r3, #1
 80004d6:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004d8:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004e2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004e4:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80004e6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004e8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  
  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004ec:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ee:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct)!= HAL_OK)
 80004f0:	f001 f97c 	bl	80017ec <HAL_RCC_OscConfig>
 80004f4:	bb10      	cbnz	r0, 800053c <main+0x6c>
    Error_Handler();
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80004f6:	230f      	movs	r3, #15
 80004f8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004fa:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80004fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000500:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 8000502:	4621      	mov	r1, r4
 8000504:	a801      	add	r0, sp, #4
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000506:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8000508:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2)!= HAL_OK)
 800050a:	f001 fc91 	bl	8001e30 <HAL_RCC_ClockConfig>
 800050e:	4604      	mov	r4, r0
 8000510:	b9a0      	cbnz	r0, 800053c <main+0x6c>
  uint32_t i;
  uint8_t accelRc, gyroRc;
  /* Configure the system clock */
  SystemClock_Config();

  HAL_Init();
 8000512:	f001 fe71 	bl	80021f8 <HAL_Init>

  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
 8000516:	f000 fa85 	bl	8000a24 <TerminalInit>
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
    BSP_LED_Init(LEDs[i]);
 800051a:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <main+0x84>)
 800051c:	5d18      	ldrb	r0, [r3, r4]
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 800051e:	3401      	adds	r4, #1
    BSP_LED_Init(LEDs[i]);
 8000520:	f004 fa7e 	bl	8004a20 <BSP_LED_Init>
  /* Start the Watchdog */


  TerminalInit();  /* Initialize UART and USB */
  /* Configure the LEDs... */
  for(i=0; i<numLEDs; i++) {
 8000524:	2c08      	cmp	r4, #8
 8000526:	d1f8      	bne.n	800051a <main+0x4a>
    BSP_LED_Init(LEDs[i]);
  }

  /* Initialize the pushbutton */
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8000528:	2000      	movs	r0, #0
 800052a:	4601      	mov	r1, r0
 800052c:	f004 fad6 	bl	8004adc <BSP_PB_Init>

  /* Initialize the Accelerometer */
  accelRc = BSP_ACCELERO_Init();
 8000530:	f004 fc26 	bl	8004d80 <BSP_ACCELERO_Init>
  if(accelRc != ACCELERO_OK) {
 8000534:	b120      	cbz	r0, 8000540 <main+0x70>
    printf("Failed to initialize acceleromter\n");
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x88>)
 8000538:	f004 ffc4 	bl	80054c4 <puts>
    Error_Handler();
 800053c:	f7ff ffc2 	bl	80004c4 <Error_Handler>
  }

  /* Initialize the Gyroscope */
  gyroRc = BSP_GYRO_Init();
 8000540:	f004 fc40 	bl	8004dc4 <BSP_GYRO_Init>
  if(gyroRc != GYRO_OK) {
 8000544:	b108      	cbz	r0, 800054a <main+0x7a>
    printf("Failed to initialize Gyroscope\n");
 8000546:	4805      	ldr	r0, [pc, #20]	; (800055c <main+0x8c>)
 8000548:	e7f6      	b.n	8000538 <main+0x68>
    Error_Handler();
  }

  while(1) {
    TaskCounter();
 800054a:	f000 ff1d 	bl	8001388 <TaskCounter>
    TaskInput();
 800054e:	f000 f8a5 	bl	800069c <TaskInput>
 8000552:	e7fa      	b.n	800054a <main+0x7a>
 8000554:	080072b2 	.word	0x080072b2
 8000558:	080071d4 	.word	0x080071d4
 800055c:	080071f6 	.word	0x080071f6

08000560 <SysTick_Handler>:
  }
}

void SysTick_Handler(void)
{
    HAL_IncTick();
 8000560:	f001 be5c 	b.w	800221c <HAL_IncTick>

08000564 <CmdW>:
	 (unsigned int)(*((uint32_t *)addr)));
}


void CmdW(int mode)
{
 8000564:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr,data;

  if(mode != CMD_INTERACTIVE) return;
 8000566:	b940      	cbnz	r0, 800057a <CmdW+0x16>

  fetch_uint32_arg(&addr);
 8000568:	4668      	mov	r0, sp
 800056a:	f000 f92d 	bl	80007c8 <fetch_uint32_arg>
  fetch_uint32_arg(&data);
 800056e:	a801      	add	r0, sp, #4
 8000570:	f000 f92a 	bl	80007c8 <fetch_uint32_arg>

  *((uint32_t *)addr) = data;
 8000574:	9b00      	ldr	r3, [sp, #0]
 8000576:	9a01      	ldr	r2, [sp, #4]
 8000578:	601a      	str	r2, [r3, #0]
}
 800057a:	b003      	add	sp, #12
 800057c:	f85d fb04 	ldr.w	pc, [sp], #4

08000580 <CmdR>:
#include "common.h"



void CmdR(int mode)
{
 8000580:	b507      	push	{r0, r1, r2, lr}
  uint32_t addr;

  if(mode != CMD_INTERACTIVE) return;
 8000582:	b938      	cbnz	r0, 8000594 <CmdR+0x14>

  fetch_uint32_arg(&addr);
 8000584:	a801      	add	r0, sp, #4
 8000586:	f000 f91f 	bl	80007c8 <fetch_uint32_arg>

  printf("0x%08X: 0x%08X\n",(unsigned int)addr, 
 800058a:	9901      	ldr	r1, [sp, #4]
 800058c:	4803      	ldr	r0, [pc, #12]	; (800059c <CmdR+0x1c>)
 800058e:	680a      	ldr	r2, [r1, #0]
 8000590:	f000 feb8 	bl	8001304 <printf>
	 (unsigned int)(*((uint32_t *)addr)));
}
 8000594:	b003      	add	sp, #12
 8000596:	f85d fb04 	ldr.w	pc, [sp], #4
 800059a:	bf00      	nop
 800059c:	080072ba 	.word	0x080072ba

080005a0 <parse>:

#define SEPS " \t\n\v\f\r"

/* Parse the buffer and call commands */ 
int parse(char *buf, int len, const parse_table *table)
{
 80005a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80005a4:	4615      	mov	r5, r2
  char *p;
  int i,arg;
  const parse_table *t;
  
  /* Check for silly things */
  if(buf == NULL) {
 80005a6:	b908      	cbnz	r0, 80005ac <parse+0xc>
    printf("NULL buf pointer passed to %s()\n",__FUNCTION__);
 80005a8:	4831      	ldr	r0, [pc, #196]	; (8000670 <parse+0xd0>)
 80005aa:	e022      	b.n	80005f2 <parse+0x52>
    return -1;
  }

  if(len==0) {
 80005ac:	b909      	cbnz	r1, 80005b2 <parse+0x12>
    printf("len == 0 in %s\n",__FUNCTION__);
 80005ae:	4831      	ldr	r0, [pc, #196]	; (8000674 <parse+0xd4>)
 80005b0:	e01f      	b.n	80005f2 <parse+0x52>
    return -1;
  }

  if(table == NULL) {
 80005b2:	b122      	cbz	r2, 80005be <parse+0x1e>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80005b4:	4b30      	ldr	r3, [pc, #192]	; (8000678 <parse+0xd8>)
 80005b6:	3901      	subs	r1, #1
 80005b8:	681e      	ldr	r6, [r3, #0]
 80005ba:	4603      	mov	r3, r0
 80005bc:	e009      	b.n	80005d2 <parse+0x32>
    printf("len == 0 in %s\n",__FUNCTION__);
    return -1;
  }

  if(table == NULL) {
    printf("NULL table pointer passed to %s()\n",__FUNCTION__);
 80005be:	482f      	ldr	r0, [pc, #188]	; (800067c <parse+0xdc>)
 80005c0:	e017      	b.n	80005f2 <parse+0x52>
  }


  /* Find the first word, by skiping over whitespace */
  i = len;
  while((i--) && (*buf != 0) && (isspace((uint32_t)*buf))) buf++;
 80005c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80005c6:	b15a      	cbz	r2, 80005e0 <parse+0x40>
 80005c8:	4432      	add	r2, r6
 80005ca:	3901      	subs	r1, #1
 80005cc:	7852      	ldrb	r2, [r2, #1]
 80005ce:	0712      	lsls	r2, r2, #28
 80005d0:	d506      	bpl.n	80005e0 <parse+0x40>
 80005d2:	1c4f      	adds	r7, r1, #1
 80005d4:	4618      	mov	r0, r3
 80005d6:	460c      	mov	r4, r1
 80005d8:	d1f3      	bne.n	80005c2 <parse+0x22>
  if((i==0) || (*buf==0)) {
 80005da:	7803      	ldrb	r3, [r0, #0]
 80005dc:	b91b      	cbnz	r3, 80005e6 <parse+0x46>
 80005de:	e042      	b.n	8000666 <parse+0xc6>
 80005e0:	2c00      	cmp	r4, #0
 80005e2:	d1fa      	bne.n	80005da <parse+0x3a>
 80005e4:	e03f      	b.n	8000666 <parse+0xc6>
       __FUNCTION__);
#endif
    return -1;
  }
	
  p = strtok(buf,SEPS);
 80005e6:	4926      	ldr	r1, [pc, #152]	; (8000680 <parse+0xe0>)
 80005e8:	f005 f8d4 	bl	8005794 <strtok>
  if(p==NULL) {
 80005ec:	4606      	mov	r6, r0
 80005ee:	b910      	cbnz	r0, 80005f6 <parse+0x56>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
 80005f0:	4824      	ldr	r0, [pc, #144]	; (8000684 <parse+0xe4>)
 80005f2:	4925      	ldr	r1, [pc, #148]	; (8000688 <parse+0xe8>)
 80005f4:	e035      	b.n	8000662 <parse+0xc2>
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
  /* Check to see if the user is asking for help */
  if(strcasecmp(p,"help") == 0) {
 80005f6:	4925      	ldr	r1, [pc, #148]	; (800068c <parse+0xec>)
 80005f8:	f005 f81a 	bl	8005630 <strcasecmp>
 80005fc:	4604      	mov	r4, r0
 80005fe:	b9a0      	cbnz	r0, 800062a <parse+0x8a>
    /* Check to see if the user is asking for more help */
    p = strtok(NULL,SEPS);
 8000600:	491f      	ldr	r1, [pc, #124]	; (8000680 <parse+0xe0>)
 8000602:	f005 f8c7 	bl	8005794 <strtok>
    if(p == NULL) {
 8000606:	4606      	mov	r6, r0
 8000608:	b988      	cbnz	r0, 800062e <parse+0x8e>
 800060a:	350c      	adds	r5, #12
      /* If we don't get any more tokens the user is asking for short
       * help */
      /* Loop over the commands defined and print help for them */
      for(t=table; t->cmdname!=NULL; t++) {
 800060c:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8000610:	b359      	cbz	r1, 800066a <parse+0xca>
	if(t->help != NULL) {
 8000612:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8000616:	b11a      	cbz	r2, 8000620 <parse+0x80>
	  printf("%12s -- %s\n",t->cmdname,t->help);
 8000618:	481d      	ldr	r0, [pc, #116]	; (8000690 <parse+0xf0>)
 800061a:	f000 fe73 	bl	8001304 <printf>
 800061e:	e7f4      	b.n	800060a <parse+0x6a>
	} else {
	  t->func(CMD_SHORT_HELP);  /* Call the function for short help */
 8000620:	f855 3c08 	ldr.w	r3, [r5, #-8]
 8000624:	2001      	movs	r0, #1
 8000626:	4798      	blx	r3
 8000628:	e7ef      	b.n	800060a <parse+0x6a>
    /* No token found */
    printf("Unable to find a command in the buffer in %s()\n",__FUNCTION__);
    return -1;
  }

  arg = CMD_INTERACTIVE;  /* Default to calling action part of function */
 800062a:	2700      	movs	r7, #0
 800062c:	e008      	b.n	8000640 <parse+0xa0>
      }
      return 0;
    } else {
      /* The user has asked for long help, call the function
       * for help */
      arg = CMD_LONG_HELP;
 800062e:	2702      	movs	r7, #2
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 8000630:	e006      	b.n	8000640 <parse+0xa0>
    if(strcasecmp(p,t->cmdname) == 0) {
 8000632:	4630      	mov	r0, r6
 8000634:	4641      	mov	r1, r8
 8000636:	f004 fffb 	bl	8005630 <strcasecmp>
 800063a:	4604      	mov	r4, r0
 800063c:	b130      	cbz	r0, 800064c <parse+0xac>
      arg = CMD_LONG_HELP;
    }
  }

  /* Now search for token in the table */
  for(t=table; t->cmdname!=NULL; t++) {
 800063e:	350c      	adds	r5, #12
 8000640:	f8d5 8000 	ldr.w	r8, [r5]
 8000644:	f1b8 0f00 	cmp.w	r8, #0
 8000648:	d1f3      	bne.n	8000632 <parse+0x92>
 800064a:	e008      	b.n	800065e <parse+0xbe>
    if(strcasecmp(p,t->cmdname) == 0) {
      /* Got a match, call the function */
      if(arg == CMD_LONG_HELP) {	
 800064c:	b11f      	cbz	r7, 8000656 <parse+0xb6>
	printf("%s:\n",t->cmdname);
 800064e:	4811      	ldr	r0, [pc, #68]	; (8000694 <parse+0xf4>)
 8000650:	4641      	mov	r1, r8
 8000652:	f000 fe57 	bl	8001304 <printf>
      }
      t->func(arg);
 8000656:	686b      	ldr	r3, [r5, #4]
 8000658:	4638      	mov	r0, r7
 800065a:	4798      	blx	r3
      return 0;
 800065c:	e005      	b.n	800066a <parse+0xca>
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
 800065e:	480e      	ldr	r0, [pc, #56]	; (8000698 <parse+0xf8>)
 8000660:	4631      	mov	r1, r6
 8000662:	f000 fe4f 	bl	8001304 <printf>
  if((i==0) || (*buf==0)) {
#if 0
    printf("End of buffer reached while discarding whitespace in %s()\n",
       __FUNCTION__);
#endif
    return -1;
 8000666:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    }
  }

  printf("Command `%s' not found. Type `help' for online help\n",p);
  return -1;
}
 800066a:	4620      	mov	r0, r4
 800066c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000670:	0800730b 	.word	0x0800730b
 8000674:	0800732c 	.word	0x0800732c
 8000678:	200001fc 	.word	0x200001fc
 800067c:	0800733c 	.word	0x0800733c
 8000680:	0800735f 	.word	0x0800735f
 8000684:	08007366 	.word	0x08007366
 8000688:	08007305 	.word	0x08007305
 800068c:	08007396 	.word	0x08007396
 8000690:	0800739b 	.word	0x0800739b
 8000694:	080073a7 	.word	0x080073a7
 8000698:	080073ac 	.word	0x080073ac

0800069c <TaskInput>:
char input[BUFFER_LEN];
char input_b[BUFFER_LEN];

/* Task to handle input */
void TaskInput(void)
{
 800069c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static unsigned int saved = 0;
  static char *buf = input;
  static uint32_t printPrompt = 1;

  /* Do we have to print the prompt? */
  if(printPrompt) {
 800069e:	4d3f      	ldr	r5, [pc, #252]	; (800079c <TaskInput+0x100>)
 80006a0:	682b      	ldr	r3, [r5, #0]
 80006a2:	b123      	cbz	r3, 80006ae <TaskInput+0x12>
    printf("ARMON>");
 80006a4:	483e      	ldr	r0, [pc, #248]	; (80007a0 <TaskInput+0x104>)
 80006a6:	f000 fe2d 	bl	8001304 <printf>
    printPrompt = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	602b      	str	r3, [r5, #0]
  }

  /* Get the next character */
  rc = TerminalReadAnyNonBlock(&c);
 80006ae:	f10d 0007 	add.w	r0, sp, #7
 80006b2:	f000 fa27 	bl	8000b04 <TerminalReadAnyNonBlock>
  if(rc) {
 80006b6:	2800      	cmp	r0, #0
 80006b8:	d16e      	bne.n	8000798 <TaskInput+0xfc>
  }

  /* We have a character to process */
  /* printf("Got:'%c' %d\n",c,c); */
  /* Check for simple line control characters */
  if(((c == 010) || (c == 0x7f)) && count) {
 80006ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006be:	2b08      	cmp	r3, #8
 80006c0:	d001      	beq.n	80006c6 <TaskInput+0x2a>
 80006c2:	2b7f      	cmp	r3, #127	; 0x7f
 80006c4:	d10d      	bne.n	80006e2 <TaskInput+0x46>
 80006c6:	4c37      	ldr	r4, [pc, #220]	; (80007a4 <TaskInput+0x108>)
 80006c8:	6822      	ldr	r2, [r4, #0]
 80006ca:	b152      	cbz	r2, 80006e2 <TaskInput+0x46>
    /* User pressed backspace */
    printf("\010 \010"); /* Obliterate character */
 80006cc:	4836      	ldr	r0, [pc, #216]	; (80007a8 <TaskInput+0x10c>)
 80006ce:	f000 fe19 	bl	8001304 <printf>
    buf--;     /* Then remove it from the buffer */
 80006d2:	4b36      	ldr	r3, [pc, #216]	; (80007ac <TaskInput+0x110>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	3a01      	subs	r2, #1
 80006d8:	601a      	str	r2, [r3, #0]
    count--;   /* Then keep track of how many are left */
 80006da:	6823      	ldr	r3, [r4, #0]
 80006dc:	3b01      	subs	r3, #1
 80006de:	6023      	str	r3, [r4, #0]
 80006e0:	e05a      	b.n	8000798 <TaskInput+0xfc>
  } else if(c == '!') { /* '!' repeats the last command */
 80006e2:	2b21      	cmp	r3, #33	; 0x21
 80006e4:	d115      	bne.n	8000712 <TaskInput+0x76>
    if(saved) {  /* But only if we have something saved */
 80006e6:	4b32      	ldr	r3, [pc, #200]	; (80007b0 <TaskInput+0x114>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d054      	beq.n	8000798 <TaskInput+0xfc>
      strcpy(input,input_b);  /* Restore the command */
 80006ee:	4c31      	ldr	r4, [pc, #196]	; (80007b4 <TaskInput+0x118>)
 80006f0:	4931      	ldr	r1, [pc, #196]	; (80007b8 <TaskInput+0x11c>)
 80006f2:	4620      	mov	r0, r4
 80006f4:	f004 ffc0 	bl	8005678 <strcpy>
      printf("%s",input);
 80006f8:	4621      	mov	r1, r4
 80006fa:	4830      	ldr	r0, [pc, #192]	; (80007bc <TaskInput+0x120>)
 80006fc:	f000 fe02 	bl	8001304 <printf>
      count = strlen(input);
 8000700:	4620      	mov	r0, r4
 8000702:	f005 f817 	bl	8005734 <strlen>
 8000706:	4b27      	ldr	r3, [pc, #156]	; (80007a4 <TaskInput+0x108>)
 8000708:	6018      	str	r0, [r3, #0]
      buf = input+count;
 800070a:	4b28      	ldr	r3, [pc, #160]	; (80007ac <TaskInput+0x110>)
 800070c:	4404      	add	r4, r0
 800070e:	601c      	str	r4, [r3, #0]
      goto parseme;
 8000710:	e024      	b.n	800075c <TaskInput+0xc0>
    }
  } else if(isprint((unsigned int)c)) {
 8000712:	4a2b      	ldr	r2, [pc, #172]	; (80007c0 <TaskInput+0x124>)
 8000714:	6812      	ldr	r2, [r2, #0]
 8000716:	441a      	add	r2, r3
 8000718:	7852      	ldrb	r2, [r2, #1]
 800071a:	f012 0297 	ands.w	r2, r2, #151	; 0x97
 800071e:	d011      	beq.n	8000744 <TaskInput+0xa8>
    /* We are only going to save printable characters */
    if(count >= sizeof(input)) {
 8000720:	4a20      	ldr	r2, [pc, #128]	; (80007a4 <TaskInput+0x108>)
 8000722:	6811      	ldr	r1, [r2, #0]
 8000724:	294f      	cmp	r1, #79	; 0x4f
 8000726:	d901      	bls.n	800072c <TaskInput+0x90>
      /* We are out of space */
      printf("\x07"); /* Beep */
 8000728:	2007      	movs	r0, #7
 800072a:	e008      	b.n	800073e <TaskInput+0xa2>
      return;
    } else {
      *buf++ = c;
 800072c:	4c1f      	ldr	r4, [pc, #124]	; (80007ac <TaskInput+0x110>)
 800072e:	6820      	ldr	r0, [r4, #0]
 8000730:	7003      	strb	r3, [r0, #0]
 8000732:	1c45      	adds	r5, r0, #1
      count++;
 8000734:	3101      	adds	r1, #1
      /* Echo it back to the user */
      printf("%c",c);
 8000736:	f89d 0007 	ldrb.w	r0, [sp, #7]
    if(count >= sizeof(input)) {
      /* We are out of space */
      printf("\x07"); /* Beep */
      return;
    } else {
      *buf++ = c;
 800073a:	6025      	str	r5, [r4, #0]
      count++;
 800073c:	6011      	str	r1, [r2, #0]
      /* Echo it back to the user */
      printf("%c",c);
 800073e:	f004 fe85 	bl	800544c <putchar>
 8000742:	e029      	b.n	8000798 <TaskInput+0xfc>
    }
  } else if(c == '\r') {
 8000744:	2b0d      	cmp	r3, #13
 8000746:	d127      	bne.n	8000798 <TaskInput+0xfc>
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <TaskInput+0x110>)
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 800074a:	481b      	ldr	r0, [pc, #108]	; (80007b8 <TaskInput+0x11c>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 800074c:	681b      	ldr	r3, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 800074e:	4919      	ldr	r1, [pc, #100]	; (80007b4 <TaskInput+0x118>)
      /* Echo it back to the user */
      printf("%c",c);
    }
  } else if(c == '\r') {
    /* NULL Terminate anything we have received */
    *buf = '\0';
 8000750:	701a      	strb	r2, [r3, #0]
    /* save current buffer in case we want to re do the command */
    strcpy(input_b,input);
 8000752:	f004 ff91 	bl	8005678 <strcpy>
    saved = 1;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <TaskInput+0x114>)
 8000758:	2201      	movs	r2, #1
 800075a:	601a      	str	r2, [r3, #0]
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
 800075c:	200a      	movs	r0, #10
 800075e:	4c13      	ldr	r4, [pc, #76]	; (80007ac <TaskInput+0x110>)
 8000760:	f004 fe74 	bl	800544c <putchar>
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
 8000764:	4a0f      	ldr	r2, [pc, #60]	; (80007a4 <TaskInput+0x108>)
 8000766:	6821      	ldr	r1, [r4, #0]
 8000768:	6816      	ldr	r6, [r2, #0]
 800076a:	460b      	mov	r3, r1
 800076c:	4610      	mov	r0, r2
 800076e:	1a72      	subs	r2, r6, r1
 8000770:	441a      	add	r2, r3
 8000772:	2a4f      	cmp	r2, #79	; 0x4f
 8000774:	f04f 0200 	mov.w	r2, #0
 8000778:	d802      	bhi.n	8000780 <TaskInput+0xe4>
 800077a:	f803 2b01 	strb.w	r2, [r3], #1
 800077e:	e7f6      	b.n	800076e <TaskInput+0xd2>
 8000780:	6023      	str	r3, [r4, #0]
    count = 0;
    parse(input, sizeof(input), Commands);
 8000782:	4e0c      	ldr	r6, [pc, #48]	; (80007b4 <TaskInput+0x118>)
 8000784:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <TaskInput+0x128>)
  parseme:
    /* The user pressed enter, parse the command */
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
 8000786:	6002      	str	r2, [r0, #0]
    parse(input, sizeof(input), Commands);
 8000788:	2150      	movs	r1, #80	; 0x50
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4630      	mov	r0, r6
 800078e:	f7ff ff07 	bl	80005a0 <parse>
    buf = input;
    printPrompt = 1;
 8000792:	2301      	movs	r3, #1
    printf("\n");
    /* Fill the rest of the buffer wil NUL */
    for(i=count; i<BUFFER_LEN; i++) *buf++ = '\0';
    count = 0;
    parse(input, sizeof(input), Commands);
    buf = input;
 8000794:	6026      	str	r6, [r4, #0]
    printPrompt = 1;
 8000796:	602b      	str	r3, [r5, #0]
  }
}
 8000798:	b002      	add	sp, #8
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	2000000c 	.word	0x2000000c
 80007a0:	080073e1 	.word	0x080073e1
 80007a4:	20000a5c 	.word	0x20000a5c
 80007a8:	080073e8 	.word	0x080073e8
 80007ac:	20000008 	.word	0x20000008
 80007b0:	20000a58 	.word	0x20000a58
 80007b4:	20000eec 	.word	0x20000eec
 80007b8:	20000e9c 	.word	0x20000e9c
 80007bc:	080073ec 	.word	0x080073ec
 80007c0:	200001fc 	.word	0x200001fc
 80007c4:	20000004 	.word	0x20000004

080007c8 <fetch_uint32_arg>:
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80007c8:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80007ca:	4908      	ldr	r1, [pc, #32]	; (80007ec <fetch_uint32_arg+0x24>)
  return 0;
}     

/* Fetch an integer argument */
int fetch_uint32_arg(uint32_t *dest)
{
 80007cc:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 80007ce:	2000      	movs	r0, #0
 80007d0:	f004 ffe0 	bl	8005794 <strtok>
  if(p == NULL) {
 80007d4:	b130      	cbz	r0, 80007e4 <fetch_uint32_arg+0x1c>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
 80007d6:	2100      	movs	r1, #0
 80007d8:	460a      	mov	r2, r1
 80007da:	f005 f8b3 	bl	8005944 <strtoul>
 80007de:	6020      	str	r0, [r4, #0]
  return 0;
 80007e0:	2000      	movs	r0, #0
 80007e2:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = (uint32_t)strtoul(p,NULL,0);
  return 0;
}     
 80007e8:	bd10      	pop	{r4, pc}
 80007ea:	bf00      	nop
 80007ec:	0800735f 	.word	0x0800735f

080007f0 <fetch_string_arg>:

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80007f0:	b510      	push	{r4, lr}
  char *p;
  p = strtok(NULL,SEPS);
 80007f2:	4906      	ldr	r1, [pc, #24]	; (800080c <fetch_string_arg+0x1c>)
  return 0;
}     

/* Fetch a string argument */
int fetch_string_arg(char **dest)
{
 80007f4:	4604      	mov	r4, r0
  char *p;
  p = strtok(NULL,SEPS);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f004 ffcc 	bl	8005794 <strtok>
  if(p == NULL) {
 80007fc:	b110      	cbz	r0, 8000804 <fetch_string_arg+0x14>
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
  }
  
  *dest = p;
 80007fe:	6020      	str	r0, [r4, #0]
  return 0;
 8000800:	2000      	movs	r0, #0
 8000802:	bd10      	pop	{r4, pc}
{
  char *p;
  p = strtok(NULL,SEPS);
  if(p == NULL) {
    /* If we don't get any more tokens it's not an error, just the EOL */
    return -1;
 8000804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  }
  
  *dest = p;
  return 0;
}
 8000808:	bd10      	pop	{r4, pc}
 800080a:	bf00      	nop
 800080c:	0800735f 	.word	0x0800735f

08000810 <DumpBuffer>:

#define BYTES_PER_LINE 16

/* Dump a buffer in HEX with the address as given */
void DumpBuffer(uint8_t *buffer, uint32_t count, uint32_t address)
{
 8000810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000814:	4683      	mov	fp, r0
 8000816:	b087      	sub	sp, #28
 8000818:	4692      	mov	sl, r2
  uint32_t i;
  uint8_t buf[BYTES_PER_LINE+1],*bufp;   /* Buffer to assemble printed chars */
  uint8_t *p,c;

  if(count == 0) return;
 800081a:	4689      	mov	r9, r1
 800081c:	2900      	cmp	r1, #0
 800081e:	d03b      	beq.n	8000898 <DumpBuffer+0x88>
 8000820:	ac01      	add	r4, sp, #4
 8000822:	2500      	movs	r5, #0
 8000824:	4627      	mov	r7, r4

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 8000826:	454d      	cmp	r5, r9
 8000828:	eb05 010a 	add.w	r1, r5, sl
 800082c:	f005 060f 	and.w	r6, r5, #15
 8000830:	d021      	beq.n	8000876 <DumpBuffer+0x66>
    if((i% BYTES_PER_LINE) == 0) {
 8000832:	b91e      	cbnz	r6, 800083c <DumpBuffer+0x2c>
      printf("%08x:",(unsigned int)address);
 8000834:	481a      	ldr	r0, [pc, #104]	; (80008a0 <DumpBuffer+0x90>)
 8000836:	f000 fd65 	bl	8001304 <printf>
      bufp = buf;
 800083a:	463c      	mov	r4, r7
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 800083c:	4b19      	ldr	r3, [pc, #100]	; (80008a4 <DumpBuffer+0x94>)
    if((i% BYTES_PER_LINE) == 0) {
      printf("%08x:",(unsigned int)address);
      bufp = buf;
    }
    /* Read the value to print */
    c = *p++;
 800083e:	f81b 1005 	ldrb.w	r1, [fp, r5]
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8000842:	681b      	ldr	r3, [r3, #0]
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 8000844:	4818      	ldr	r0, [pc, #96]	; (80008a8 <DumpBuffer+0x98>)
    /* Read the value to print */
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
 8000846:	440b      	add	r3, r1
 8000848:	f104 0801 	add.w	r8, r4, #1
 800084c:	785b      	ldrb	r3, [r3, #1]
 800084e:	f013 0f97 	tst.w	r3, #151	; 0x97
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8000852:	bf0a      	itet	eq
 8000854:	232e      	moveq	r3, #46	; 0x2e
    c = *p++;
    address++;

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
 8000856:	7021      	strbne	r1, [r4, #0]
    } else {
      *bufp++ = '.';
 8000858:	7023      	strbeq	r3, [r4, #0]
    }

    printf(" %02x",((unsigned int)c) & 0xff);
 800085a:	f000 fd53 	bl	8001304 <printf>
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 800085e:	2e0f      	cmp	r6, #15

    /* Stash the appropriate chacter to print at EOL */
    if(isprint(c)) {
      *bufp++ = c; /* Stick in the character */
    } else {
      *bufp++ = '.';
 8000860:	4644      	mov	r4, r8
    }

    printf(" %02x",((unsigned int)c) & 0xff);
    
    /* At end of line ? */
    if((i % BYTES_PER_LINE) == (BYTES_PER_LINE-1)) {
 8000862:	d106      	bne.n	8000872 <DumpBuffer+0x62>
      *bufp = '\0';  /* NULL terminate buffer */
 8000864:	2300      	movs	r3, #0
 8000866:	f888 3000 	strb.w	r3, [r8]

      /* Yes, print buffer */
      printf("  %s\n",buf);
 800086a:	4810      	ldr	r0, [pc, #64]	; (80008ac <DumpBuffer+0x9c>)
 800086c:	4639      	mov	r1, r7
 800086e:	f000 fd49 	bl	8001304 <printf>
  if(count == 0) return;

  p = buffer;
  bufp = buf;
  /* dump the requested number of bytes in hex. */
  for(i=0; i<count; i++) {
 8000872:	3501      	adds	r5, #1
 8000874:	e7d7      	b.n	8000826 <DumpBuffer+0x16>
    }

  }

  /* dump out to EOL */
  *bufp='\0';
 8000876:	2300      	movs	r3, #0
 8000878:	7023      	strb	r3, [r4, #0]
  if(count % BYTES_PER_LINE) {
 800087a:	b16e      	cbz	r6, 8000898 <DumpBuffer+0x88>
 800087c:	461c      	mov	r4, r3
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800087e:	f1c6 0310 	rsb	r3, r6, #16
 8000882:	429c      	cmp	r4, r3
 8000884:	d204      	bcs.n	8000890 <DumpBuffer+0x80>
      printf("   ");
 8000886:	480a      	ldr	r0, [pc, #40]	; (80008b0 <DumpBuffer+0xa0>)
 8000888:	f000 fd3c 	bl	8001304 <printf>
  }

  /* dump out to EOL */
  *bufp='\0';
  if(count % BYTES_PER_LINE) {
    for(i=0; i<(BYTES_PER_LINE - (count % BYTES_PER_LINE)); i++) {
 800088c:	3401      	adds	r4, #1
 800088e:	e7f6      	b.n	800087e <DumpBuffer+0x6e>
      printf("   ");
    }
    /* Yes, print buffer */
    printf("  %s\n",buf);
 8000890:	4806      	ldr	r0, [pc, #24]	; (80008ac <DumpBuffer+0x9c>)
 8000892:	4639      	mov	r1, r7
 8000894:	f000 fd36 	bl	8001304 <printf>
  }



}
 8000898:	b007      	add	sp, #28
 800089a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800089e:	bf00      	nop
 80008a0:	080073ef 	.word	0x080073ef
 80008a4:	200001fc 	.word	0x200001fc
 80008a8:	080073f5 	.word	0x080073f5
 80008ac:	080073fb 	.word	0x080073fb
 80008b0:	08007401 	.word	0x08007401

080008b4 <CmdDump>:
void CmdDump(int action)
{
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 80008b4:	2801      	cmp	r0, #1


}

void CmdDump(int action)
{
 80008b6:	b538      	push	{r3, r4, r5, lr}
  int rc;
  static uint32_t address=0, count=0x100;

  if(action==CMD_SHORT_HELP) return;
 80008b8:	d01d      	beq.n	80008f6 <CmdDump+0x42>
  if(action==CMD_LONG_HELP) {
 80008ba:	2802      	cmp	r0, #2
 80008bc:	4c0e      	ldr	r4, [pc, #56]	; (80008f8 <CmdDump+0x44>)
 80008be:	4d0f      	ldr	r5, [pc, #60]	; (80008fc <CmdDump+0x48>)
 80008c0:	d109      	bne.n	80008d6 <CmdDump+0x22>
    printf("dump {<address> {<count>}}\n\n"
 80008c2:	480f      	ldr	r0, [pc, #60]	; (8000900 <CmdDump+0x4c>)
 80008c4:	f004 fdfe 	bl	80054c4 <puts>
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80008c8:	6821      	ldr	r1, [r4, #0]
 80008ca:	682a      	ldr	r2, [r5, #0]
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <CmdDump+0x50>)
  }

  DumpBuffer((uint8_t *)address, count, address);
  /* Update parameters for next time */
  address = address+count;
}
 80008ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	   "\n"
	   "<count> is the number of bytes to dump to the terminal.\n"
	   "If the count is unspecified uses last count. The default\n"
	   "count is 0x100 bytes.\n\n");

    printf("Current address is 0x%08x, current count is 0x%x\n",
 80008d2:	f000 bd17 	b.w	8001304 <printf>
	   (unsigned int)address, (unsigned int)count);
    return;
  }

  /* Fetch address, defaut to last address if missing */
  rc = fetch_uint32_arg(&address);
 80008d6:	4620      	mov	r0, r4
 80008d8:	f7ff ff76 	bl	80007c8 <fetch_uint32_arg>
  if(rc == 0) {
 80008dc:	b910      	cbnz	r0, 80008e4 <CmdDump+0x30>
    /* Fetch count, default to last count if missing */
    fetch_uint32_arg(&count);
 80008de:	4628      	mov	r0, r5
 80008e0:	f7ff ff72 	bl	80007c8 <fetch_uint32_arg>
  }

  DumpBuffer((uint8_t *)address, count, address);
 80008e4:	6820      	ldr	r0, [r4, #0]
 80008e6:	6829      	ldr	r1, [r5, #0]
 80008e8:	4602      	mov	r2, r0
 80008ea:	f7ff ff91 	bl	8000810 <DumpBuffer>
  /* Update parameters for next time */
  address = address+count;
 80008ee:	6823      	ldr	r3, [r4, #0]
 80008f0:	682a      	ldr	r2, [r5, #0]
 80008f2:	4413      	add	r3, r2
 80008f4:	6023      	str	r3, [r4, #0]
 80008f6:	bd38      	pop	{r3, r4, r5, pc}
 80008f8:	20000a60 	.word	0x20000a60
 80008fc:	20000010 	.word	0x20000010
 8000900:	08007405 	.word	0x08007405
 8000904:	0800759d 	.word	0x0800759d

08000908 <_sbrk_r>:
#include <reent.h>

register char *stack_ptr asm("sp");

void *_sbrk_r(struct _reent *ptr, int incr)
{
 8000908:	b508      	push	{r3, lr}
        extern char end asm("end");
        static char *heap_end;
        char *prev_heap_end;

        if (heap_end == 0)
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <_sbrk_r+0x2c>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	b90a      	cbnz	r2, 8000914 <_sbrk_r+0xc>
                heap_end = &end;
 8000910:	4a09      	ldr	r2, [pc, #36]	; (8000938 <_sbrk_r+0x30>)
 8000912:	601a      	str	r2, [r3, #0]

        prev_heap_end = heap_end;
 8000914:	6818      	ldr	r0, [r3, #0]
        if (heap_end + incr > stack_ptr)
 8000916:	466b      	mov	r3, sp
 8000918:	4401      	add	r1, r0
 800091a:	4299      	cmp	r1, r3
 800091c:	d906      	bls.n	800092c <_sbrk_r+0x24>
        {
//              write(1, "Heap and stack collision\n", 25);
//              abort();
                errno = ENOMEM;
 800091e:	f004 fcfd 	bl	800531c <__errno>
 8000922:	230c      	movs	r3, #12
 8000924:	6003      	str	r3, [r0, #0]
                return (caddr_t) -1;
 8000926:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800092a:	bd08      	pop	{r3, pc}
        }

        heap_end += incr;
 800092c:	4b01      	ldr	r3, [pc, #4]	; (8000934 <_sbrk_r+0x2c>)
 800092e:	6019      	str	r1, [r3, #0]

        return (caddr_t) prev_heap_end;
}
 8000930:	bd08      	pop	{r3, pc}
 8000932:	bf00      	nop
 8000934:	20000a64 	.word	0x20000a64
 8000938:	200070f8 	.word	0x200070f8

0800093c <_close_r>:

int _close_r(struct _reent *ptr, int file)
{
        return -1;
}
 800093c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000940:	4770      	bx	lr

08000942 <_fstat_r>:

int _fstat_r(struct _reent *ptr, int file, struct stat *st)
{
        st->st_mode = S_IFCHR;
 8000942:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000946:	6053      	str	r3, [r2, #4]
        return 0;
}
 8000948:	2000      	movs	r0, #0
 800094a:	4770      	bx	lr

0800094c <_isatty_r>:
int _isatty_r(struct _reent *ptr, int file)
{
        return 1;
}
 800094c:	2001      	movs	r0, #1
 800094e:	4770      	bx	lr

08000950 <_lseek_r>:
_off_t _lseek_r(struct _reent *ptr, int i, off_t j, int p)
{
        return 0;
}
 8000950:	2000      	movs	r0, #0
 8000952:	4770      	bx	lr

08000954 <USBD_CDC_DataIn>:
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8000954:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <USBD_CDC_DataIn+0x74>)
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8000956:	b570      	push	{r4, r5, r6, lr}
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8000958:	681b      	ldr	r3, [r3, #0]
#endif

#ifdef USE_USB
/* USB IN endpoint Transmission complete Callback */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800095a:	4604      	mov	r4, r0
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 800095c:	4798      	blx	r3

  if(pdev == &hUSBDDevice) {
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <USBD_CDC_DataIn+0x78>)
 8000960:	429c      	cmp	r4, r3
{
  uint8_t rc;
  uint32_t index=INDEX_USB, tail, count;

  /* Call the original function */
  rc = (*USBDDataIn)(pdev,epnum);
 8000962:	4606      	mov	r6, r0

  if(pdev == &hUSBDDevice) {
 8000964:	d12e      	bne.n	80009c4 <USBD_CDC_DataIn+0x70>
    /* Update head and tail pointers, we just sent outSending bytes */
    tail = TerminalState[index].outTail;
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <USBD_CDC_DataIn+0x7c>)
 8000968:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outSending;
 800096c:	f8b3 210c 	ldrh.w	r2, [r3, #268]	; 0x10c
 8000970:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
 8000972:	fa12 f181 	uxtah	r1, r2, r1
 8000976:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800097a:	f8a3 1108 	strh.w	r1, [r3, #264]	; 0x108
    TerminalState[index].outCount -= count;
 800097e:	f8b3 110a 	ldrh.w	r1, [r3, #266]	; 0x10a
 8000982:	b289      	uxth	r1, r1
 8000984:	1a8a      	subs	r2, r1, r2
 8000986:	b292      	uxth	r2, r2
 8000988:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
    TerminalState[index].outSending = 0;
 800098c:	2200      	movs	r2, #0
 800098e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 8000992:	f8b3 1108 	ldrh.w	r1, [r3, #264]	; 0x108
    count = TerminalState[index].outCount;
 8000996:	f8b3 210a 	ldrh.w	r2, [r3, #266]	; 0x10a
 800099a:	b292      	uxth	r2, r2
    TerminalState[index].outTail = TERMINALINCRBY(tail,count);
    TerminalState[index].outCount -= count;
    TerminalState[index].outSending = 0;

    /* Re - Trigger output from this buffer */
    tail = TerminalState[index].outTail;
 800099c:	b289      	uxth	r1, r1
 800099e:	461c      	mov	r4, r3
    count = TerminalState[index].outCount;
    if(count != 0) {
 80009a0:	b182      	cbz	r2, 80009c4 <USBD_CDC_DataIn+0x70>
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
 80009a2:	1853      	adds	r3, r2, r1
 80009a4:	2b7f      	cmp	r3, #127	; 0x7f
	count = TERMINALBUFFERSIZE - tail;
 80009a6:	bf88      	it	hi
 80009a8:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80009ac:	b295      	uxth	r5, r2
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 80009ae:	4421      	add	r1, r4
    if(count != 0) {
      /* Only allow a transfer to the end of the buffer */
      if((count + tail) >= TERMINALBUFFERSIZE) {
	count = TERMINALBUFFERSIZE - tail;
      }
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 80009b0:	3186      	adds	r1, #134	; 0x86
 80009b2:	462a      	mov	r2, r5
 80009b4:	4805      	ldr	r0, [pc, #20]	; (80009cc <USBD_CDC_DataIn+0x78>)
 80009b6:	f003 fd92 	bl	80044de <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      USBD_CDC_TransmitPacket(&hUSBDDevice);
 80009ba:	4804      	ldr	r0, [pc, #16]	; (80009cc <USBD_CDC_DataIn+0x78>)
 80009bc:	f003 fd9d 	bl	80044fa <USBD_CDC_TransmitPacket>
      TerminalState[index].outSending = count;
 80009c0:	f8a4 510c 	strh.w	r5, [r4, #268]	; 0x10c
    }
  }
    
  return rc;
}
 80009c4:	4630      	mov	r0, r6
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	20001160 	.word	0x20001160
 80009cc:	20000f3c 	.word	0x20000f3c
 80009d0:	20000a68 	.word	0x20000a68

080009d4 <CmdStats>:

#endif

/* Dump the terminal statistics */
void CmdStats(int mode)
{
 80009d4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  uint32_t i;
  TerminalStats_t s[INDEX_MAX];

  if(mode != CMD_INTERACTIVE) return;
 80009d8:	b9e0      	cbnz	r0, 8000a14 <CmdStats+0x40>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009da:	b672      	cpsid	i

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 80009dc:	480f      	ldr	r0, [pc, #60]	; (8000a1c <CmdStats+0x48>)
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80009de:	2100      	movs	r1, #0
  if(mode != CMD_INTERACTIVE) return;

  /* Copy terminal stats to local storage, and reset counters atomincally */
  __disable_irq();
  for(i=0; i<INDEX_MAX; i++) {
    s[i] = TerminalState[i].stats;
 80009e0:	f8d0 5110 	ldr.w	r5, [r0, #272]	; 0x110
 80009e4:	f8d0 4114 	ldr.w	r4, [r0, #276]	; 0x114
 80009e8:	f8d0 8118 	ldr.w	r8, [r0, #280]	; 0x118
 80009ec:	f8d0 711c 	ldr.w	r7, [r0, #284]	; 0x11c
 80009f0:	f8d0 6120 	ldr.w	r6, [r0, #288]	; 0x120
    bzero(&TerminalState[i].stats, sizeof(TerminalState[i].stats));
 80009f4:	2214      	movs	r2, #20
 80009f6:	f500 7088 	add.w	r0, r0, #272	; 0x110
 80009fa:	f004 fcdd 	bl	80053b8 <memset>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80009fe:	b662      	cpsie	i
  }
  __enable_irq();

  /* Display stats for the user */
  for(i=0; i<INDEX_MAX; i++) {
    printf("Terminal #%u:\n"
 8000a00:	4807      	ldr	r0, [pc, #28]	; (8000a20 <CmdStats+0x4c>)
 8000a02:	f8cd 8000 	str.w	r8, [sp]
 8000a06:	9701      	str	r7, [sp, #4]
 8000a08:	9602      	str	r6, [sp, #8]
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	462a      	mov	r2, r5
 8000a0e:	4623      	mov	r3, r4
 8000a10:	f000 fc78 	bl	8001304 <printf>
	   (unsigned int)(s[i].written),
	   (unsigned int)(s[i].receiveTooBig),
	   (unsigned int)(s[i].received));
  }

}
 8000a14:	b004      	add	sp, #16
 8000a16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000a68 	.word	0x20000a68
 8000a20:	080075eb 	.word	0x080075eb

08000a24 <TerminalInit>:
/* Private functions */
uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len);
uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len);

void TerminalInit(void)
{
 8000a24:	b510      	push	{r4, lr}
#ifdef USE_UART
  GPIO_InitTypeDef  GPIO_InitStruct;
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
 8000a26:	4c17      	ldr	r4, [pc, #92]	; (8000a84 <TerminalInit+0x60>)
 8000a28:	6823      	ldr	r3, [r4, #0]
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	6858      	ldr	r0, [r3, #4]
 8000a2e:	2202      	movs	r2, #2
 8000a30:	460b      	mov	r3, r1
 8000a32:	f004 fd73 	bl	800551c <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8000a36:	6823      	ldr	r3, [r4, #0]
 8000a38:	2100      	movs	r1, #0
 8000a3a:	6898      	ldr	r0, [r3, #8]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	460b      	mov	r3, r1
 8000a40:	f004 fd6c 	bl	800551c <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8000a44:	6823      	ldr	r3, [r4, #0]
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8000a46:	4c10      	ldr	r4, [pc, #64]	; (8000a88 <TerminalInit+0x64>)
#endif

  /* Set all stream I/O to non-buffered */
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);
 8000a48:	68d8      	ldr	r0, [r3, #12]
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	460b      	mov	r3, r1
 8000a4e:	2202      	movs	r2, #2
 8000a50:	f004 fd64 	bl	800551c <setvbuf>
#endif

#ifdef USE_USB
  /* Initialize USB interface */
  /* Init Device Library */
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
 8000a54:	4620      	mov	r0, r4
 8000a56:	490d      	ldr	r1, [pc, #52]	; (8000a8c <TerminalInit+0x68>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	f003 f95b 	bl	8003d14 <USBD_Init>
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
 8000a5e:	490c      	ldr	r1, [pc, #48]	; (8000a90 <TerminalInit+0x6c>)
 8000a60:	4a0c      	ldr	r2, [pc, #48]	; (8000a94 <TerminalInit+0x70>)
 8000a62:	694b      	ldr	r3, [r1, #20]
 8000a64:	6013      	str	r3, [r2, #0]
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <TerminalInit+0x74>)
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8000a68:	4620      	mov	r0, r4
  USBD_Init(&hUSBDDevice, &VCP_Desc, 0);
  
  /* Add Supported Class */
  /* Save, and replace DataIn callback with our own...*/
  USBDDataIn = USBD_CDC.DataIn;
  USBD_CDC.DataIn = USBD_CDC_DataIn;
 8000a6a:	614b      	str	r3, [r1, #20]
  USBD_RegisterClass(&hUSBDDevice, &USBD_CDC);
 8000a6c:	f003 f967 	bl	8003d3e <USBD_RegisterClass>
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
 8000a70:	4620      	mov	r0, r4
 8000a72:	490a      	ldr	r1, [pc, #40]	; (8000a9c <TerminalInit+0x78>)
 8000a74:	f003 fd2c 	bl	80044d0 <USBD_CDC_RegisterInterface>
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000a78:	4620      	mov	r0, r4
#endif

}
 8000a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Add CDC Interface Class */
  USBD_CDC_RegisterInterface(&hUSBDDevice, &USBD_CDC_fops);
  
  /* Start Device Process */
  USBD_Start(&hUSBDDevice);
 8000a7e:	f003 b965 	b.w	8003d4c <USBD_Start>
 8000a82:	bf00      	nop
 8000a84:	20000628 	.word	0x20000628
 8000a88:	20000f3c 	.word	0x20000f3c
 8000a8c:	20000128 	.word	0x20000128
 8000a90:	2000005c 	.word	0x2000005c
 8000a94:	20001160 	.word	0x20001160
 8000a98:	08000955 	.word	0x08000955
 8000a9c:	20000168 	.word	0x20000168

08000aa0 <TerminalRead>:

/* Attempt to read a block of data from the Terminal buffer
 * return the actual number of bytes read.
 */
uint32_t TerminalRead(uint32_t index, uint8_t *ptr, uint32_t len)
{
 8000aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa2:	b672      	cpsid	i
  uint32_t count, tail;
  /* try to read len characters from the input buffer */

  /* Crticial section begin */
  __disable_irq();
  count = 0;
 8000aa4:	2300      	movs	r3, #0
  while(TerminalState[index].inCount && (count < len)) {
 8000aa6:	4d0f      	ldr	r5, [pc, #60]	; (8000ae4 <TerminalRead+0x44>)
 8000aa8:	f44f 7692 	mov.w	r6, #292	; 0x124
 8000aac:	4346      	muls	r6, r0
 8000aae:	19ac      	adds	r4, r5, r6
 8000ab0:	3480      	adds	r4, #128	; 0x80
 8000ab2:	88a7      	ldrh	r7, [r4, #4]
 8000ab4:	b2bf      	uxth	r7, r7
 8000ab6:	b18f      	cbz	r7, 8000adc <TerminalRead+0x3c>
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d00f      	beq.n	8000adc <TerminalRead+0x3c>
    tail   = TerminalState[index].inTail;
 8000abc:	8867      	ldrh	r7, [r4, #2]
 8000abe:	b2bf      	uxth	r7, r7
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000ac0:	443e      	add	r6, r7
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000ac2:	3701      	adds	r7, #1
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000ac4:	5dad      	ldrb	r5, [r5, r6]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000ac6:	f007 077f 	and.w	r7, r7, #127	; 0x7f
  /* Crticial section begin */
  __disable_irq();
  count = 0;
  while(TerminalState[index].inCount && (count < len)) {
    tail   = TerminalState[index].inTail;
    *ptr++ = TerminalState[index].inBuffer[tail];
 8000aca:	54cd      	strb	r5, [r1, r3]
    TerminalState[index].inTail = TERMINALINCR(tail);
 8000acc:	8067      	strh	r7, [r4, #2]
    TerminalState[index].inCount--;
 8000ace:	88a5      	ldrh	r5, [r4, #4]
 8000ad0:	b2ad      	uxth	r5, r5
 8000ad2:	3d01      	subs	r5, #1
 8000ad4:	b2ad      	uxth	r5, r5
 8000ad6:	80a5      	strh	r5, [r4, #4]
    count++;
 8000ad8:	3301      	adds	r3, #1
 8000ada:	e7e4      	b.n	8000aa6 <TerminalRead+0x6>
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000adc:	b662      	cpsie	i
  /* Critical section end */
  __enable_irq();

  return count;

}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	20000a68 	.word	0x20000a68

08000ae8 <_read_r>:
}

int _read_r( void *r, int fd, char *ptr, int len )
{
  uint32_t count;
  count = TerminalRead(0, (uint8_t *)ptr, len);
 8000ae8:	4611      	mov	r1, r2
 8000aea:	2000      	movs	r0, #0
 8000aec:	461a      	mov	r2, r3
 8000aee:	f7ff bfd7 	b.w	8000aa0 <TerminalRead>

08000af2 <TerminalReadNonBlock>:

/* Attempt to read a single character from the Terminal buffer(s), return 1
 * if none are available. Return 0 if there is a character available.
 */
int TerminalReadNonBlock(uint32_t index, char *c)
{
 8000af2:	b508      	push	{r3, lr}
  /* Check for a character to be ready */
  if(TerminalRead(index,(uint8_t*)c,1) == 0) {
 8000af4:	2201      	movs	r2, #1
 8000af6:	f7ff ffd3 	bl	8000aa0 <TerminalRead>
    /* Nope, just return */
    return 1;
  }
  return 0;
}
 8000afa:	f1d0 0001 	rsbs	r0, r0, #1
 8000afe:	bf38      	it	cc
 8000b00:	2000      	movcc	r0, #0
 8000b02:	bd08      	pop	{r3, pc}

08000b04 <TerminalReadAnyNonBlock>:

/* Scan through all possible terminal input buffers and return if
 * there is a character available.
 */
int TerminalReadAnyNonBlock(char *c)
{
 8000b04:	4601      	mov	r1, r0
 8000b06:	b508      	push	{r3, lr}
  uint32_t i;
  int rc;

  for(i=0; i<INDEX_MAX; i++) {
    rc = TerminalReadNonBlock(i, c);
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fff2 	bl	8000af2 <TerminalReadNonBlock>
    if(rc==0) {
      return rc;
    }
  }
  return 1;
}
 8000b0e:	3000      	adds	r0, #0
 8000b10:	bf18      	it	ne
 8000b12:	2001      	movne	r0, #1
 8000b14:	bd08      	pop	{r3, pc}
	...

08000b18 <TerminalOutputBufferWrite>:

/* Write a block to the given terminal buffer, assume interrupts can
 * be disabled.
 */
 uint32_t TerminalOutputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8000b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1a:	4b39      	ldr	r3, [pc, #228]	; (8000c00 <TerminalOutputBufferWrite+0xe8>)
 8000b1c:	f44f 7492 	mov.w	r4, #292	; 0x124
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8000b20:	2a7f      	cmp	r2, #127	; 0x7f
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8000b22:	fb04 3400 	mla	r4, r4, r0, r3
#ifdef USE_USB
  uint8_t cdcRc;
#endif
  uint32_t head, tail, count;
  /* Check that our block will ever fit, if not, return fail */
  if(len >= TERMINALBUFFERSIZE) {
 8000b26:	d906      	bls.n	8000b36 <TerminalOutputBufferWrite+0x1e>
    /* Keep track of how many times this happens */
    TerminalState[index].stats.writeTooBig++;
 8000b28:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    return 1;
 8000b32:	2001      	movs	r0, #1
 8000b34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }

  if((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {
 8000b36:	f8b4 510a 	ldrh.w	r5, [r4, #266]	; 0x10a
 8000b3a:	fa12 f585 	uxtah	r5, r2, r5
 8000b3e:	2d7f      	cmp	r5, #127	; 0x7f
 8000b40:	d904      	bls.n	8000b4c <TerminalOutputBufferWrite+0x34>
    /* Keep track of how many times we block */
    TerminalState[index].stats.writeBlocked++;
 8000b42:	f8d4 5114 	ldr.w	r5, [r4, #276]	; 0x114
 8000b46:	3501      	adds	r5, #1
 8000b48:	f8c4 5114 	str.w	r5, [r4, #276]	; 0x114
  }

  /* Block until there is room in the buffer */
  while((TerminalState[index].outCount+len) >= TERMINALBUFFERSIZE) {} 
 8000b4c:	f44f 7492 	mov.w	r4, #292	; 0x124
 8000b50:	fb04 3500 	mla	r5, r4, r0, r3
 8000b54:	f505 7584 	add.w	r5, r5, #264	; 0x108
 8000b58:	886d      	ldrh	r5, [r5, #2]
 8000b5a:	fa12 f585 	uxtah	r5, r2, r5
 8000b5e:	2d7f      	cmp	r5, #127	; 0x7f
 8000b60:	d8f4      	bhi.n	8000b4c <TerminalOutputBufferWrite+0x34>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b62:	b672      	cpsid	i

  /* Critical section begin */
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
 8000b64:	fb04 3400 	mla	r4, r4, r0, r3
 8000b68:	f8d4 5118 	ldr.w	r5, [r4, #280]	; 0x118
 8000b6c:	4415      	add	r5, r2
 8000b6e:	f8c4 5118 	str.w	r5, [r4, #280]	; 0x118
 8000b72:	440a      	add	r2, r1
  while((len != 0) 
 8000b74:	4291      	cmp	r1, r2
 8000b76:	d01d      	beq.n	8000bb4 <TerminalOutputBufferWrite+0x9c>
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
 8000b78:	f44f 7592 	mov.w	r5, #292	; 0x124
 8000b7c:	fb05 3500 	mla	r5, r5, r0, r3
 8000b80:	f505 7484 	add.w	r4, r5, #264	; 0x108
 8000b84:	8866      	ldrh	r6, [r4, #2]
 8000b86:	b2b6      	uxth	r6, r6
 8000b88:	2e7f      	cmp	r6, #127	; 0x7f
 8000b8a:	d813      	bhi.n	8000bb4 <TerminalOutputBufferWrite+0x9c>
    head = TerminalState[index].outHead;
 8000b8c:	f8b5 7106 	ldrh.w	r7, [r5, #262]	; 0x106
    TerminalState[index].outBuffer[head] = *p++;
 8000b90:	f811 cb01 	ldrb.w	ip, [r1], #1
  __disable_irq();
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
 8000b94:	b2bf      	uxth	r7, r7
 8000b96:	f505 7680 	add.w	r6, r5, #256	; 0x100
    TerminalState[index].outBuffer[head] = *p++;
 8000b9a:	443d      	add	r5, r7
    TerminalState[index].outHead = TERMINALINCR(head);
 8000b9c:	3701      	adds	r7, #1
 8000b9e:	f007 077f 	and.w	r7, r7, #127	; 0x7f
  /* Copy characters into the buffer */
  TerminalState[index].stats.written += len;  /* gather statistics */
  while((len != 0) 
	&& (TerminalState[index].outCount<TERMINALBUFFERSIZE)) {
    head = TerminalState[index].outHead;
    TerminalState[index].outBuffer[head] = *p++;
 8000ba2:	f885 c086 	strb.w	ip, [r5, #134]	; 0x86
    TerminalState[index].outHead = TERMINALINCR(head);
 8000ba6:	80f7      	strh	r7, [r6, #6]
    TerminalState[index].outCount++;
 8000ba8:	8865      	ldrh	r5, [r4, #2]
 8000baa:	b2ad      	uxth	r5, r5
 8000bac:	3501      	adds	r5, #1
 8000bae:	b2ad      	uxth	r5, r5
 8000bb0:	8065      	strh	r5, [r4, #2]
 8000bb2:	e7df      	b.n	8000b74 <TerminalOutputBufferWrite+0x5c>
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8000bb4:	f44f 7292 	mov.w	r2, #292	; 0x124
 8000bb8:	fb02 3200 	mla	r2, r2, r0, r3
 8000bbc:	f8b2 1108 	ldrh.w	r1, [r2, #264]	; 0x108
  count = TerminalState[index].outCount;
 8000bc0:	f8b2 210a 	ldrh.w	r2, [r2, #266]	; 0x10a
    TerminalState[index].outCount++;
    len--;
  }
  
  /* Trigger output from this buffer */
  tail = TerminalState[index].outTail;
 8000bc4:	b289      	uxth	r1, r1
  count = TerminalState[index].outCount;
 8000bc6:	b292      	uxth	r2, r2
  /* Only allow a transfer to the end of the buffer */
  if((count + tail) >= TERMINALBUFFERSIZE) {
 8000bc8:	1854      	adds	r4, r2, r1
 8000bca:	2c7f      	cmp	r4, #127	; 0x7f
    count = TERMINALBUFFERSIZE - tail;
 8000bcc:	bf88      	it	hi
 8000bce:	f1c1 0280 	rsbhi	r2, r1, #128	; 0x80
  }
  switch(index) {
 8000bd2:	b990      	cbnz	r0, 8000bfa <TerminalOutputBufferWrite+0xe2>
    }
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
 8000bd4:	4c0b      	ldr	r4, [pc, #44]	; (8000c04 <TerminalOutputBufferWrite+0xec>)
 8000bd6:	f894 01fc 	ldrb.w	r0, [r4, #508]	; 0x1fc
 8000bda:	2803      	cmp	r0, #3
 8000bdc:	d10d      	bne.n	8000bfa <TerminalOutputBufferWrite+0xe2>
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
 8000bde:	4419      	add	r1, r3
    break;
#endif
#ifdef USE_USB
  case INDEX_USB: /* USB */
    if(hUSBDDevice.dev_state == USBD_STATE_CONFIGURED) {
      USBD_CDC_SetTxBuffer(&hUSBDDevice,
 8000be0:	b295      	uxth	r5, r2
 8000be2:	4620      	mov	r0, r4
 8000be4:	3186      	adds	r1, #134	; 0x86
 8000be6:	462a      	mov	r2, r5
 8000be8:	f003 fc79 	bl	80044de <USBD_CDC_SetTxBuffer>
			   (uint8_t*)&(TerminalState[index].outBuffer[tail]),
			   count);
      cdcRc = USBD_CDC_TransmitPacket(&hUSBDDevice);
 8000bec:	4620      	mov	r0, r4
 8000bee:	f003 fc84 	bl	80044fa <USBD_CDC_TransmitPacket>
      if(cdcRc == USBD_OK) {
 8000bf2:	b910      	cbnz	r0, 8000bfa <TerminalOutputBufferWrite+0xe2>
	/* CDC was not busy, and we are now sending */
	TerminalState[index].outSending = count;
 8000bf4:	4b02      	ldr	r3, [pc, #8]	; (8000c00 <TerminalOutputBufferWrite+0xe8>)
 8000bf6:	f8a3 510c 	strh.w	r5, [r3, #268]	; 0x10c
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000bfa:	b662      	cpsie	i
 8000bfc:	2000      	movs	r0, #0
    

  /* Critical section end */
  __enable_irq();
  return 0;
}
 8000bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c00:	20000a68 	.word	0x20000a68
 8000c04:	20000f3c 	.word	0x20000f3c

08000c08 <_write_r>:
#endif

}

int _write_r(void *reent, int fd, char *ptr, size_t len)
{
 8000c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c0a:	461d      	mov	r5, r3
 8000c0c:	4614      	mov	r4, r2
 8000c0e:	18d7      	adds	r7, r2, r3
  uint32_t count;
  /* Frob buffer to add appropriate carriage returns and newlines */
  count = len;
  while(count != 0) {
 8000c10:	42bc      	cmp	r4, r7
 8000c12:	4626      	mov	r6, r4
 8000c14:	d00f      	beq.n	8000c36 <_write_r+0x2e>
    if(*ptr == '\n') {
 8000c16:	7833      	ldrb	r3, [r6, #0]
 8000c18:	2b0a      	cmp	r3, #10
 8000c1a:	f104 0401 	add.w	r4, r4, #1
 8000c1e:	d104      	bne.n	8000c2a <_write_r+0x22>
      /* XXX handle buffer overflow */
#ifdef USE_UART
      TerminalOutputBufferWrite(INDEX_UART,"\r",1);
#endif
#ifdef USE_USB
      TerminalOutputBufferWrite(INDEX_USB,"\r",1);
 8000c20:	2000      	movs	r0, #0
 8000c22:	4906      	ldr	r1, [pc, #24]	; (8000c3c <_write_r+0x34>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	f7ff ff77 	bl	8000b18 <TerminalOutputBufferWrite>
    }
#ifdef USE_UART
    TerminalOutputBufferWrite(INDEX_UART,ptr,1);
#endif
#ifdef USE_USB
    TerminalOutputBufferWrite(INDEX_USB,ptr,1);
 8000c2a:	4631      	mov	r1, r6
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff ff72 	bl	8000b18 <TerminalOutputBufferWrite>
 8000c34:	e7ec      	b.n	8000c10 <_write_r+0x8>
    /* Transfer error in transmission process */
    Error_Handler();
  }
#endif
  return len;
}
 8000c36:	4628      	mov	r0, r5
 8000c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08007364 	.word	0x08007364

08000c40 <TerminalInputBufferWrite>:
  __enable_irq();
  return 0;
}

uint32_t TerminalInputBufferWrite(uint32_t index, char *p, uint32_t len)
{
 8000c40:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t head;

  /* Critical Section begin */
  //__disable_irq();
  /* Check that our block will fit, if not, return fail */
  if((TerminalState[index].inCount + len) >= TERMINALBUFFERSIZE) {
 8000c42:	4c1b      	ldr	r4, [pc, #108]	; (8000cb0 <TerminalInputBufferWrite+0x70>)
 8000c44:	f44f 7392 	mov.w	r3, #292	; 0x124
 8000c48:	fb03 4300 	mla	r3, r3, r0, r4
 8000c4c:	f8b3 5084 	ldrh.w	r5, [r3, #132]	; 0x84
 8000c50:	fa12 f585 	uxtah	r5, r2, r5
 8000c54:	2d7f      	cmp	r5, #127	; 0x7f
 8000c56:	d906      	bls.n	8000c66 <TerminalInputBufferWrite+0x26>
    //__enable_irq();
    TerminalState[index].stats.receiveTooBig++;
 8000c58:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 8000c5c:	3201      	adds	r2, #1
 8000c5e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    return 1;
 8000c62:	2001      	movs	r0, #1
 8000c64:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
 8000c66:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
 8000c6a:	4415      	add	r5, r2
 8000c6c:	f8c3 5120 	str.w	r5, [r3, #288]	; 0x120
 8000c70:	440a      	add	r2, r1
  while(len != 0) {
 8000c72:	4291      	cmp	r1, r2
 8000c74:	d019      	beq.n	8000caa <TerminalInputBufferWrite+0x6a>
    head = TerminalState[index].inHead;
 8000c76:	f44f 7792 	mov.w	r7, #292	; 0x124
 8000c7a:	4347      	muls	r7, r0
 8000c7c:	19e3      	adds	r3, r4, r7
    TerminalState[index].inBuffer[head] = *p++;
 8000c7e:	f811 cb01 	ldrb.w	ip, [r1], #1
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 8000c82:	f8b3 6080 	ldrh.w	r6, [r3, #128]	; 0x80
 8000c86:	b2b6      	uxth	r6, r6
    TerminalState[index].inBuffer[head] = *p++;
 8000c88:	4437      	add	r7, r6
    TerminalState[index].inHead = TERMINALINCR(head);
 8000c8a:	3601      	adds	r6, #1
 8000c8c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
    TerminalState[index].inBuffer[head] = *p++;
 8000c90:	f804 c007 	strb.w	ip, [r4, r7]
    TerminalState[index].inHead = TERMINALINCR(head);
 8000c94:	f8a3 6080 	strh.w	r6, [r3, #128]	; 0x80
    return 1;
  }
  /* Copy characters into the buffer */
  TerminalState[index].stats.received += len;
  while(len != 0) {
    head = TerminalState[index].inHead;
 8000c98:	f103 0580 	add.w	r5, r3, #128	; 0x80
    TerminalState[index].inBuffer[head] = *p++;
    TerminalState[index].inHead = TERMINALINCR(head);
    TerminalState[index].inCount++;
 8000c9c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	80ab      	strh	r3, [r5, #4]
 8000ca8:	e7e3      	b.n	8000c72 <TerminalInputBufferWrite+0x32>
    len--;
  }
  
  /* Critical section end */
  //__enable_irq();
  return 0;
 8000caa:	2000      	movs	r0, #0
}
 8000cac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000a68 	.word	0x20000a68

08000cb4 <USB_LP_CAN_RX0_IRQHandler>:
void USB_LP_CAN_RX0_IRQHandler(void)
#elif defined (USE_USB_INTERRUPT_REMAPPED)
void USB_LP_IRQHandler(void)
#endif
{
  HAL_PCD_IRQHandler(&hpcd);
 8000cb4:	4801      	ldr	r0, [pc, #4]	; (8000cbc <USB_LP_CAN_RX0_IRQHandler+0x8>)
 8000cb6:	f001 bff6 	b.w	8002ca6 <HAL_PCD_IRQHandler>
 8000cba:	bf00      	nop
 8000cbc:	200065d4 	.word	0x200065d4

08000cc0 <DecodeReadRegister>:
#include "decoder.h"


/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
 8000cc0:	b510      	push	{r4, lr}
 8000cc2:	460b      	mov	r3, r1
  uint32_t address, val;

  if(p == NULL) return 0;
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	b1b0      	cbz	r0, 8000cf6 <DecodeReadRegister+0x36>
  if(r == NULL) return 0;
 8000cc8:	b1b1      	cbz	r1, 8000cf8 <DecodeReadRegister+0x38>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000cca:	8888      	ldrh	r0, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8000ccc:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 0;
  if(r == NULL) return 0;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000cce:	6862      	ldr	r2, [r4, #4]

  /* read register according to size */
  switch(r->size) {
 8000cd0:	2910      	cmp	r1, #16
 8000cd2:	d005      	beq.n	8000ce0 <DecodeReadRegister+0x20>
 8000cd4:	2920      	cmp	r1, #32
 8000cd6:	d005      	beq.n	8000ce4 <DecodeReadRegister+0x24>
 8000cd8:	2908      	cmp	r1, #8
 8000cda:	d105      	bne.n	8000ce8 <DecodeReadRegister+0x28>
  case 8:
    val = *(uint8_t *)address;
 8000cdc:	5c80      	ldrb	r0, [r0, r2]
    break;
 8000cde:	bd10      	pop	{r4, pc}
  case 16:
    val = *(uint16_t *)address;
 8000ce0:	5a80      	ldrh	r0, [r0, r2]
    break;  
 8000ce2:	bd10      	pop	{r4, pc}
  case 32:
    val = *(uint32_t *)address;
 8000ce4:	5880      	ldr	r0, [r0, r2]
    break;
 8000ce6:	bd10      	pop	{r4, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	4804      	ldr	r0, [pc, #16]	; (8000cfc <DecodeReadRegister+0x3c>)
 8000cec:	6823      	ldr	r3, [r4, #0]
 8000cee:	f000 fb09 	bl	8001304 <printf>
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 0;
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	bd10      	pop	{r4, pc}
 8000cf6:	bd10      	pop	{r4, pc}
/* Read a specific register from memory */
uint32_t DecodeReadRegister(const Peripheral_t *p, const Register_t *r)
{
  uint32_t address, val;

  if(p == NULL) return 0;
 8000cf8:	4608      	mov	r0, r1
	   r->name,
	   p->name);
    return 0;
  }
  return val;
}
 8000cfa:	bd10      	pop	{r4, pc}
 8000cfc:	08007695 	.word	0x08007695

08000d00 <DecodeWriteRegister>:

/* Read a specific register from memory */
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
 8000d00:	b538      	push	{r3, r4, r5, lr}
 8000d02:	460b      	mov	r3, r1
  uint32_t address;

  if(p == NULL) return 1;
 8000d04:	4604      	mov	r4, r0
 8000d06:	b1a8      	cbz	r0, 8000d34 <DecodeWriteRegister+0x34>
  if(r == NULL) return 1;
 8000d08:	b1a1      	cbz	r1, 8000d34 <DecodeWriteRegister+0x34>
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000d0a:	888d      	ldrh	r5, [r1, #4]

  /* read register according to size */
  switch(r->size) {
 8000d0c:	7989      	ldrb	r1, [r1, #6]

  if(p == NULL) return 1;
  if(r == NULL) return 1;
  
  /* Calculate effective address */
  address = p->base + r->offset;
 8000d0e:	6840      	ldr	r0, [r0, #4]

  /* read register according to size */
  switch(r->size) {
 8000d10:	2910      	cmp	r1, #16
 8000d12:	d005      	beq.n	8000d20 <DecodeWriteRegister+0x20>
 8000d14:	2920      	cmp	r1, #32
 8000d16:	d005      	beq.n	8000d24 <DecodeWriteRegister+0x24>
 8000d18:	2908      	cmp	r1, #8
 8000d1a:	d106      	bne.n	8000d2a <DecodeWriteRegister+0x2a>
  case 8:
    *(uint8_t *)address = val;
 8000d1c:	542a      	strb	r2, [r5, r0]
 8000d1e:	e002      	b.n	8000d26 <DecodeWriteRegister+0x26>
    break;
  case 16:
    *(uint16_t *)address = val;
 8000d20:	522a      	strh	r2, [r5, r0]
 8000d22:	e000      	b.n	8000d26 <DecodeWriteRegister+0x26>
    break;  
  case 32:
    *(uint32_t *)address = val;
 8000d24:	502a      	str	r2, [r5, r0]
	   (unsigned int)r->size,
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
 8000d26:	2000      	movs	r0, #0
  case 16:
    *(uint16_t *)address = val;
    break;  
  case 32:
    *(uint32_t *)address = val;
    break;
 8000d28:	bd38      	pop	{r3, r4, r5, pc}
  default:
    printf("Invalid size 0x%x for register %s in periphral %s!\n",
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <DecodeWriteRegister+0x38>)
 8000d2e:	6823      	ldr	r3, [r4, #0]
 8000d30:	f000 fae8 	bl	8001304 <printf>
uint32_t DecodeWriteRegister(const Peripheral_t *p, const Register_t *r,
			     uint32_t val)
{
  uint32_t address;

  if(p == NULL) return 1;
 8000d34:	2001      	movs	r0, #1
	   r->name,
	   p->name);
    return 1;
  }
  return 0;
}
 8000d36:	bd38      	pop	{r3, r4, r5, pc}
 8000d38:	08007695 	.word	0x08007695

08000d3c <DecodeField>:

/* Decode a field */
void DecodeField(const Field_t *f, uint32_t val)
{
 8000d3c:	b530      	push	{r4, r5, lr}
 8000d3e:	b085      	sub	sp, #20
  uint32_t v;
  if(f == NULL) return;
 8000d40:	b198      	cbz	r0, 8000d6a <DecodeField+0x2e>

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8000d42:	7943      	ldrb	r3, [r0, #5]
 8000d44:	7904      	ldrb	r4, [r0, #4]
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8000d46:	4d0a      	ldr	r5, [pc, #40]	; (8000d70 <DecodeField+0x34>)
void DecodeField(const Field_t *f, uint32_t val)
{
  uint32_t v;
  if(f == NULL) return;

  v = (val >> (f->offset)) & ((1<<f->width)-1);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	409a      	lsls	r2, r3
 8000d4c:	40e1      	lsrs	r1, r4
 8000d4e:	3a01      	subs	r2, #1
 8000d50:	400a      	ands	r2, r1
  printf("  %21s : 0x%-2x (%6u) %2u %s offset: %u\n",
 8000d52:	6801      	ldr	r1, [r0, #0]
 8000d54:	4807      	ldr	r0, [pc, #28]	; (8000d74 <DecodeField+0x38>)
 8000d56:	9300      	str	r3, [sp, #0]
 8000d58:	2b01      	cmp	r3, #1
 8000d5a:	bf98      	it	ls
 8000d5c:	4628      	movls	r0, r5
 8000d5e:	9001      	str	r0, [sp, #4]
 8000d60:	9402      	str	r4, [sp, #8]
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <DecodeField+0x3c>)
 8000d64:	4613      	mov	r3, r2
 8000d66:	f000 facd 	bl	8001304 <printf>
	 (unsigned int)v,
	 (unsigned int)v,
	 (unsigned int)(f->width),
	 (f->width > 1 ) ? "bits," : "bit, ",
	 (unsigned int)(f->offset));
}
 8000d6a:	b005      	add	sp, #20
 8000d6c:	bd30      	pop	{r4, r5, pc}
 8000d6e:	bf00      	nop
 8000d70:	080076cf 	.word	0x080076cf
 8000d74:	080076c9 	.word	0x080076c9
 8000d78:	080076d5 	.word	0x080076d5

08000d7c <DecodeRegister>:

/* Decode a register */
void DecodeRegister(const Register_t *r, uint32_t base, uint32_t val,
		    uint32_t decodeFields)
{
 8000d7c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000d7e:	4615      	mov	r5, r2
 8000d80:	461e      	mov	r6, r3
  Field_t const *f;
  
  if(r == NULL) return;
 8000d82:	4604      	mov	r4, r0
 8000d84:	b1d8      	cbz	r0, 8000dbe <DecodeRegister+0x42>

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8000d86:	7983      	ldrb	r3, [r0, #6]
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	8883      	ldrh	r3, [r0, #4]
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <DecodeRegister+0x48>)
	 r->name,
	 (unsigned int)val,
	 (unsigned int)val,
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
 8000d8e:	4419      	add	r1, r3
  Field_t const *f;
  
  if(r == NULL) return;

  //  printf("\tRegister :\n");
  printf(" Register %-13s : 0x%08x (%10u) Size: %2u Address: 0x%08x\n",
 8000d90:	9101      	str	r1, [sp, #4]
 8000d92:	6821      	ldr	r1, [r4, #0]
 8000d94:	4613      	mov	r3, r2
 8000d96:	f000 fab5 	bl	8001304 <printf>
	 (unsigned int)r->size,
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
 8000d9a:	68a4      	ldr	r4, [r4, #8]
 8000d9c:	b144      	cbz	r4, 8000db0 <DecodeRegister+0x34>
 8000d9e:	b176      	cbz	r6, 8000dbe <DecodeRegister+0x42>
    for(f = r->fields; f->name != NULL; f++) {
 8000da0:	6823      	ldr	r3, [r4, #0]
 8000da2:	b133      	cbz	r3, 8000db2 <DecodeRegister+0x36>
      DecodeField(f,val);
 8000da4:	4620      	mov	r0, r4
 8000da6:	4629      	mov	r1, r5
 8000da8:	f7ff ffc8 	bl	8000d3c <DecodeField>
	 (unsigned int)(base + r->offset)
	 );

  /* Dump out fields */
  if(r->fields != NULL && decodeFields) {
    for(f = r->fields; f->name != NULL; f++) {
 8000dac:	3408      	adds	r4, #8
 8000dae:	e7f7      	b.n	8000da0 <DecodeRegister+0x24>
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
 8000db0:	b12e      	cbz	r6, 8000dbe <DecodeRegister+0x42>
    printf("\n");
 8000db2:	200a      	movs	r0, #10
  }

}
 8000db4:	b002      	add	sp, #8
 8000db6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    for(f = r->fields; f->name != NULL; f++) {
      DecodeField(f,val);
    }
  }
  if(decodeFields) {
    printf("\n");
 8000dba:	f004 bb47 	b.w	800544c <putchar>
  }

}
 8000dbe:	b002      	add	sp, #8
 8000dc0:	bd70      	pop	{r4, r5, r6, pc}
 8000dc2:	bf00      	nop
 8000dc4:	080076fe 	.word	0x080076fe

08000dc8 <DecodePeripheral>:

/* Decode a peripheral */
void DecodePeripheral(const Peripheral_t *p, uint32_t decodeFields)
{
 8000dc8:	b570      	push	{r4, r5, r6, lr}
 8000dca:	460e      	mov	r6, r1
  Register_t const *r;
  uint32_t val;

  if(p == NULL) return;
 8000dcc:	4605      	mov	r5, r0
 8000dce:	b1a8      	cbz	r0, 8000dfc <DecodePeripheral+0x34>
  
  printf("Peripheral %-13s: Base address: 0x%08x\n",
 8000dd0:	480b      	ldr	r0, [pc, #44]	; (8000e00 <DecodePeripheral+0x38>)
 8000dd2:	e895 0006 	ldmia.w	r5, {r1, r2}
 8000dd6:	f000 fa95 	bl	8001304 <printf>
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
 8000dda:	68ac      	ldr	r4, [r5, #8]
 8000ddc:	b904      	cbnz	r4, 8000de0 <DecodePeripheral+0x18>
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
    for(r = p->registers; r->name != NULL; r++) {
 8000de0:	6822      	ldr	r2, [r4, #0]
 8000de2:	b15a      	cbz	r2, 8000dfc <DecodePeripheral+0x34>
      /* Read value */
      val = DecodeReadRegister(p,r);
 8000de4:	4621      	mov	r1, r4
 8000de6:	4628      	mov	r0, r5
 8000de8:	f7ff ff6a 	bl	8000cc0 <DecodeReadRegister>
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8000dec:	6869      	ldr	r1, [r5, #4]

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
      /* Read value */
      val = DecodeReadRegister(p,r);
 8000dee:	4602      	mov	r2, r0
      /* Decode Register, but don't dump fields */
      DecodeRegister(r, p->base, val, decodeFields);
 8000df0:	4633      	mov	r3, r6
 8000df2:	4620      	mov	r0, r4
 8000df4:	f7ff ffc2 	bl	8000d7c <DecodeRegister>
  printf("Peripheral %-13s: Base address: 0x%08x\n",
	 p->name,  (unsigned int)p->base);

  /* Dump out registers */
  if(p->registers != NULL) {
    for(r = p->registers; r->name != NULL; r++) {
 8000df8:	340c      	adds	r4, #12
 8000dfa:	e7f1      	b.n	8000de0 <DecodePeripheral+0x18>
 8000dfc:	bd70      	pop	{r4, r5, r6, pc}
 8000dfe:	bf00      	nop
 8000e00:	08007739 	.word	0x08007739

08000e04 <DecodePrintPeripherals>:
  }
}

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
 8000e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e06:	4606      	mov	r6, r0
  uint32_t col;
  col = 8;
  printf("\t");
 8000e08:	2009      	movs	r0, #9
 8000e0a:	f004 fb1f 	bl	800544c <putchar>
 8000e0e:	f106 050c 	add.w	r5, r6, #12

/* Pretty print the names of all the peripherals */
void DecodePrintPeripherals(const Peripheral_t *p)
{
  uint32_t col;
  col = 8;
 8000e12:	2408      	movs	r4, #8
 8000e14:	462f      	mov	r7, r5
  printf("\t");
  for(; p->name != NULL; p++) {
 8000e16:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8000e1a:	b1a1      	cbz	r1, 8000e46 <DecodePrintPeripherals+0x42>
    col += printf("%s",p->name);
 8000e1c:	480a      	ldr	r0, [pc, #40]	; (8000e48 <DecodePrintPeripherals+0x44>)
 8000e1e:	f000 fa71 	bl	8001304 <printf>
 8000e22:	1bab      	subs	r3, r5, r6
 8000e24:	443b      	add	r3, r7
 8000e26:	4404      	add	r4, r0
    if((p+1)->name != NULL) {
 8000e28:	f853 3c0c 	ldr.w	r3, [r3, #-12]
 8000e2c:	b14b      	cbz	r3, 8000e42 <DecodePrintPeripherals+0x3e>
      col += printf(", ");
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <DecodePrintPeripherals+0x48>)
 8000e30:	f000 fa68 	bl	8001304 <printf>
 8000e34:	4404      	add	r4, r0
      if(col > 70) {
 8000e36:	2c46      	cmp	r4, #70	; 0x46
 8000e38:	d903      	bls.n	8000e42 <DecodePrintPeripherals+0x3e>
	col = 8;
	printf("\n\t");
 8000e3a:	4805      	ldr	r0, [pc, #20]	; (8000e50 <DecodePrintPeripherals+0x4c>)
 8000e3c:	f000 fa62 	bl	8001304 <printf>
  for(; p->name != NULL; p++) {
    col += printf("%s",p->name);
    if((p+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8000e40:	2408      	movs	r4, #8
 8000e42:	350c      	adds	r5, #12
 8000e44:	e7e7      	b.n	8000e16 <DecodePrintPeripherals+0x12>
	printf("\n\t");
      }
    }
  }
}
 8000e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e48:	080073ec 	.word	0x080073ec
 8000e4c:	080076d2 	.word	0x080076d2
 8000e50:	08007761 	.word	0x08007761

08000e54 <DecodePrintRegisters>:

void DecodePrintRegisters(const Register_t *r) {
 8000e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e56:	4606      	mov	r6, r0
  uint8_t col;
  col = 8;
  printf("\t");
 8000e58:	2009      	movs	r0, #9
 8000e5a:	f004 faf7 	bl	800544c <putchar>
 8000e5e:	f106 050c 	add.w	r5, r6, #12
  }
}

void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
 8000e62:	2408      	movs	r4, #8
 8000e64:	462f      	mov	r7, r5
  printf("\t");
  for(; r->name != NULL; r++) {
 8000e66:	f855 1c0c 	ldr.w	r1, [r5, #-12]
 8000e6a:	b1b1      	cbz	r1, 8000e9a <DecodePrintRegisters+0x46>
    col += printf("%s",r->name);
 8000e6c:	480b      	ldr	r0, [pc, #44]	; (8000e9c <DecodePrintRegisters+0x48>)
 8000e6e:	f000 fa49 	bl	8001304 <printf>
 8000e72:	1bab      	subs	r3, r5, r6
 8000e74:	443b      	add	r3, r7
 8000e76:	4420      	add	r0, r4
    if((r+1)->name != NULL) {
 8000e78:	f853 3c0c 	ldr.w	r3, [r3, #-12]
void DecodePrintRegisters(const Register_t *r) {
  uint8_t col;
  col = 8;
  printf("\t");
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
 8000e7c:	b2c4      	uxtb	r4, r0
    if((r+1)->name != NULL) {
 8000e7e:	b153      	cbz	r3, 8000e96 <DecodePrintRegisters+0x42>
      col += printf(", ");
 8000e80:	4807      	ldr	r0, [pc, #28]	; (8000ea0 <DecodePrintRegisters+0x4c>)
 8000e82:	f000 fa3f 	bl	8001304 <printf>
 8000e86:	4420      	add	r0, r4
 8000e88:	b2c4      	uxtb	r4, r0
      if(col > 70) {
 8000e8a:	2c46      	cmp	r4, #70	; 0x46
 8000e8c:	d903      	bls.n	8000e96 <DecodePrintRegisters+0x42>
	col = 8;
	printf("\n\t");
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <DecodePrintRegisters+0x50>)
 8000e90:	f000 fa38 	bl	8001304 <printf>
  for(; r->name != NULL; r++) {
    col += printf("%s",r->name);
    if((r+1)->name != NULL) {
      col += printf(", ");
      if(col > 70) {
	col = 8;
 8000e94:	2408      	movs	r4, #8
 8000e96:	350c      	adds	r5, #12
 8000e98:	e7e5      	b.n	8000e66 <DecodePrintRegisters+0x12>
	printf("\n\t");
      }
    }
  }
}
 8000e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e9c:	080073ec 	.word	0x080073ec
 8000ea0:	080076d2 	.word	0x080076d2
 8000ea4:	08007761 	.word	0x08007761

08000ea8 <CmdDecode>:

void CmdDecode(int mode)
{
 8000ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8000eac:	2802      	cmp	r0, #2
    }
  }
}

void CmdDecode(int mode)
{
 8000eae:	b086      	sub	sp, #24
  uint32_t val,oval,t,m;
  Peripheral_t const *p;
  Register_t const *r;
  Field_t const *f;

  if(mode == CMD_LONG_HELP) {
 8000eb0:	d120      	bne.n	8000ef4 <CmdDecode+0x4c>
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
 8000eb2:	a805      	add	r0, sp, #20
 8000eb4:	f7ff fc9c 	bl	80007f0 <fetch_string_arg>
    if(rc) {
 8000eb8:	b910      	cbnz	r0, 8000ec0 <CmdDecode+0x18>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000eba:	9e05      	ldr	r6, [sp, #20]
 8000ebc:	4c69      	ldr	r4, [pc, #420]	; (8001064 <CmdDecode+0x1bc>)
 8000ebe:	e007      	b.n	8000ed0 <CmdDecode+0x28>
  if(mode == CMD_LONG_HELP) {
    /* Try to fetch a peripheral name, then just give general help */
    rc = fetch_string_arg(&n);
    if(rc) {
      /* nothing to fetch, general help */
      printf("decode {<periph> {<reg>}|full}\n"
 8000ec0:	4869      	ldr	r0, [pc, #420]	; (8001068 <CmdDecode+0x1c0>)
 8000ec2:	f004 faff 	bl	80054c4 <puts>
	     "The forms with <val> on the end allow you to set the\n"
	     "selected register/field value\n"
	     "\n"
	     "Valid peripherals are:\n"
	     "\n");
      DecodePrintPeripherals(Peripherals);
 8000ec6:	4869      	ldr	r0, [pc, #420]	; (800106c <CmdDecode+0x1c4>)
 8000ec8:	f7ff ff9c 	bl	8000e04 <DecodePrintPeripherals>
      printf("\n\n"
 8000ecc:	4868      	ldr	r0, [pc, #416]	; (8001070 <CmdDecode+0x1c8>)
 8000ece:	e042      	b.n	8000f56 <CmdDecode+0xae>
    } else {
      /* User is requesting a list of registers for a peripheral */
      
      /* Locate the peripheral name */
      p = Peripherals;
      while((p->name != NULL) && strcasecmp(n,p->name)) {
 8000ed0:	f854 5c0c 	ldr.w	r5, [r4, #-12]
 8000ed4:	f1a4 070c 	sub.w	r7, r4, #12
 8000ed8:	b325      	cbz	r5, 8000f24 <CmdDecode+0x7c>
 8000eda:	4630      	mov	r0, r6
 8000edc:	4629      	mov	r1, r5
 8000ede:	f004 fba7 	bl	8005630 <strcasecmp>
 8000ee2:	340c      	adds	r4, #12
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d1f3      	bne.n	8000ed0 <CmdDecode+0x28>
	       "\n",
	       n);
      DecodePrintPeripherals(Peripherals);
	return;
      }
      printf("Valid registers for peripheral %s:\n"
 8000ee8:	4862      	ldr	r0, [pc, #392]	; (8001074 <CmdDecode+0x1cc>)
 8000eea:	4629      	mov	r1, r5
 8000eec:	f000 fa0a 	bl	8001304 <printf>
	     "\n",
	     p->name);
      DecodePrintRegisters(p->registers);
 8000ef0:	68b8      	ldr	r0, [r7, #8]
 8000ef2:	e025      	b.n	8000f40 <CmdDecode+0x98>
    }
    
    return;
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
 8000ef4:	a802      	add	r0, sp, #8
 8000ef6:	f7ff fc7b 	bl	80007f0 <fetch_string_arg>
  if(rc) {
 8000efa:	b910      	cbnz	r0, 8000f02 <CmdDecode+0x5a>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000efc:	9e02      	ldr	r6, [sp, #8]
 8000efe:	4c59      	ldr	r4, [pc, #356]	; (8001064 <CmdDecode+0x1bc>)
 8000f00:	e009      	b.n	8000f16 <CmdDecode+0x6e>
  }
  /* User is requesting to decode something */
  rc = fetch_string_arg(&pname);
  if(rc) {
    /* User did not specify a peripheral name */
    printf("Missing peripheral name, please chose one of:\n\n");
 8000f02:	485d      	ldr	r0, [pc, #372]	; (8001078 <CmdDecode+0x1d0>)
 8000f04:	f004 fade 	bl	80054c4 <puts>
 8000f08:	e021      	b.n	8000f4e <CmdDecode+0xa6>
    return;
  }

  /* Attempt to locate the periperhal */
  p = Peripherals;
  while((p->name != NULL) && strcasecmp(pname,p->name)) {
 8000f0a:	4630      	mov	r0, r6
 8000f0c:	f004 fb90 	bl	8005630 <strcasecmp>
 8000f10:	340c      	adds	r4, #12
 8000f12:	4607      	mov	r7, r0
 8000f14:	b310      	cbz	r0, 8000f5c <CmdDecode+0xb4>
 8000f16:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 8000f1a:	f1a4 050c 	sub.w	r5, r4, #12
 8000f1e:	2900      	cmp	r1, #0
 8000f20:	d1f3      	bne.n	8000f0a <CmdDecode+0x62>
 8000f22:	e010      	b.n	8000f46 <CmdDecode+0x9e>
	p++;
      }

      if(p->name == NULL) {
	/* No valid peripheral name found */
	printf("%s is not a valid peripheral name\n"
 8000f24:	4631      	mov	r1, r6
 8000f26:	4855      	ldr	r0, [pc, #340]	; (800107c <CmdDecode+0x1d4>)
 8000f28:	f000 f9ec 	bl	8001304 <printf>
	       "Valid peripherals are:\n"
	       "\n",
	       n);
      DecodePrintPeripherals(Peripherals);
 8000f2c:	484f      	ldr	r0, [pc, #316]	; (800106c <CmdDecode+0x1c4>)
 8000f2e:	f7ff ff69 	bl	8000e04 <DecodePrintPeripherals>
	return;
 8000f32:	e093      	b.n	800105c <CmdDecode+0x1b4>
      DecodePeripheral(p,1);
      return;
    }

    /* No valid register name found */
    printf("'%s' is not a valid register name, valid names for %s are:\n\n",
 8000f34:	4852      	ldr	r0, [pc, #328]	; (8001080 <CmdDecode+0x1d8>)
 8000f36:	682a      	ldr	r2, [r5, #0]
 8000f38:	4631      	mov	r1, r6
 8000f3a:	f000 f9e3 	bl	8001304 <printf>
	   rname, p->name);
    DecodePrintRegisters(p->registers);
 8000f3e:	68a8      	ldr	r0, [r5, #8]
	return;
      }
      printf("Valid registers for peripheral %s:\n"
	     "\n",
	     p->name);
      DecodePrintRegisters(p->registers);
 8000f40:	f7ff ff88 	bl	8000e54 <DecodePrintRegisters>
 8000f44:	e006      	b.n	8000f54 <CmdDecode+0xac>
    p++;
  }

  if(p->name == NULL) {
    /* No valid peripheral name found */
    printf("'%s' is not a valid peripheral name, valid names for are:\n\n",
 8000f46:	484f      	ldr	r0, [pc, #316]	; (8001084 <CmdDecode+0x1dc>)
 8000f48:	4631      	mov	r1, r6
 8000f4a:	f000 f9db 	bl	8001304 <printf>
	   pname);
    DecodePrintPeripherals(Peripherals);
 8000f4e:	4847      	ldr	r0, [pc, #284]	; (800106c <CmdDecode+0x1c4>)
 8000f50:	f7ff ff58 	bl	8000e04 <DecodePrintPeripherals>
    printf("\n\n");
 8000f54:	484c      	ldr	r0, [pc, #304]	; (8001088 <CmdDecode+0x1e0>)
 8000f56:	f004 fab5 	bl	80054c4 <puts>
    return;
 8000f5a:	e07f      	b.n	800105c <CmdDecode+0x1b4>
  }
  
  /* See if the user is specifying a register */
  rc = fetch_string_arg(&rname);
 8000f5c:	a803      	add	r0, sp, #12
 8000f5e:	f7ff fc47 	bl	80007f0 <fetch_string_arg>
  if(rc) {
 8000f62:	b110      	cbz	r0, 8000f6a <CmdDecode+0xc2>
    /* No register name specified, dump whole peripheral */
    DecodePeripheral(p,0);
 8000f64:	4628      	mov	r0, r5
 8000f66:	4639      	mov	r1, r7
 8000f68:	e010      	b.n	8000f8c <CmdDecode+0xe4>
    return;
  }

  /* See if we can find the register in the list. */
  r = p->registers;
 8000f6a:	68ac      	ldr	r4, [r5, #8]
  while((r->name != NULL) && strcasecmp(rname,r->name)) {
 8000f6c:	9e03      	ldr	r6, [sp, #12]
 8000f6e:	6821      	ldr	r1, [r4, #0]
 8000f70:	4630      	mov	r0, r6
 8000f72:	b121      	cbz	r1, 8000f7e <CmdDecode+0xd6>
 8000f74:	f004 fb5c 	bl	8005630 <strcasecmp>
 8000f78:	b158      	cbz	r0, 8000f92 <CmdDecode+0xea>
    r++;
 8000f7a:	340c      	adds	r4, #12
 8000f7c:	e7f7      	b.n	8000f6e <CmdDecode+0xc6>
  }

  if(r->name == NULL) {
    /* if the user says 'full' do a full decode */
    if(strcasecmp(rname,"full") == 0) {
 8000f7e:	4943      	ldr	r1, [pc, #268]	; (800108c <CmdDecode+0x1e4>)
 8000f80:	f004 fb56 	bl	8005630 <strcasecmp>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d1d5      	bne.n	8000f34 <CmdDecode+0x8c>
      DecodePeripheral(p,1);
 8000f88:	4628      	mov	r0, r5
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	f7ff ff1c 	bl	8000dc8 <DecodePeripheral>
      return;
 8000f90:	e064      	b.n	800105c <CmdDecode+0x1b4>
    printf("\n\n");
    return;
  }    

  /* Check to see if there is a field name, or integer value to program */
  rc = fetch_string_arg(&fname);
 8000f92:	a804      	add	r0, sp, #16
 8000f94:	f7ff fc2c 	bl	80007f0 <fetch_string_arg>
  if(rc == 0) {
 8000f98:	b960      	cbnz	r0, 8000fb4 <CmdDecode+0x10c>
    /* There was something... see if it matches a field name */
    f = r->fields;
 8000f9a:	68a6      	ldr	r6, [r4, #8]
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
 8000f9c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8000fa0:	6837      	ldr	r7, [r6, #0]
 8000fa2:	b19f      	cbz	r7, 8000fcc <CmdDecode+0x124>
 8000fa4:	4640      	mov	r0, r8
 8000fa6:	4639      	mov	r1, r7
 8000fa8:	f004 fb42 	bl	8005630 <strcasecmp>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d02b      	beq.n	8001008 <CmdDecode+0x160>
      f++;
 8000fb0:	3608      	adds	r6, #8
 8000fb2:	e7f5      	b.n	8000fa0 <CmdDecode+0xf8>
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8000fb4:	4621      	mov	r1, r4
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	f7ff fe82 	bl	8000cc0 <DecodeReadRegister>
  DecodeRegister(r,p->base, val,1);
 8000fbc:	6869      	ldr	r1, [r5, #4]
	   (unsigned)val);
    return;

  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
 8000fbe:	9005      	str	r0, [sp, #20]
 8000fc0:	4602      	mov	r2, r0
  DecodeRegister(r,p->base, val,1);
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	4620      	mov	r0, r4
 8000fc6:	f7ff fed9 	bl	8000d7c <DecodeRegister>
 8000fca:	e047      	b.n	800105c <CmdDecode+0x1b4>
	     (unsigned)oval, (unsigned)val);
      return;

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8000fcc:	f004 f9a6 	bl	800531c <__errno>
    val = strtoul(fname,NULL,0);
 8000fd0:	4639      	mov	r1, r7
	     (unsigned)oval, (unsigned)val);
      return;

    }
    /* No matching register name, check if this is an integer */
    errno = 0;
 8000fd2:	6007      	str	r7, [r0, #0]
    val = strtoul(fname,NULL,0);
 8000fd4:	463a      	mov	r2, r7
 8000fd6:	9804      	ldr	r0, [sp, #16]
 8000fd8:	f004 fcb4 	bl	8005944 <strtoul>
 8000fdc:	9005      	str	r0, [sp, #20]
    if(errno != 0) {
 8000fde:	f004 f99d 	bl	800531c <__errno>
 8000fe2:	6803      	ldr	r3, [r0, #0]
 8000fe4:	b123      	cbz	r3, 8000ff0 <CmdDecode+0x148>
      /* Unable to do conversion */
      printf("Invalid number '%s' entered.\n",
 8000fe6:	482a      	ldr	r0, [pc, #168]	; (8001090 <CmdDecode+0x1e8>)
 8000fe8:	9904      	ldr	r1, [sp, #16]
 8000fea:	f000 f98b 	bl	8001304 <printf>
	     fname);
      return;
 8000fee:	e035      	b.n	800105c <CmdDecode+0x1b4>
    }
    /* Write to register */
    DecodeWriteRegister(p,r,val);
 8000ff0:	4621      	mov	r1, r4
 8000ff2:	9a05      	ldr	r2, [sp, #20]
 8000ff4:	4628      	mov	r0, r5
 8000ff6:	f7ff fe83 	bl	8000d00 <DecodeWriteRegister>
    printf("%s.%s = 0x%08x\n",
 8000ffa:	6829      	ldr	r1, [r5, #0]
 8000ffc:	6822      	ldr	r2, [r4, #0]
 8000ffe:	9b05      	ldr	r3, [sp, #20]
 8001000:	4824      	ldr	r0, [pc, #144]	; (8001094 <CmdDecode+0x1ec>)
 8001002:	f000 f97f 	bl	8001304 <printf>
	   p->name, r->name,
	   (unsigned)val);
    return;
 8001006:	e029      	b.n	800105c <CmdDecode+0x1b4>
    while((f->name != NULL) && strcasecmp(fname,f->name)) {
      f++;
    }
    if(f->name != NULL) {
      /* Matched a field name, look for the value */
      rc = fetch_uint32_arg(&val);
 8001008:	a805      	add	r0, sp, #20
 800100a:	f7ff fbdd 	bl	80007c8 <fetch_uint32_arg>
      if(rc) {
 800100e:	b110      	cbz	r0, 8001016 <CmdDecode+0x16e>
	/* Unable to locate a value */
	printf("Missing Value to program into register %s\n",
 8001010:	4821      	ldr	r0, [pc, #132]	; (8001098 <CmdDecode+0x1f0>)
 8001012:	6821      	ldr	r1, [r4, #0]
 8001014:	e7e9      	b.n	8000fea <CmdDecode+0x142>
	       r->name);
	return;
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
 8001016:	4621      	mov	r1, r4
 8001018:	4628      	mov	r0, r5
 800101a:	f7ff fe51 	bl	8000cc0 <DecodeReadRegister>
      /* Create mask */
      m = (1<<f->width)-1;
 800101e:	7973      	ldrb	r3, [r6, #5]
 8001020:	2101      	movs	r1, #1
 8001022:	4099      	lsls	r1, r3

      oval = (t >> f->offset) & m; /* Save old value */
 8001024:	7933      	ldrb	r3, [r6, #4]
      }
    
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;
 8001026:	3901      	subs	r1, #1

      oval = (t >> f->offset) & m; /* Save old value */

      t &= ~(m << f->offset);
 8001028:	fa01 f203 	lsl.w	r2, r1, r3
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 800102c:	fa20 f803 	lsr.w	r8, r0, r3

      t &= ~(m << f->offset);
 8001030:	ea20 0202 	bic.w	r2, r0, r2
      t |= (val & m) << f->offset;
 8001034:	9805      	ldr	r0, [sp, #20]
      /* Update the register field */
      t = DecodeReadRegister(p,r);
      /* Create mask */
      m = (1<<f->width)-1;

      oval = (t >> f->offset) & m; /* Save old value */
 8001036:	ea08 0701 	and.w	r7, r8, r1

      t &= ~(m << f->offset);
      t |= (val & m) << f->offset;
 800103a:	4001      	ands	r1, r0
 800103c:	fa01 f303 	lsl.w	r3, r1, r3
      DecodeWriteRegister(p,r,t);
 8001040:	431a      	orrs	r2, r3
 8001042:	4621      	mov	r1, r4
 8001044:	4628      	mov	r0, r5
 8001046:	f7ff fe5b 	bl	8000d00 <DecodeWriteRegister>
      printf("%s.%s.%s (%d) -> (%d)\n",
 800104a:	9b05      	ldr	r3, [sp, #20]
 800104c:	9700      	str	r7, [sp, #0]
 800104e:	9301      	str	r3, [sp, #4]
 8001050:	4812      	ldr	r0, [pc, #72]	; (800109c <CmdDecode+0x1f4>)
 8001052:	6829      	ldr	r1, [r5, #0]
 8001054:	6822      	ldr	r2, [r4, #0]
 8001056:	6833      	ldr	r3, [r6, #0]
 8001058:	f000 f954 	bl	8001304 <printf>
  }
  /* Read and dump the register, decode all fields */
  val = DecodeReadRegister(p,r);
  DecodeRegister(r,p->base, val,1);

}
 800105c:	b006      	add	sp, #24
 800105e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001062:	bf00      	nop
 8001064:	08011acc 	.word	0x08011acc
 8001068:	08007764 	.word	0x08007764
 800106c:	08011ac0 	.word	0x08011ac0
 8001070:	08007953 	.word	0x08007953
 8001074:	08007abf 	.word	0x08007abf
 8001078:	080079a8 	.word	0x080079a8
 800107c:	08007a84 	.word	0x08007a84
 8001080:	080079d7 	.word	0x080079d7
 8001084:	08007ae4 	.word	0x08007ae4
 8001088:	08007b1e 	.word	0x08007b1e
 800108c:	08007b20 	.word	0x08007b20
 8001090:	08007a56 	.word	0x08007a56
 8001094:	08007a74 	.word	0x08007a74
 8001098:	08007a14 	.word	0x08007a14
 800109c:	08007a3f 	.word	0x08007a3f

080010a0 <printchar>:
#include "common.h"

int _write_r(void *reent, int fd, char *ptr, size_t len);

static void printchar(char **str, int c)
{
 80010a0:	b507      	push	{r0, r1, r2, lr}
  char output = c;
 80010a2:	b2cb      	uxtb	r3, r1
 80010a4:	f88d 3007 	strb.w	r3, [sp, #7]
  if (str) {
 80010a8:	4601      	mov	r1, r0
 80010aa:	b128      	cbz	r0, 80010b8 <printchar+0x18>
    **str = c;
 80010ac:	6802      	ldr	r2, [r0, #0]
 80010ae:	7013      	strb	r3, [r2, #0]
    ++(*str);
 80010b0:	6803      	ldr	r3, [r0, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	6003      	str	r3, [r0, #0]
 80010b6:	e004      	b.n	80010c2 <printchar+0x22>
  } else {
    _write_r(NULL, 0, &output, 1); 
 80010b8:	f10d 0207 	add.w	r2, sp, #7
 80010bc:	2301      	movs	r3, #1
 80010be:	f7ff fda3 	bl	8000c08 <_write_r>
  }
}
 80010c2:	b003      	add	sp, #12
 80010c4:	f85d fb04 	ldr.w	pc, [sp], #4

080010c8 <prints>:

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80010c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 80010cc:	1e14      	subs	r4, r2, #0

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
 80010ce:	4680      	mov	r8, r0
 80010d0:	4689      	mov	r9, r1
	register int pc = 0, padchar = ' ';

	if (width > 0) {
 80010d2:	dd10      	ble.n	80010f6 <prints+0x2e>
 80010d4:	2200      	movs	r2, #0
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
 80010d6:	f819 1002 	ldrb.w	r1, [r9, r2]
 80010da:	b109      	cbz	r1, 80010e0 <prints+0x18>
 80010dc:	3201      	adds	r2, #1
 80010de:	e7fa      	b.n	80010d6 <prints+0xe>
		if (len >= width) width = 0;
 80010e0:	42a2      	cmp	r2, r4
		else width -= len;
 80010e2:	bfb4      	ite	lt
 80010e4:	ebc2 0404 	rsblt	r4, r2, r4

	if (width > 0) {
		register int len = 0;
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
 80010e8:	460c      	movge	r4, r1
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 80010ea:	f013 0f02 	tst.w	r3, #2
 80010ee:	bf14      	ite	ne
 80010f0:	2730      	movne	r7, #48	; 0x30
 80010f2:	2720      	moveq	r7, #32
 80010f4:	e000      	b.n	80010f8 <prints+0x30>
 80010f6:	2720      	movs	r7, #32
		for (ptr = string; *ptr; ++ptr) ++len;
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
 80010f8:	07db      	lsls	r3, r3, #31
 80010fa:	d40c      	bmi.n	8001116 <prints+0x4e>
 80010fc:	4625      	mov	r5, r4
		for ( ; width > 0; --width) {
 80010fe:	2d00      	cmp	r5, #0
 8001100:	dd05      	ble.n	800110e <prints+0x46>
			printchar (out, padchar);
 8001102:	4640      	mov	r0, r8
 8001104:	4639      	mov	r1, r7
 8001106:	f7ff ffcb 	bl	80010a0 <printchar>
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
 800110a:	3d01      	subs	r5, #1
 800110c:	e7f7      	b.n	80010fe <prints+0x36>
 800110e:	ea24 76e4 	bic.w	r6, r4, r4, asr #31
 8001112:	1ba4      	subs	r4, r4, r6
 8001114:	e000      	b.n	8001118 <prints+0x50>
#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
	register int pc = 0, padchar = ' ';
 8001116:	2600      	movs	r6, #0
 8001118:	4635      	mov	r5, r6
 800111a:	ebc6 0309 	rsb	r3, r6, r9
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 800111e:	5d59      	ldrb	r1, [r3, r5]
 8001120:	b121      	cbz	r1, 800112c <prints+0x64>
		printchar (out, *string);
 8001122:	4640      	mov	r0, r8
 8001124:	f7ff ffbc 	bl	80010a0 <printchar>
		++pc;
 8001128:	3501      	adds	r5, #1
 800112a:	e7f6      	b.n	800111a <prints+0x52>
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
 800112c:	4626      	mov	r6, r4
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 800112e:	2e00      	cmp	r6, #0
 8001130:	dd05      	ble.n	800113e <prints+0x76>
		printchar (out, padchar);
 8001132:	4640      	mov	r0, r8
 8001134:	4639      	mov	r1, r7
 8001136:	f7ff ffb3 	bl	80010a0 <printchar>
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
 800113a:	3e01      	subs	r6, #1
 800113c:	e7f7      	b.n	800112e <prints+0x66>
		printchar (out, padchar);
		++pc;
	}

	return pc;
}
 800113e:	2c00      	cmp	r4, #0
 8001140:	bfac      	ite	ge
 8001142:	1928      	addge	r0, r5, r4
 8001144:	1c28      	addlt	r0, r5, #0
 8001146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800114a <printi>:

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
 800114a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800114e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001150:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8001154:	4681      	mov	r9, r0
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
	register unsigned int u = i;
 8001156:	460c      	mov	r4, r1

	if (i == 0) {
 8001158:	b951      	cbnz	r1, 8001170 <printi+0x26>
		print_buf[0] = '0';
 800115a:	2330      	movs	r3, #48	; 0x30
 800115c:	f88d 3004 	strb.w	r3, [sp, #4]
		print_buf[1] = '\0';
 8001160:	f88d 1005 	strb.w	r1, [sp, #5]
		return prints (out, print_buf, width, pad);
 8001164:	4632      	mov	r2, r6
 8001166:	a901      	add	r1, sp, #4
 8001168:	4643      	mov	r3, r8
 800116a:	f7ff ffad 	bl	80010c8 <prints>
 800116e:	e036      	b.n	80011de <printi+0x94>
	}

	if (sg && b == 10 && i < 0) {
 8001170:	b133      	cbz	r3, 8001180 <printi+0x36>
 8001172:	2a0a      	cmp	r2, #10
 8001174:	d104      	bne.n	8001180 <printi+0x36>
 8001176:	2900      	cmp	r1, #0
 8001178:	da02      	bge.n	8001180 <printi+0x36>
		neg = 1;
		u = -i;
 800117a:	424c      	negs	r4, r1
		print_buf[1] = '\0';
		return prints (out, print_buf, width, pad);
	}

	if (sg && b == 10 && i < 0) {
		neg = 1;
 800117c:	2701      	movs	r7, #1
 800117e:	e000      	b.n	8001182 <printi+0x38>

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 8001180:	2700      	movs	r7, #0
		neg = 1;
		u = -i;
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';
 8001182:	ad04      	add	r5, sp, #16
 8001184:	2300      	movs	r3, #0
 8001186:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800118a:	46aa      	mov	sl, r5

	while (u) {
 800118c:	b174      	cbz	r4, 80011ac <printi+0x62>
		t = u % b;
 800118e:	fbb4 f3f2 	udiv	r3, r4, r2
 8001192:	fb02 4413 	mls	r4, r2, r3, r4
		if( t >= 10 )
 8001196:	2c09      	cmp	r4, #9
 8001198:	dd03      	ble.n	80011a2 <printi+0x58>
			t += letbase - '0' - 10;
 800119a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800119c:	f1a0 013a 	sub.w	r1, r0, #58	; 0x3a
 80011a0:	440c      	add	r4, r1
		*--s = t + '0';
 80011a2:	3430      	adds	r4, #48	; 0x30
 80011a4:	f805 4d01 	strb.w	r4, [r5, #-1]!
		u /= b;
 80011a8:	461c      	mov	r4, r3
 80011aa:	e7ee      	b.n	800118a <printi+0x40>
	}

	if (neg) {
 80011ac:	b187      	cbz	r7, 80011d0 <printi+0x86>
		if( width && (pad & PAD_ZERO) ) {
 80011ae:	b14e      	cbz	r6, 80011c4 <printi+0x7a>
 80011b0:	f018 0f02 	tst.w	r8, #2
 80011b4:	d006      	beq.n	80011c4 <printi+0x7a>
			printchar (out, '-');
 80011b6:	4648      	mov	r0, r9
 80011b8:	212d      	movs	r1, #45	; 0x2d
 80011ba:	f7ff ff71 	bl	80010a0 <printchar>
			++pc;
			--width;
 80011be:	3e01      	subs	r6, #1
	}

	if (neg) {
		if( width && (pad & PAD_ZERO) ) {
			printchar (out, '-');
			++pc;
 80011c0:	2701      	movs	r7, #1
			--width;
 80011c2:	e005      	b.n	80011d0 <printi+0x86>
		}
		else {
			*--s = '-';
 80011c4:	232d      	movs	r3, #45	; 0x2d
 80011c6:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80011ca:	f805 3c01 	strb.w	r3, [r5, #-1]

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
 80011ce:	2700      	movs	r7, #0
		else {
			*--s = '-';
		}
	}

	return pc + prints (out, s, width, pad);
 80011d0:	4648      	mov	r0, r9
 80011d2:	4651      	mov	r1, sl
 80011d4:	4632      	mov	r2, r6
 80011d6:	4643      	mov	r3, r8
 80011d8:	f7ff ff76 	bl	80010c8 <prints>
 80011dc:	4438      	add	r0, r7
}
 80011de:	b004      	add	sp, #16
 80011e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080011e4 <print>:

static int print(char **out, const char *format, va_list args )
{
 80011e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e6:	b089      	sub	sp, #36	; 0x24
 80011e8:	4606      	mov	r6, r0
 80011ea:	460d      	mov	r5, r1
 80011ec:	9205      	str	r2, [sp, #20]
	register int width, pad;
	register int pc = 0;
 80011ee:	2400      	movs	r4, #0
	char scr[2];

	for (; *format != 0; ++format) {
 80011f0:	782b      	ldrb	r3, [r5, #0]
 80011f2:	b123      	cbz	r3, 80011fe <print+0x1a>
		if (*format == '%') {
 80011f4:	2b25      	cmp	r3, #37	; 0x25
 80011f6:	d179      	bne.n	80012ec <print+0x108>
			++format;
			width = pad = 0;
			if (*format == '\0') break;
 80011f8:	786b      	ldrb	r3, [r5, #1]
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 80011fa:	1c6a      	adds	r2, r5, #1
			width = pad = 0;
			if (*format == '\0') break;
 80011fc:	b92b      	cbnz	r3, 800120a <print+0x26>
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
 80011fe:	2e00      	cmp	r6, #0
 8001200:	d07b      	beq.n	80012fa <print+0x116>
 8001202:	6833      	ldr	r3, [r6, #0]
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
 8001208:	e077      	b.n	80012fa <print+0x116>
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
 800120a:	2b25      	cmp	r3, #37	; 0x25
 800120c:	d06d      	beq.n	80012ea <print+0x106>
			if (*format == '-') {
 800120e:	2b2d      	cmp	r3, #45	; 0x2d
				++format;
 8001210:	bf06      	itte	eq
 8001212:	1caa      	addeq	r2, r5, #2
				pad = PAD_RIGHT;
 8001214:	2301      	moveq	r3, #1
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
 8001216:	2300      	movne	r3, #0
 8001218:	4617      	mov	r7, r2
 800121a:	3201      	adds	r2, #1
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 800121c:	7839      	ldrb	r1, [r7, #0]
 800121e:	2930      	cmp	r1, #48	; 0x30
 8001220:	d102      	bne.n	8001228 <print+0x44>
				++format;
				pad |= PAD_ZERO;
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	e7f7      	b.n	8001218 <print+0x34>
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
 8001228:	2200      	movs	r2, #0
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
 800122a:	7839      	ldrb	r1, [r7, #0]
 800122c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
 8001230:	fa5f fc80 	uxtb.w	ip, r0
 8001234:	f1bc 0f09 	cmp.w	ip, #9
 8001238:	463d      	mov	r5, r7
 800123a:	f107 0701 	add.w	r7, r7, #1
 800123e:	d803      	bhi.n	8001248 <print+0x64>
				width *= 10;
				width += *format - '0';
 8001240:	210a      	movs	r1, #10
 8001242:	fb01 0202 	mla	r2, r1, r2, r0
 8001246:	e7f0      	b.n	800122a <print+0x46>
			}
			if( *format == 's' ) {
 8001248:	2973      	cmp	r1, #115	; 0x73
 800124a:	d109      	bne.n	8001260 <print+0x7c>
				register char *s = (char *)va_arg( args, int );
 800124c:	9905      	ldr	r1, [sp, #20]
				pc += prints (out, s?s:"(null)", width, pad);
 800124e:	4f2c      	ldr	r7, [pc, #176]	; (8001300 <print+0x11c>)
			for ( ; *format >= '0' && *format <= '9'; ++format) {
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
				register char *s = (char *)va_arg( args, int );
 8001250:	1d08      	adds	r0, r1, #4
 8001252:	6809      	ldr	r1, [r1, #0]
 8001254:	9005      	str	r0, [sp, #20]
				pc += prints (out, s?s:"(null)", width, pad);
 8001256:	2900      	cmp	r1, #0
 8001258:	bf08      	it	eq
 800125a:	4639      	moveq	r1, r7
 800125c:	4630      	mov	r0, r6
 800125e:	e041      	b.n	80012e4 <print+0x100>
				continue;
			}
			if( *format == 'd' ) {
 8001260:	2964      	cmp	r1, #100	; 0x64
 8001262:	d10e      	bne.n	8001282 <print+0x9e>
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
 8001264:	e88d 000c 	stmia.w	sp, {r2, r3}
 8001268:	9905      	ldr	r1, [sp, #20]
 800126a:	2361      	movs	r3, #97	; 0x61
 800126c:	9302      	str	r3, [sp, #8]
 800126e:	1d08      	adds	r0, r1, #4
 8001270:	6809      	ldr	r1, [r1, #0]
 8001272:	9005      	str	r0, [sp, #20]
 8001274:	220a      	movs	r2, #10
 8001276:	4630      	mov	r0, r6
 8001278:	2301      	movs	r3, #1
 800127a:	f7ff ff66 	bl	800114a <printi>
 800127e:	4404      	add	r4, r0
				continue;
 8001280:	e039      	b.n	80012f6 <print+0x112>
			}
			if( *format == 'x' ) {
 8001282:	2978      	cmp	r1, #120	; 0x78
 8001284:	d106      	bne.n	8001294 <print+0xb0>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
 8001286:	9905      	ldr	r1, [sp, #20]
 8001288:	1d08      	adds	r0, r1, #4
 800128a:	e88d 000c 	stmia.w	sp, {r2, r3}
 800128e:	9005      	str	r0, [sp, #20]
 8001290:	2361      	movs	r3, #97	; 0x61
 8001292:	e007      	b.n	80012a4 <print+0xc0>
				continue;
			}
			if( *format == 'X' ) {
 8001294:	2958      	cmp	r1, #88	; 0x58
 8001296:	d10a      	bne.n	80012ae <print+0xca>
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
 8001298:	9905      	ldr	r1, [sp, #20]
 800129a:	1d08      	adds	r0, r1, #4
 800129c:	e88d 000c 	stmia.w	sp, {r2, r3}
 80012a0:	9005      	str	r0, [sp, #20]
 80012a2:	2341      	movs	r3, #65	; 0x41
 80012a4:	9302      	str	r3, [sp, #8]
 80012a6:	4630      	mov	r0, r6
 80012a8:	6809      	ldr	r1, [r1, #0]
 80012aa:	2210      	movs	r2, #16
 80012ac:	e00b      	b.n	80012c6 <print+0xe2>
				continue;
			}
			if( *format == 'u' ) {
 80012ae:	2975      	cmp	r1, #117	; 0x75
 80012b0:	d10b      	bne.n	80012ca <print+0xe6>
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
 80012b2:	e88d 000c 	stmia.w	sp, {r2, r3}
 80012b6:	9905      	ldr	r1, [sp, #20]
 80012b8:	2361      	movs	r3, #97	; 0x61
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	1d08      	adds	r0, r1, #4
 80012be:	6809      	ldr	r1, [r1, #0]
 80012c0:	9005      	str	r0, [sp, #20]
 80012c2:	220a      	movs	r2, #10
 80012c4:	4630      	mov	r0, r6
 80012c6:	2300      	movs	r3, #0
 80012c8:	e7d7      	b.n	800127a <print+0x96>
				continue;
			}
			if( *format == 'c' ) {
 80012ca:	2963      	cmp	r1, #99	; 0x63
 80012cc:	d113      	bne.n	80012f6 <print+0x112>
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
 80012ce:	9905      	ldr	r1, [sp, #20]
 80012d0:	1d08      	adds	r0, r1, #4
 80012d2:	6809      	ldr	r1, [r1, #0]
 80012d4:	9005      	str	r0, [sp, #20]
 80012d6:	f88d 101c 	strb.w	r1, [sp, #28]
				scr[1] = '\0';
 80012da:	2100      	movs	r1, #0
 80012dc:	f88d 101d 	strb.w	r1, [sp, #29]
				pc += prints (out, scr, width, pad);
 80012e0:	4630      	mov	r0, r6
 80012e2:	a907      	add	r1, sp, #28
 80012e4:	f7ff fef0 	bl	80010c8 <prints>
 80012e8:	e7c9      	b.n	800127e <print+0x9a>
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
 80012ea:	4615      	mov	r5, r2
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
 80012ec:	4630      	mov	r0, r6
 80012ee:	7829      	ldrb	r1, [r5, #0]
 80012f0:	f7ff fed6 	bl	80010a0 <printchar>
			++pc;
 80012f4:	3401      	adds	r4, #1
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
 80012f6:	3501      	adds	r5, #1
 80012f8:	e77a      	b.n	80011f0 <print+0xc>
		}
	}
	if (out) **out = '\0';
	va_end( args );
	return pc;
}
 80012fa:	4620      	mov	r0, r4
 80012fc:	b009      	add	sp, #36	; 0x24
 80012fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001300:	080175a0 	.word	0x080175a0

08001304 <printf>:

int printf(const char *format, ...)
{
 8001304:	b40f      	push	{r0, r1, r2, r3}
 8001306:	b507      	push	{r0, r1, r2, lr}
 8001308:	aa04      	add	r2, sp, #16
        va_list args;
        
        va_start( args, format );
        return print( 0, format, args );
 800130a:	2000      	movs	r0, #0
	va_end( args );
	return pc;
}

int printf(const char *format, ...)
{
 800130c:	f852 1b04 	ldr.w	r1, [r2], #4
        va_list args;
        
        va_start( args, format );
 8001310:	9201      	str	r2, [sp, #4]
        return print( 0, format, args );
 8001312:	f7ff ff67 	bl	80011e4 <print>
}
 8001316:	b003      	add	sp, #12
 8001318:	f85d eb04 	ldr.w	lr, [sp], #4
 800131c:	b004      	add	sp, #16
 800131e:	4770      	bx	lr

08001320 <CmdTest>:
int mytest( int x );

void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
 8001320:	2801      	cmp	r0, #1
#include "common.h"

int mytest( int x );

void CmdTest(int action)
{
 8001322:	b508      	push	{r3, lr}

  if(action==CMD_SHORT_HELP) return;
 8001324:	d00f      	beq.n	8001346 <CmdTest+0x26>
  if(action==CMD_LONG_HELP) {
 8001326:	2802      	cmp	r0, #2
 8001328:	d104      	bne.n	8001334 <CmdTest+0x14>
    printf("testasm\n\n"
 800132a:	4807      	ldr	r0, [pc, #28]	; (8001348 <CmdTest+0x28>)
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
}
 800132c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void CmdTest(int action)
{

  if(action==CMD_SHORT_HELP) return;
  if(action==CMD_LONG_HELP) {
    printf("testasm\n\n"
 8001330:	f004 b8c8 	b.w	80054c4 <puts>
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 8001334:	204d      	movs	r0, #77	; 0x4d
 8001336:	f7fe ff8b 	bl	8000250 <mytest>
}
 800133a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	   "This command tests the C to assembler interface\n"
	   );

    return;
  }
  printf("ret val = %d\n", mytest( 77  ) );
 800133e:	4601      	mov	r1, r0
 8001340:	4802      	ldr	r0, [pc, #8]	; (800134c <CmdTest+0x2c>)
 8001342:	f7ff bfdf 	b.w	8001304 <printf>
 8001346:	bd08      	pop	{r3, pc}
 8001348:	080175a7 	.word	0x080175a7
 800134c:	080175e0 	.word	0x080175e0

08001350 <CmdCount>:
   }
}

// This function handles the command interface between minicom and stm32 library
void CmdCount(int mode)
{
 8001350:	b507      	push	{r0, r1, r2, lr}
   uint32_t val = 0;
 8001352:	a802      	add	r0, sp, #8
 8001354:	2300      	movs	r3, #0
 8001356:	f840 3d04 	str.w	r3, [r0, #-4]!
   int filter;
   filter = fetch_uint32_arg(&val);
 800135a:	f7ff fa35 	bl	80007c8 <fetch_uint32_arg>
   if(filter)
 800135e:	b118      	cbz	r0, 8001368 <CmdCount+0x18>
   {
     printf("pass in number of counts\n");
 8001360:	4806      	ldr	r0, [pc, #24]	; (800137c <CmdCount+0x2c>)
 8001362:	f004 f8af 	bl	80054c4 <puts>
 8001366:	e006      	b.n	8001376 <CmdCount+0x26>
     return;
   }
   
   printf("Entered value for counter is : %d \n",(int)val);
 8001368:	4805      	ldr	r0, [pc, #20]	; (8001380 <CmdCount+0x30>)
 800136a:	9901      	ldr	r1, [sp, #4]
 800136c:	f7ff ffca 	bl	8001304 <printf>
   counter = val;
 8001370:	9b01      	ldr	r3, [sp, #4]
 8001372:	4a04      	ldr	r2, [pc, #16]	; (8001384 <CmdCount+0x34>)
 8001374:	6013      	str	r3, [r2, #0]
   
}
 8001376:	b003      	add	sp, #12
 8001378:	f85d fb04 	ldr.w	pc, [sp], #4
 800137c:	08017604 	.word	0x08017604
 8001380:	0801761d 	.word	0x0801761d
 8001384:	20000b8c 	.word	0x20000b8c

08001388 <TaskCounter>:

static uint32_t counter;

// This function decrements the global counter variable
void TaskCounter(void)
{
 8001388:	b510      	push	{r4, lr}
   if (counter)
 800138a:	4c05      	ldr	r4, [pc, #20]	; (80013a0 <TaskCounter+0x18>)
 800138c:	6821      	ldr	r1, [r4, #0]
 800138e:	b129      	cbz	r1, 800139c <TaskCounter+0x14>
   {
      printf("Now counter value is: %d \n",(int)counter);
 8001390:	4804      	ldr	r0, [pc, #16]	; (80013a4 <TaskCounter+0x1c>)
 8001392:	f7ff ffb7 	bl	8001304 <printf>
      counter--;
 8001396:	6823      	ldr	r3, [r4, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	6023      	str	r3, [r4, #0]
 800139c:	bd10      	pop	{r4, pc}
 800139e:	bf00      	nop
 80013a0:	20000b8c 	.word	0x20000b8c
 80013a4:	08017641 	.word	0x08017641

080013a8 <TaskInit>:
Task_t  tasks[MAX_TASKS];
int32_t currentTask; 

/* initializes the task's struct */
void TaskInit()
{
 80013a8:	2300      	movs	r3, #0
  for(int i=0;i<MAX_TASKS; i++)
  {
    tasks[i].f = NULL;
 80013aa:	4906      	ldr	r1, [pc, #24]	; (80013c4 <TaskInit+0x1c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	1858      	adds	r0, r3, r1
 80013b0:	505a      	str	r2, [r3, r1]
 80013b2:	3338      	adds	r3, #56	; 0x38
int32_t currentTask; 

/* initializes the task's struct */
void TaskInit()
{
  for(int i=0;i<MAX_TASKS; i++)
 80013b4:	f5b3 6f8c 	cmp.w	r3, #1120	; 0x460
  {
    tasks[i].f = NULL;
    tasks[i].data = NULL;
 80013b8:	6042      	str	r2, [r0, #4]
int32_t currentTask; 

/* initializes the task's struct */
void TaskInit()
{
  for(int i=0;i<MAX_TASKS; i++)
 80013ba:	d1f6      	bne.n	80013aa <TaskInit+0x2>
  {
    tasks[i].f = NULL;
    tasks[i].data = NULL;
  }
  printf("task is initialized\n");
 80013bc:	4802      	ldr	r0, [pc, #8]	; (80013c8 <TaskInit+0x20>)
 80013be:	f004 b881 	b.w	80054c4 <puts>
 80013c2:	bf00      	nop
 80013c4:	20001164 	.word	0x20001164
 80013c8:	08017698 	.word	0x08017698

080013cc <TaskAdd>:
}

/* adds Task function from function list*/
int32_t TaskAdd(void (*f)(void *data), void *data)
{
 80013cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013d0:	4c15      	ldr	r4, [pc, #84]	; (8001428 <TaskAdd+0x5c>)
 80013d2:	4e16      	ldr	r6, [pc, #88]	; (800142c <TaskAdd+0x60>)
 80013d4:	4607      	mov	r7, r0
 80013d6:	4688      	mov	r8, r1

  /* Fill in initial PCB */
  int i;
  for(i=0; i<MAX_TASKS; i++) 
 80013d8:	2500      	movs	r5, #0
  {
     memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
 80013da:	4620      	mov	r0, r4
 80013dc:	2100      	movs	r1, #0
 80013de:	222c      	movs	r2, #44	; 0x2c
 80013e0:	f003 ffea 	bl	80053b8 <memset>
     tasks[i].pcb.sp=(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
     tasks[i].pcb.fp=(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
     tasks[i].pcb.lr =(uint32_t)TaskShell;
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <TaskAdd+0x64>)
  /* Fill in initial PCB */
  int i;
  for(i=0; i<MAX_TASKS; i++) 
  {
     memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
     tasks[i].pcb.sp=(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 80013e6:	62a6      	str	r6, [r4, #40]	; 0x28
     tasks[i].pcb.fp=(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
     tasks[i].pcb.lr =(uint32_t)TaskShell;
 80013e8:	6263      	str	r3, [r4, #36]	; 0x24
  /* Put an initial stack frame on too */
     stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
 80013ea:	60f3      	str	r3, [r6, #12]
  /* Try to find an empty slot */
     if(tasks[i].f == NULL)
 80013ec:	f854 3c0c 	ldr.w	r3, [r4, #-12]
  int i;
  for(i=0; i<MAX_TASKS; i++) 
  {
     memset(&(tasks[i].pcb),0,sizeof(tasks[i].pcb));
     tasks[i].pcb.sp=(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
     tasks[i].pcb.fp=(uint32_t)(&(stacks[i][TASK_STACK_SIZE-4]));
 80013f0:	61e6      	str	r6, [r4, #28]
     tasks[i].pcb.lr =(uint32_t)TaskShell;
  /* Put an initial stack frame on too */
     stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
  /* Try to find an empty slot */
     if(tasks[i].f == NULL)
 80013f2:	b96b      	cbnz	r3, 8001410 <TaskAdd+0x44>
     {
        tasks[i].f    = f;
 80013f4:	2238      	movs	r2, #56	; 0x38
 80013f6:	436a      	muls	r2, r5
 80013f8:	4c0e      	ldr	r4, [pc, #56]	; (8001434 <TaskAdd+0x68>)
 80013fa:	18a3      	adds	r3, r4, r2
 80013fc:	50a7      	str	r7, [r4, r2]
        tasks[i].data = data;
        tasks[i].stack = stacks[i];
 80013fe:	4a0e      	ldr	r2, [pc, #56]	; (8001438 <TaskAdd+0x6c>)
     stacks[i][TASK_STACK_SIZE-1]=(uint32_t)(TaskShell);
  /* Try to find an empty slot */
     if(tasks[i].f == NULL)
     {
        tasks[i].f    = f;
        tasks[i].data = data;
 8001400:	f8c3 8004 	str.w	r8, [r3, #4]
        tasks[i].stack = stacks[i];
 8001404:	eb02 2285 	add.w	r2, r2, r5, lsl #10
 8001408:	609a      	str	r2, [r3, #8]
        return i;
 800140a:	4628      	mov	r0, r5
 800140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
int32_t TaskAdd(void (*f)(void *data), void *data)
{

  /* Fill in initial PCB */
  int i;
  for(i=0; i<MAX_TASKS; i++) 
 8001410:	3501      	adds	r5, #1
 8001412:	2d14      	cmp	r5, #20
 8001414:	f104 0438 	add.w	r4, r4, #56	; 0x38
 8001418:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800141c:	d1dd      	bne.n	80013da <TaskAdd+0xe>
        tasks[i].stack = stacks[i];
        return i;
     }
   }
  /* No slots available, return -1 */
    return -1;
 800141e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8001422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001426:	bf00      	nop
 8001428:	20001170 	.word	0x20001170
 800142c:	200019b8 	.word	0x200019b8
 8001430:	080014e9 	.word	0x080014e9
 8001434:	20001164 	.word	0x20001164
 8001438:	200015c8 	.word	0x200015c8

0800143c <TaskKill>:

/* kills a particular function based on id */
int32_t TaskKill(int32_t id)
{
 800143c:	b538      	push	{r3, r4, r5, lr}
   if(tasks[id].f==NULL)
 800143e:	2338      	movs	r3, #56	; 0x38
 8001440:	4a09      	ldr	r2, [pc, #36]	; (8001468 <TaskKill+0x2c>)
 8001442:	4343      	muls	r3, r0
    return -1;
}

/* kills a particular function based on id */
int32_t TaskKill(int32_t id)
{
 8001444:	4601      	mov	r1, r0
   if(tasks[id].f==NULL)
 8001446:	58d0      	ldr	r0, [r2, r3]
 8001448:	18d5      	adds	r5, r2, r3
 800144a:	b928      	cbnz	r0, 8001458 <TaskKill+0x1c>
   {
      puts("NULL id");
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <TaskKill+0x30>)
 800144e:	f004 f839 	bl	80054c4 <puts>
      return -1;
 8001452:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001456:	bd38      	pop	{r3, r4, r5, pc}
   }
   tasks[id].f = NULL;
 8001458:	2400      	movs	r4, #0
 800145a:	50d4      	str	r4, [r2, r3]
   tasks[id].data = NULL;
   printf("Task[%d] was killed!\n",(int)id);
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <TaskKill+0x34>)
   {
      puts("NULL id");
      return -1;
   }
   tasks[id].f = NULL;
   tasks[id].data = NULL;
 800145e:	606c      	str	r4, [r5, #4]
   printf("Task[%d] was killed!\n",(int)id);
 8001460:	f7ff ff50 	bl	8001304 <printf>
   return 0;   
 8001464:	4620      	mov	r0, r4
}
 8001466:	bd38      	pop	{r3, r4, r5, pc}
 8001468:	20001164 	.word	0x20001164
 800146c:	080176ac 	.word	0x080176ac
 8001470:	080176b4 	.word	0x080176b4

08001474 <TaskSwitcher>:
{

int32_t i;
uint32_t count=0;
      
i = currentTask;
 8001474:	4919      	ldr	r1, [pc, #100]	; (80014dc <TaskSwitcher+0x68>)
                         */
}

/* the main scheduler function that implements context switching */
int32_t TaskSwitcher(void)
{
 8001476:	b538      	push	{r3, r4, r5, lr}
{

int32_t i;
uint32_t count=0;
      
i = currentTask;
 8001478:	680b      	ldr	r3, [r1, #0]
/* Find the next task to run */
static int32_t TaskNext(void)
{

int32_t i;
uint32_t count=0;
 800147a:	2200      	movs	r2, #0
 800147c:	460d      	mov	r5, r1
      
i = currentTask;
  do {
        /* NOTE: for this expression to work correctly, MAX_TASKS must be an EVEN number */
        i = ((i + 1) % (MAX_TASKS-1))+1;
 800147e:	2113      	movs	r1, #19
 8001480:	3301      	adds	r3, #1
 8001482:	fb93 f0f1 	sdiv	r0, r3, r1
 8001486:	fb01 3310 	mls	r3, r1, r0, r3
 800148a:	3301      	adds	r3, #1
        count++;
      } while((tasks[i].f == NULL) && (count <= MAX_TASKS));
 800148c:	2138      	movs	r1, #56	; 0x38
 800148e:	4c14      	ldr	r4, [pc, #80]	; (80014e0 <TaskSwitcher+0x6c>)
 8001490:	4359      	muls	r1, r3
      
i = currentTask;
  do {
        /* NOTE: for this expression to work correctly, MAX_TASKS must be an EVEN number */
        i = ((i + 1) % (MAX_TASKS-1))+1;
        count++;
 8001492:	3201      	adds	r2, #1
      } while((tasks[i].f == NULL) && (count <= MAX_TASKS));
 8001494:	5861      	ldr	r1, [r4, r1]
 8001496:	b911      	cbnz	r1, 800149e <TaskSwitcher+0x2a>
 8001498:	2a15      	cmp	r2, #21
 800149a:	d1f0      	bne.n	800147e <TaskSwitcher+0xa>
 800149c:	e003      	b.n	80014a6 <TaskSwitcher+0x32>

      return (count <= MAX_TASKS) ? i : -1;
 800149e:	2a15      	cmp	r2, #21
 80014a0:	d001      	beq.n	80014a6 <TaskSwitcher+0x32>
      int32_t nextTask;
      register uint32_t *currentPCB asm("r0");
      register uint32_t *nextPCB asm("r1");
      //printf("Task switcher called\n\n");
      nextTask = TaskNext();
      if(nextTask < 0)
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	da03      	bge.n	80014ae <TaskSwitcher+0x3a>
      {
      /* In the case of no tasks to run,return to the original thread */
        printf("TaskSwitcher(): No tasks to run!\n");
 80014a6:	480f      	ldr	r0, [pc, #60]	; (80014e4 <TaskSwitcher+0x70>)
 80014a8:	f004 f80c 	bl	80054c4 <puts>
        nextTask = 0;
 80014ac:	2300      	movs	r3, #0
      }
      /* If the current task is the only one  to be running, just return */
      if(nextTask == currentTask)
 80014ae:	6828      	ldr	r0, [r5, #0]
 80014b0:	4283      	cmp	r3, r0
 80014b2:	d010      	beq.n	80014d6 <TaskSwitcher+0x62>
        return 0;
      currentPCB = &(tasks[currentTask].pcb.r4);
 80014b4:	2138      	movs	r1, #56	; 0x38
      nextPCB = &(tasks[nextTask].pcb.r4);
      currentTask = nextTask;
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <TaskSwitcher+0x68>)
        nextTask = 0;
      }
      /* If the current task is the only one  to be running, just return */
      if(nextTask == currentTask)
        return 0;
      currentPCB = &(tasks[currentTask].pcb.r4);
 80014b8:	fb01 4000 	mla	r0, r1, r0, r4
      nextPCB = &(tasks[nextTask].pcb.r4);
 80014bc:	fb01 4103 	mla	r1, r1, r3, r4
        nextTask = 0;
      }
      /* If the current task is the only one  to be running, just return */
      if(nextTask == currentTask)
        return 0;
      currentPCB = &(tasks[currentTask].pcb.r4);
 80014c0:	300c      	adds	r0, #12
      nextPCB = &(tasks[nextTask].pcb.r4);
 80014c2:	310c      	adds	r1, #12
      currentTask = nextTask;
 80014c4:	6013      	str	r3, [r2, #0]
      asm volatile (
 80014c6:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80014ca:	f8c0 d000 	str.w	sp, [r0]
 80014ce:	e8b1 5ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 80014d2:	f8d1 d000 	ldr.w	sp, [r1]
    

                           /*  int32_t currentTask = TaskNext();
                          tasks[currentTask].f(tasks[currentTask].data);
                        return 1;*/
}
 80014d6:	2000      	movs	r0, #0
 80014d8:	bd38      	pop	{r3, r4, r5, pc}
 80014da:	bf00      	nop
 80014dc:	200015c4 	.word	0x200015c4
 80014e0:	20001164 	.word	0x20001164
 80014e4:	080176ca 	.word	0x080176ca

080014e8 <TaskShell>:

/* stub function that does not allow stack access by compiler */
__attribute__((naked)) static void TaskShell(void) 
    {
    /* call the appropriate Task Function */
    tasks[currentTask].f(tasks[currentTask].data);
 80014e8:	4c06      	ldr	r4, [pc, #24]	; (8001504 <TaskShell+0x1c>)
 80014ea:	4a07      	ldr	r2, [pc, #28]	; (8001508 <TaskShell+0x20>)
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	2138      	movs	r1, #56	; 0x38
 80014f0:	434b      	muls	r3, r1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	58d3      	ldr	r3, [r2, r3]
 80014f6:	6848      	ldr	r0, [r1, #4]
 80014f8:	4798      	blx	r3
    /* Terminate this task */
    TaskKill(currentTask);
 80014fa:	6820      	ldr	r0, [r4, #0]
 80014fc:	f7ff ff9e 	bl	800143c <TaskKill>
    /* Call scheduler, Never returns */
    TaskSwitcher();
 8001500:	f7ff bfb8 	b.w	8001474 <TaskSwitcher>
 8001504:	200015c4 	.word	0x200015c4
 8001508:	20001164 	.word	0x20001164

0800150c <TaskLedOn>:
uint32_t  r;      // random number
int16_t xyz[3];   // variable for polling sensors

/* turns leds on randomly */
void TaskLedOn(void* data)
{
 800150c:	b510      	push	{r4, lr}
  r = rand() % 8;
 800150e:	f003 ffe1 	bl	80054d4 <rand>
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <TaskLedOn+0x30>)
 8001514:	4a0a      	ldr	r2, [pc, #40]	; (8001540 <TaskLedOn+0x34>)
 8001516:	4003      	ands	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	4614      	mov	r4, r2
 800151c:	da03      	bge.n	8001526 <TaskLedOn+0x1a>
 800151e:	3b01      	subs	r3, #1
 8001520:	f063 0307 	orn	r3, r3, #7
 8001524:	3301      	adds	r3, #1

  printf("Hello from TaskLedOn\n");
 8001526:	4807      	ldr	r0, [pc, #28]	; (8001544 <TaskLedOn+0x38>)
int16_t xyz[3];   // variable for polling sensors

/* turns leds on randomly */
void TaskLedOn(void* data)
{
  r = rand() % 8;
 8001528:	6013      	str	r3, [r2, #0]

  printf("Hello from TaskLedOn\n");
 800152a:	f003 ffcb 	bl	80054c4 <puts>
  
  BSP_LED_On(r);
 800152e:	7820      	ldrb	r0, [r4, #0]
 8001530:	f003 faaa 	bl	8004a88 <BSP_LED_On>
  TaskSwitcher();
  
}
 8001534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  r = rand() % 8;

  printf("Hello from TaskLedOn\n");
  
  BSP_LED_On(r);
  TaskSwitcher();
 8001538:	f7ff bf9c 	b.w	8001474 <TaskSwitcher>
 800153c:	80000007 	.word	0x80000007
 8001540:	200065d0 	.word	0x200065d0
 8001544:	080176eb 	.word	0x080176eb

08001548 <TaskLedOff>:
  
}

/*turns leds off randomly */
void TaskLedOff(void* data)
{
 8001548:	b508      	push	{r3, lr}
  TaskSwitcher();
 800154a:	f7ff ff93 	bl	8001474 <TaskSwitcher>
  r = rand() % 8;
 800154e:	f003 ffc1 	bl	80054d4 <rand>
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <TaskLedOff+0x30>)
 8001554:	4003      	ands	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	da03      	bge.n	8001562 <TaskLedOff+0x1a>
 800155a:	3b01      	subs	r3, #1
 800155c:	f063 0307 	orn	r3, r3, #7
 8001560:	3301      	adds	r3, #1
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <TaskLedOff+0x34>)

  BSP_LED_Off(r);
 8001564:	b2d8      	uxtb	r0, r3

/*turns leds off randomly */
void TaskLedOff(void* data)
{
  TaskSwitcher();
  r = rand() % 8;
 8001566:	6013      	str	r3, [r2, #0]

  BSP_LED_Off(r);
 8001568:	f003 fa9c 	bl	8004aa4 <BSP_LED_Off>
  printf("Hello from TaskLedOff\n");
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <TaskLedOff+0x38>)
  
}
 800156e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  TaskSwitcher();
  r = rand() % 8;

  BSP_LED_Off(r);
  printf("Hello from TaskLedOff\n");
 8001572:	f003 bfa7 	b.w	80054c4 <puts>
 8001576:	bf00      	nop
 8001578:	80000007 	.word	0x80000007
 800157c:	200065d0 	.word	0x200065d0
 8001580:	08017700 	.word	0x08017700

08001584 <TaskAccel>:
  
}

/* implements accelerometer */
void TaskAccel(void* data)
{
 8001584:	b510      	push	{r4, lr}
  TaskSwitcher();
  BSP_ACCELERO_GetXYZ(xyz);
 8001586:	4c09      	ldr	r4, [pc, #36]	; (80015ac <TaskAccel+0x28>)
}

/* implements accelerometer */
void TaskAccel(void* data)
{
  TaskSwitcher();
 8001588:	f7ff ff74 	bl	8001474 <TaskSwitcher>
  BSP_ACCELERO_GetXYZ(xyz);
 800158c:	4620      	mov	r0, r4
 800158e:	f003 fc0f 	bl	8004db0 <BSP_ACCELERO_GetXYZ>

  printf("Accelerometer returns:\n"
 8001592:	f9b4 1000 	ldrsh.w	r1, [r4]
 8001596:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800159a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 800159e:	4804      	ldr	r0, [pc, #16]	; (80015b0 <TaskAccel+0x2c>)
 80015a0:	f7ff feb0 	bl	8001304 <printf>
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);

  TaskSwitcher();
}
 80015a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 xyz[0],xyz[1],xyz[2]);

  TaskSwitcher();
 80015a8:	f7ff bf64 	b.w	8001474 <TaskSwitcher>
 80015ac:	200065c8 	.word	0x200065c8
 80015b0:	08007148 	.word	0x08007148

080015b4 <TaskPB>:
}

void TaskPB(void* data)
{
 80015b4:	b510      	push	{r4, lr}
  uint32_t button;
  button = BSP_PB_GetState(BUTTON_USER);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f003 faca 	bl	8004b50 <BSP_PB_GetState>

  if(button)
 80015bc:	b918      	cbnz	r0, 80015c6 <TaskPB+0x12>
      BSP_LED_On(i);
    }
  }

  TaskSwitcher();
}
 80015be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      BSP_LED_On(i);
    }
  }

  TaskSwitcher();
 80015c2:	f7ff bf57 	b.w	8001474 <TaskSwitcher>
  uint32_t button;
  button = BSP_PB_GetState(BUTTON_USER);

  if(button)
  {
    printf("\n button was pressed!!\n");
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <TaskPB+0x28>)
 80015c8:	f003 ff7c 	bl	80054c4 <puts>
    for(int i=0;i<=7;i++)
 80015cc:	2400      	movs	r4, #0
    {
      BSP_LED_On(i);
 80015ce:	b2e0      	uxtb	r0, r4
  button = BSP_PB_GetState(BUTTON_USER);

  if(button)
  {
    printf("\n button was pressed!!\n");
    for(int i=0;i<=7;i++)
 80015d0:	3401      	adds	r4, #1
    {
      BSP_LED_On(i);
 80015d2:	f003 fa59 	bl	8004a88 <BSP_LED_On>
  button = BSP_PB_GetState(BUTTON_USER);

  if(button)
  {
    printf("\n button was pressed!!\n");
    for(int i=0;i<=7;i++)
 80015d6:	2c08      	cmp	r4, #8
 80015d8:	d1f9      	bne.n	80015ce <TaskPB+0x1a>
 80015da:	e7f0      	b.n	80015be <TaskPB+0xa>
 80015dc:	08017716 	.word	0x08017716

080015e0 <TaskGyro>:

  TaskSwitcher();
}

void TaskGyro(void* data)
{
 80015e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  float xyz[3];

  BSP_GYRO_GetXYZ(xyz);
 80015e2:	a801      	add	r0, sp, #4
 80015e4:	f003 fc10 	bl	8004e08 <BSP_GYRO_GetXYZ>
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));
 80015e8:	ed9d 6a03 	vldr	s12, [sp, #12]

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 80015ec:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800162c <TaskGyro+0x4c>
 80015f0:	eddd 6a01 	vldr	s13, [sp, #4]
	 (int)(xyz[1]*256),
 80015f4:	ed9d 7a02 	vldr	s14, [sp, #8]

  printf("Gyroscope returns:\n"
	 "   X: %d\n"
	 "   Y: %d\n"
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
 80015f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
	 (int)(xyz[1]*256),
 80015fc:	ee27 7a27 	vmul.f32	s14, s14, s15
	 (int)(xyz[2]*256));
 8001600:	ee66 7a27 	vmul.f32	s15, s12, s15
{
  float xyz[3];

  BSP_GYRO_GetXYZ(xyz);

  printf("Gyroscope returns:\n"
 8001604:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8001608:	eebd 7ac7 	vcvt.s32.f32	s14, s14
 800160c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001610:	ee16 1a90 	vmov	r1, s13
 8001614:	ee17 2a10 	vmov	r2, s14
 8001618:	ee17 3a90 	vmov	r3, s15
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <TaskGyro+0x50>)
 800161e:	f7ff fe71 	bl	8001304 <printf>
	 "   Z: %d\n",
	 (int)(xyz[0]*256),
	 (int)(xyz[1]*256),
	 (int)(xyz[2]*256));

  TaskSwitcher();
 8001622:	f7ff ff27 	bl	8001474 <TaskSwitcher>
}
 8001626:	b005      	add	sp, #20
 8001628:	f85d fb04 	ldr.w	pc, [sp], #4
 800162c:	43800000 	.word	0x43800000
 8001630:	0800717b 	.word	0x0800717b

08001634 <CmdTaskKill>:
} 
ADD_CMD("addtask",CmdTaskAdd,"              Adds a Task to Scheduler")


void CmdTaskKill(int mode)
{
 8001634:	b507      	push	{r0, r1, r2, lr}

  uint32_t id;
  int rc;

  if(mode != CMD_INTERACTIVE)
 8001636:	b970      	cbnz	r0, 8001656 <CmdTaskKill+0x22>
  {
    return;
  }

  rc = fetch_uint32_arg(&id);
 8001638:	a801      	add	r0, sp, #4
 800163a:	f7ff f8c5 	bl	80007c8 <fetch_uint32_arg>
  if(rc) 
 800163e:	b108      	cbz	r0, 8001644 <CmdTaskKill+0x10>
  {
    printf("missing task id\n");
 8001640:	4806      	ldr	r0, [pc, #24]	; (800165c <CmdTaskKill+0x28>)
 8001642:	e006      	b.n	8001652 <CmdTaskKill+0x1e>
    return;
  }
  
  if(id >= 0 && id <10)
 8001644:	9801      	ldr	r0, [sp, #4]
 8001646:	2809      	cmp	r0, #9
 8001648:	d802      	bhi.n	8001650 <CmdTaskKill+0x1c>
  {
    TaskKill(id);
 800164a:	f7ff fef7 	bl	800143c <TaskKill>
 800164e:	e002      	b.n	8001656 <CmdTaskKill+0x22>
  } else {
    puts("no action was taken");
 8001650:	4803      	ldr	r0, [pc, #12]	; (8001660 <CmdTaskKill+0x2c>)
 8001652:	f003 ff37 	bl	80054c4 <puts>
  }
} 
 8001656:	b003      	add	sp, #12
 8001658:	f85d fb04 	ldr.w	pc, [sp], #4
 800165c:	0801772d 	.word	0x0801772d
 8001660:	0801773d 	.word	0x0801773d

08001664 <CmdTasks>:

  TaskSwitcher();
}

void CmdTasks(int mode)
{
 8001664:	b510      	push	{r4, lr}
  if(mode != CMD_INTERACTIVE) {
 8001666:	4604      	mov	r4, r0
 8001668:	2800      	cmp	r0, #0
 800166a:	d130      	bne.n	80016ce <CmdTasks+0x6a>
    return;
  }
  printf("Starting testing task switch\n");
 800166c:	4818      	ldr	r0, [pc, #96]	; (80016d0 <CmdTasks+0x6c>)
 800166e:	f003 ff29 	bl	80054c4 <puts>

  TaskInit();
 8001672:	f7ff fe99 	bl	80013a8 <TaskInit>
  
  printf("TaskPB added, id = %d\n",(int)TaskAdd(TaskPB,0));  
 8001676:	4621      	mov	r1, r4
 8001678:	4816      	ldr	r0, [pc, #88]	; (80016d4 <CmdTasks+0x70>)
 800167a:	f7ff fea7 	bl	80013cc <TaskAdd>
 800167e:	4601      	mov	r1, r0
 8001680:	4815      	ldr	r0, [pc, #84]	; (80016d8 <CmdTasks+0x74>)
 8001682:	f7ff fe3f 	bl	8001304 <printf>
  printf("TaskLedOff added, id = %d\n",(int) TaskAdd(TaskLedOff,0));
 8001686:	4621      	mov	r1, r4
 8001688:	4814      	ldr	r0, [pc, #80]	; (80016dc <CmdTasks+0x78>)
 800168a:	f7ff fe9f 	bl	80013cc <TaskAdd>
 800168e:	4601      	mov	r1, r0
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <CmdTasks+0x7c>)
 8001692:	f7ff fe37 	bl	8001304 <printf>
  printf("TaskLedOn added, id = %d\n",(int)TaskAdd(TaskLedOn,0));
 8001696:	4621      	mov	r1, r4
 8001698:	4812      	ldr	r0, [pc, #72]	; (80016e4 <CmdTasks+0x80>)
 800169a:	f7ff fe97 	bl	80013cc <TaskAdd>
 800169e:	4601      	mov	r1, r0
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <CmdTasks+0x84>)
 80016a2:	f7ff fe2f 	bl	8001304 <printf>
  printf("TaskGyro added, id = %d\n",(int)TaskAdd(TaskGyro,0));
 80016a6:	4621      	mov	r1, r4
 80016a8:	4810      	ldr	r0, [pc, #64]	; (80016ec <CmdTasks+0x88>)
 80016aa:	f7ff fe8f 	bl	80013cc <TaskAdd>
 80016ae:	4601      	mov	r1, r0
 80016b0:	480f      	ldr	r0, [pc, #60]	; (80016f0 <CmdTasks+0x8c>)
 80016b2:	f7ff fe27 	bl	8001304 <printf>
  printf("TaskAccel added, id = %d\n",(int)TaskAdd(TaskAccel,0));
 80016b6:	4621      	mov	r1, r4
 80016b8:	480e      	ldr	r0, [pc, #56]	; (80016f4 <CmdTasks+0x90>)
 80016ba:	f7ff fe87 	bl	80013cc <TaskAdd>
 80016be:	4601      	mov	r1, r0
 80016c0:	480d      	ldr	r0, [pc, #52]	; (80016f8 <CmdTasks+0x94>)
 80016c2:	f7ff fe1f 	bl	8001304 <printf>
  {   
     if(TaskSwitcher() == -1)
        break;
  }
*/
} 
 80016c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  printf("TaskLedOff added, id = %d\n",(int) TaskAdd(TaskLedOff,0));
  printf("TaskLedOn added, id = %d\n",(int)TaskAdd(TaskLedOn,0));
  printf("TaskGyro added, id = %d\n",(int)TaskAdd(TaskGyro,0));
  printf("TaskAccel added, id = %d\n",(int)TaskAdd(TaskAccel,0));
  
  TaskSwitcher();
 80016ca:	f7ff bed3 	b.w	8001474 <TaskSwitcher>
 80016ce:	bd10      	pop	{r4, pc}
 80016d0:	08017751 	.word	0x08017751
 80016d4:	080015b5 	.word	0x080015b5
 80016d8:	0801776e 	.word	0x0801776e
 80016dc:	08001549 	.word	0x08001549
 80016e0:	08017785 	.word	0x08017785
 80016e4:	0800150d 	.word	0x0800150d
 80016e8:	080177a0 	.word	0x080177a0
 80016ec:	080015e1 	.word	0x080015e1
 80016f0:	080177ba 	.word	0x080177ba
 80016f4:	08001585 	.word	0x08001585
 80016f8:	080177d3 	.word	0x080177d3

080016fc <CmdTaskAdd>:
} 
ADD_CMD("tasktest",CmdTasks,"<index> <state> Implements a basic scheduler")


void CmdTaskAdd(int mode)
{
 80016fc:	b510      	push	{r4, lr}
  if(mode != CMD_INTERACTIVE) {
 80016fe:	4604      	mov	r4, r0
 8001700:	bb58      	cbnz	r0, 800175a <CmdTaskAdd+0x5e>
    return;
  }

  TaskInit();
 8001702:	f7ff fe51 	bl	80013a8 <TaskInit>
  printf("TaskPB added, id = %d\n",(int)TaskAdd(TaskPB,0));
 8001706:	4621      	mov	r1, r4
 8001708:	4814      	ldr	r0, [pc, #80]	; (800175c <CmdTaskAdd+0x60>)
 800170a:	f7ff fe5f 	bl	80013cc <TaskAdd>
 800170e:	4601      	mov	r1, r0
 8001710:	4813      	ldr	r0, [pc, #76]	; (8001760 <CmdTaskAdd+0x64>)
 8001712:	f7ff fdf7 	bl	8001304 <printf>
  printf("TaskAccel added, id = %d\n",(int)TaskAdd(TaskAccel,0));  
 8001716:	4621      	mov	r1, r4
 8001718:	4812      	ldr	r0, [pc, #72]	; (8001764 <CmdTaskAdd+0x68>)
 800171a:	f7ff fe57 	bl	80013cc <TaskAdd>
 800171e:	4601      	mov	r1, r0
 8001720:	4811      	ldr	r0, [pc, #68]	; (8001768 <CmdTaskAdd+0x6c>)
 8001722:	f7ff fdef 	bl	8001304 <printf>
  printf("TaskLedOff added, id = %d\n",(int) TaskAdd(TaskLedOff,0));
 8001726:	4621      	mov	r1, r4
 8001728:	4810      	ldr	r0, [pc, #64]	; (800176c <CmdTaskAdd+0x70>)
 800172a:	f7ff fe4f 	bl	80013cc <TaskAdd>
 800172e:	4601      	mov	r1, r0
 8001730:	480f      	ldr	r0, [pc, #60]	; (8001770 <CmdTaskAdd+0x74>)
 8001732:	f7ff fde7 	bl	8001304 <printf>
  printf("TaskLedOn added, id = %d\n",(int)TaskAdd(TaskLedOn,0));
 8001736:	4621      	mov	r1, r4
 8001738:	480e      	ldr	r0, [pc, #56]	; (8001774 <CmdTaskAdd+0x78>)
 800173a:	f7ff fe47 	bl	80013cc <TaskAdd>
 800173e:	4601      	mov	r1, r0
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <CmdTaskAdd+0x7c>)
 8001742:	f7ff fddf 	bl	8001304 <printf>
  printf("TaskGyro added, id = %d\n",(int)TaskAdd(TaskGyro,0));
 8001746:	4621      	mov	r1, r4
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <CmdTaskAdd+0x80>)
 800174a:	f7ff fe3f 	bl	80013cc <TaskAdd>
 
} 
 800174e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  TaskInit();
  printf("TaskPB added, id = %d\n",(int)TaskAdd(TaskPB,0));
  printf("TaskAccel added, id = %d\n",(int)TaskAdd(TaskAccel,0));  
  printf("TaskLedOff added, id = %d\n",(int) TaskAdd(TaskLedOff,0));
  printf("TaskLedOn added, id = %d\n",(int)TaskAdd(TaskLedOn,0));
  printf("TaskGyro added, id = %d\n",(int)TaskAdd(TaskGyro,0));
 8001752:	4601      	mov	r1, r0
 8001754:	480a      	ldr	r0, [pc, #40]	; (8001780 <CmdTaskAdd+0x84>)
 8001756:	f7ff bdd5 	b.w	8001304 <printf>
 800175a:	bd10      	pop	{r4, pc}
 800175c:	080015b5 	.word	0x080015b5
 8001760:	0801776e 	.word	0x0801776e
 8001764:	08001585 	.word	0x08001585
 8001768:	080177d3 	.word	0x080177d3
 800176c:	08001549 	.word	0x08001549
 8001770:	08017785 	.word	0x08017785
 8001774:	0800150d 	.word	0x0800150d
 8001778:	080177a0 	.word	0x080177a0
 800177c:	080015e1 	.word	0x080015e1
 8001780:	080177ba 	.word	0x080177ba

08001784 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001784:	4a15      	ldr	r2, [pc, #84]	; (80017dc <SystemInit+0x58>)
 8001786:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800178a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800178e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001792:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <SystemInit+0x5c>)
 8001794:	6819      	ldr	r1, [r3, #0]
 8001796:	f041 0101 	orr.w	r1, r1, #1
 800179a:	6019      	str	r1, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 800179c:	6858      	ldr	r0, [r3, #4]
 800179e:	4911      	ldr	r1, [pc, #68]	; (80017e4 <SystemInit+0x60>)
 80017a0:	4001      	ands	r1, r0
 80017a2:	6059      	str	r1, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017a4:	6819      	ldr	r1, [r3, #0]
 80017a6:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 80017aa:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 80017ae:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017b0:	6819      	ldr	r1, [r3, #0]
 80017b2:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 80017b6:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80017b8:	6859      	ldr	r1, [r3, #4]
 80017ba:	f421 01fe 	bic.w	r1, r1, #8323072	; 0x7f0000
 80017be:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 80017c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c2:	f021 010f 	bic.w	r1, r1, #15
 80017c6:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 80017c8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80017ca:	4907      	ldr	r1, [pc, #28]	; (80017e8 <SystemInit+0x64>)
 80017cc:	4001      	ands	r1, r0
 80017ce:	6319      	str	r1, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80017d0:	2100      	movs	r1, #0
 80017d2:	6099      	str	r1, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017d4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017d8:	6093      	str	r3, [r2, #8]
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	40021000 	.word	0x40021000
 80017e4:	f87fc00c 	.word	0xf87fc00c
 80017e8:	ff00fccc 	.word	0xff00fccc

080017ec <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ec:	b538      	push	{r3, r4, r5, lr}

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ee:	6803      	ldr	r3, [r0, #0]
 80017f0:	07da      	lsls	r2, r3, #31
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f2:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017f4:	d404      	bmi.n	8001800 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	079b      	lsls	r3, r3, #30
 80017fa:	f100 80d5 	bmi.w	80019a8 <HAL_RCC_OscConfig+0x1bc>
 80017fe:	e16e      	b.n	8001ade <HAL_RCC_OscConfig+0x2f2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001800:	4bbb      	ldr	r3, [pc, #748]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	f002 020c 	and.w	r2, r2, #12
 8001808:	2a04      	cmp	r2, #4
 800180a:	d007      	beq.n	800181c <HAL_RCC_OscConfig+0x30>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	f002 020c 	and.w	r2, r2, #12
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001812:	2a08      	cmp	r2, #8
 8001814:	d12a      	bne.n	800186c <HAL_RCC_OscConfig+0x80>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	03dd      	lsls	r5, r3, #15
 800181a:	d527      	bpl.n	800186c <HAL_RCC_OscConfig+0x80>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800181c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001820:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001824:	fab3 f383 	clz	r3, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState != RCC_HSE_ON))
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	4baf      	ldr	r3, [pc, #700]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 8001834:	d101      	bne.n	800183a <HAL_RCC_OscConfig+0x4e>
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	e006      	b.n	8001848 <HAL_RCC_OscConfig+0x5c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800183a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800183e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001848:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800184c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001850:	fab2 f282 	clz	r2, r2
 8001854:	2101      	movs	r1, #1
 8001856:	f002 021f 	and.w	r2, r2, #31
 800185a:	fa01 f202 	lsl.w	r2, r1, r2
 800185e:	421a      	tst	r2, r3
 8001860:	d0c9      	beq.n	80017f6 <HAL_RCC_OscConfig+0xa>
 8001862:	6863      	ldr	r3, [r4, #4]
 8001864:	428b      	cmp	r3, r1
 8001866:	d0c6      	beq.n	80017f6 <HAL_RCC_OscConfig+0xa>
      {
        return HAL_ERROR;
 8001868:	2001      	movs	r0, #1
 800186a:	bd38      	pop	{r3, r4, r5, pc}
      }
    }
    else
    {
      /* Reset HSEON and HSEBYP bits before configuring the HSE --------------*/
      __HAL_RCC_HSE_CONFIG(RCC_HSE_OFF);
 800186c:	4ba1      	ldr	r3, [pc, #644]	; (8001af4 <HAL_RCC_OscConfig+0x308>)
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001872:	f000 fcdb 	bl	800222c <HAL_GetTick>
 8001876:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001878:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800187c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001880:	fab3 f383 	clz	r3, r3
      
      /* Wait till HSE is bypassed or disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001884:	f043 0320 	orr.w	r3, r3, #32
 8001888:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800188c:	2b01      	cmp	r3, #1
 800188e:	4b98      	ldr	r3, [pc, #608]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 8001890:	d101      	bne.n	8001896 <HAL_RCC_OscConfig+0xaa>
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	e006      	b.n	80018a4 <HAL_RCC_OscConfig+0xb8>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800189a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800189e:	fab2 f282 	clz	r2, r2
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80018a8:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018ac:	fab2 f282 	clz	r2, r2
 80018b0:	2101      	movs	r1, #1
 80018b2:	f002 021f 	and.w	r2, r2, #31
 80018b6:	fa01 f202 	lsl.w	r2, r1, r2
 80018ba:	421a      	tst	r2, r3
 80018bc:	d008      	beq.n	80018d0 <HAL_RCC_OscConfig+0xe4>
      {
        if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 80018be:	f000 fcb5 	bl	800222c <HAL_GetTick>
 80018c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80018c6:	1b40      	subs	r0, r0, r5
 80018c8:	4298      	cmp	r0, r3
 80018ca:	d9d5      	bls.n	8001878 <HAL_RCC_OscConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80018cc:	2003      	movs	r0, #3
 80018ce:	bd38      	pop	{r3, r4, r5, pc}
        }
      }

      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018d0:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <HAL_RCC_OscConfig+0x308>)
 80018d2:	7922      	ldrb	r2, [r4, #4]
 80018d4:	701a      	strb	r2, [r3, #0]

      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018d6:	f8d3 102a 	ldr.w	r1, [r3, #42]	; 0x2a
 80018da:	68a2      	ldr	r2, [r4, #8]
 80018dc:	f021 010f 	bic.w	r1, r1, #15
 80018e0:	430a      	orrs	r2, r1
 80018e2:	f8c3 202a 	str.w	r2, [r3, #42]	; 0x2a

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState == RCC_HSE_ON)
 80018e6:	6863      	ldr	r3, [r4, #4]
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d12e      	bne.n	800194a <HAL_RCC_OscConfig+0x15e>
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ec:	f000 fc9e 	bl	800222c <HAL_GetTick>
 80018f0:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f6:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	f043 0320 	orr.w	r3, r3, #32
 8001902:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001906:	2b01      	cmp	r3, #1
 8001908:	4b79      	ldr	r3, [pc, #484]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 800190a:	d101      	bne.n	8001910 <HAL_RCC_OscConfig+0x124>
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	e006      	b.n	800191e <HAL_RCC_OscConfig+0x132>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001910:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001914:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001918:	fab2 f282 	clz	r2, r2
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001922:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	2101      	movs	r1, #1
 800192c:	f002 021f 	and.w	r2, r2, #31
 8001930:	fa01 f202 	lsl.w	r2, r1, r2
 8001934:	421a      	tst	r2, r3
 8001936:	f47f af5e 	bne.w	80017f6 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 800193a:	f000 fc77 	bl	800222c <HAL_GetTick>
 800193e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001942:	1b40      	subs	r0, r0, r5
 8001944:	4298      	cmp	r0, r3
 8001946:	d9d4      	bls.n	80018f2 <HAL_RCC_OscConfig+0x106>
 8001948:	e7c0      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
        }
      }
      else
      {
        /* Get timeout */
        tickstart = HAL_GetTick();
 800194a:	f000 fc6f 	bl	800222c <HAL_GetTick>
 800194e:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001954:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001958:	fab3 f383 	clz	r3, r3

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195c:	f043 0320 	orr.w	r3, r3, #32
 8001960:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001964:	2b01      	cmp	r3, #1
 8001966:	4b62      	ldr	r3, [pc, #392]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 8001968:	d101      	bne.n	800196e <HAL_RCC_OscConfig+0x182>
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	e006      	b.n	800197c <HAL_RCC_OscConfig+0x190>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800196e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001972:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001976:	fab2 f282 	clz	r2, r2
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001980:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001984:	fab2 f282 	clz	r2, r2
 8001988:	2101      	movs	r1, #1
 800198a:	f002 021f 	and.w	r2, r2, #31
 800198e:	fa01 f202 	lsl.w	r2, r1, r2
 8001992:	421a      	tst	r2, r3
 8001994:	f43f af2f 	beq.w	80017f6 <HAL_RCC_OscConfig+0xa>
        {
          if((HAL_GetTick()-tickstart) > HSE_TIMEOUT_VALUE)
 8001998:	f000 fc48 	bl	800222c <HAL_GetTick>
 800199c:	f241 3388 	movw	r3, #5000	; 0x1388
 80019a0:	1b40      	subs	r0, r0, r5
 80019a2:	4298      	cmp	r0, r3
 80019a4:	d9d4      	bls.n	8001950 <HAL_RCC_OscConfig+0x164>
 80019a6:	e791      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019a8:	4b51      	ldr	r3, [pc, #324]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	f012 0f0c 	tst.w	r2, #12
 80019b0:	d007      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1d6>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	f002 020c 	and.w	r2, r2, #12
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */    
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80019b8:	2a08      	cmp	r2, #8
 80019ba:	d127      	bne.n	8001a0c <HAL_RCC_OscConfig+0x220>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	03d8      	lsls	r0, r3, #15
 80019c0:	d424      	bmi.n	8001a0c <HAL_RCC_OscConfig+0x220>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c2:	2302      	movs	r3, #2
 80019c4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80019c8:	fab3 f383 	clz	r3, r3
    {
      /* When the HSI is used as system clock it is not allowed to be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019cc:	f043 0320 	orr.w	r3, r3, #32
 80019d0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	4b46      	ldr	r3, [pc, #280]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 80019d8:	d101      	bne.n	80019de <HAL_RCC_OscConfig+0x1f2>
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	e005      	b.n	80019ea <HAL_RCC_OscConfig+0x1fe>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019de:	2202      	movs	r2, #2
 80019e0:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80019e4:	fab2 f282 	clz	r2, r2
 80019e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	2202      	movs	r2, #2
 80019ec:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80019f0:	fab2 f282 	clz	r2, r2
 80019f4:	2101      	movs	r1, #1
 80019f6:	f002 021f 	and.w	r2, r2, #31
 80019fa:	fa01 f202 	lsl.w	r2, r1, r2
 80019fe:	421a      	tst	r2, r3
 8001a00:	d033      	beq.n	8001a6a <HAL_RCC_OscConfig+0x27e>
 8001a02:	6923      	ldr	r3, [r4, #16]
 8001a04:	428b      	cmp	r3, r1
 8001a06:	f47f af2f 	bne.w	8001868 <HAL_RCC_OscConfig+0x7c>
 8001a0a:	e02e      	b.n	8001a6a <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a0c:	6922      	ldr	r2, [r4, #16]
 8001a0e:	4b3a      	ldr	r3, [pc, #232]	; (8001af8 <HAL_RCC_OscConfig+0x30c>)
 8001a10:	2a00      	cmp	r2, #0
 8001a12:	d03a      	beq.n	8001a8a <HAL_RCC_OscConfig+0x29e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a18:	f000 fc08 	bl	800222c <HAL_GetTick>
 8001a1c:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a1e:	2302      	movs	r3, #2
 8001a20:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a24:	fab3 f383 	clz	r3, r3

        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	f043 0320 	orr.w	r3, r3, #32
 8001a2c:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	4b2f      	ldr	r3, [pc, #188]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x24e>
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	e005      	b.n	8001a46 <HAL_RCC_OscConfig+0x25a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	fab2 f282 	clz	r2, r2
 8001a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a46:	2202      	movs	r2, #2
 8001a48:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a4c:	fab2 f282 	clz	r2, r2
 8001a50:	2101      	movs	r1, #1
 8001a52:	f002 021f 	and.w	r2, r2, #31
 8001a56:	fa01 f202 	lsl.w	r2, r1, r2
 8001a5a:	421a      	tst	r2, r3
 8001a5c:	d105      	bne.n	8001a6a <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8001a5e:	f000 fbe5 	bl	800222c <HAL_GetTick>
 8001a62:	1b40      	subs	r0, r0, r5
 8001a64:	2864      	cmp	r0, #100	; 0x64
 8001a66:	d9da      	bls.n	8001a1e <HAL_RCC_OscConfig+0x232>
 8001a68:	e730      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
          }      
        } 

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6c:	21f8      	movs	r1, #248	; 0xf8
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a74:	fab1 f181 	clz	r1, r1
 8001a78:	6963      	ldr	r3, [r4, #20]
 8001a7a:	b2c9      	uxtb	r1, r1
 8001a7c:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a80:	408b      	lsls	r3, r1
 8001a82:	4313      	orrs	r3, r2
 8001a84:	4a1a      	ldr	r2, [pc, #104]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	e029      	b.n	8001ade <HAL_RCC_OscConfig+0x2f2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8c:	f000 fbce 	bl	800222c <HAL_GetTick>
 8001a90:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a92:	2302      	movs	r3, #2
 8001a94:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001a98:	fab3 f383 	clz	r3, r3
      
        /* Wait till HSI is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9c:	f043 0320 	orr.w	r3, r3, #32
 8001aa0:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <HAL_RCC_OscConfig+0x304>)
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x2c2>
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	e005      	b.n	8001aba <HAL_RCC_OscConfig+0x2ce>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aae:	2202      	movs	r2, #2
 8001ab0:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001ab4:	fab2 f282 	clz	r2, r2
 8001ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aba:	2202      	movs	r2, #2
 8001abc:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001ac0:	fab2 f282 	clz	r2, r2
 8001ac4:	2101      	movs	r1, #1
 8001ac6:	f002 021f 	and.w	r2, r2, #31
 8001aca:	fa01 f202 	lsl.w	r2, r1, r2
 8001ace:	421a      	tst	r2, r3
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x2f2>
        {
          if((HAL_GetTick()-tickstart) > HSI_TIMEOUT_VALUE)
 8001ad2:	f000 fbab 	bl	800222c <HAL_GetTick>
 8001ad6:	1b40      	subs	r0, r0, r5
 8001ad8:	2864      	cmp	r0, #100	; 0x64
 8001ada:	d9da      	bls.n	8001a92 <HAL_RCC_OscConfig+0x2a6>
 8001adc:	e6f6      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ade:	6823      	ldr	r3, [r4, #0]
 8001ae0:	0719      	lsls	r1, r3, #28
 8001ae2:	d40b      	bmi.n	8001afc <HAL_RCC_OscConfig+0x310>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	075a      	lsls	r2, r3, #29
 8001ae8:	f140 80b6 	bpl.w	8001c58 <HAL_RCC_OscConfig+0x46c>
 8001aec:	e04e      	b.n	8001b8c <HAL_RCC_OscConfig+0x3a0>
 8001aee:	bf00      	nop
 8001af0:	40021000 	.word	0x40021000
 8001af4:	40021002 	.word	0x40021002
 8001af8:	42420000 	.word	0x42420000
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001afc:	69a2      	ldr	r2, [r4, #24]
 8001afe:	4bbb      	ldr	r3, [pc, #748]	; (8001dec <HAL_RCC_OscConfig+0x600>)
 8001b00:	b312      	cbz	r2, 8001b48 <HAL_RCC_OscConfig+0x35c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001b06:	f000 fb91 	bl	800222c <HAL_GetTick>
 8001b0a:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b12:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	2302      	movs	r3, #2
 8001b18:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b1c:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b20:	4bb3      	ldr	r3, [pc, #716]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	2202      	movs	r2, #2
 8001b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b26:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b2a:	fab2 f282 	clz	r2, r2
 8001b2e:	2101      	movs	r1, #1
 8001b30:	f002 021f 	and.w	r2, r2, #31
 8001b34:	fa01 f202 	lsl.w	r2, r1, r2
 8001b38:	421a      	tst	r2, r3
 8001b3a:	d1d3      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f000 fb76 	bl	800222c <HAL_GetTick>
 8001b40:	1b40      	subs	r0, r0, r5
 8001b42:	2864      	cmp	r0, #100	; 0x64
 8001b44:	d9e2      	bls.n	8001b0c <HAL_RCC_OscConfig+0x320>
 8001b46:	e6c1      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b48:	601a      	str	r2, [r3, #0]
      
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001b4a:	f000 fb6f 	bl	800222c <HAL_GetTick>
 8001b4e:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b50:	2302      	movs	r3, #2
 8001b52:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b56:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b64:	4ba2      	ldr	r3, [pc, #648]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b66:	2202      	movs	r2, #2
 8001b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b6a:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	fab2 f282 	clz	r2, r2
 8001b72:	2101      	movs	r1, #1
 8001b74:	f002 021f 	and.w	r2, r2, #31
 8001b78:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7c:	421a      	tst	r2, r3
 8001b7e:	d0b1      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick()-tickstart) > LSI_TIMEOUT_VALUE)
 8001b80:	f000 fb54 	bl	800222c <HAL_GetTick>
 8001b84:	1b40      	subs	r0, r0, r5
 8001b86:	2864      	cmp	r0, #100	; 0x64
 8001b88:	d9e2      	bls.n	8001b50 <HAL_RCC_OscConfig+0x364>
 8001b8a:	e69f      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock */
    __PWR_CLK_ENABLE();
 8001b8c:	4b98      	ldr	r3, [pc, #608]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b94:	61da      	str	r2, [r3, #28]

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b96:	f5a3 33d0 	sub.w	r3, r3, #106496	; 0x1a000
 8001b9a:	681a      	ldr	r2, [r3, #0]
 8001b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ba0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ba2:	f000 fb43 	bl	800222c <HAL_GetTick>
 8001ba6:	4605      	mov	r5, r0
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001ba8:	4b92      	ldr	r3, [pc, #584]	; (8001df4 <HAL_RCC_OscConfig+0x608>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	05db      	lsls	r3, r3, #23
 8001bae:	d557      	bpl.n	8001c60 <HAL_RCC_OscConfig+0x474>
        return HAL_TIMEOUT;
      }      
    }

    /* Reset LSEON and LSEBYP bits before configuring the LSE ----------------*/
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);
 8001bb0:	4b8f      	ldr	r3, [pc, #572]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 8001bb2:	6a1a      	ldr	r2, [r3, #32]
 8001bb4:	f022 0205 	bic.w	r2, r2, #5
 8001bb8:	621a      	str	r2, [r3, #32]
    
    /* Get timeout */
    tickstart = HAL_GetTick();
 8001bba:	f000 fb37 	bl	800222c <HAL_GetTick>
 8001bbe:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bca:	2302      	movs	r3, #2
 8001bcc:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	fab3 f383 	clz	r3, r3
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bd8:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	4b84      	ldr	r3, [pc, #528]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001be0:	f04f 0202 	mov.w	r2, #2
 8001be4:	bf0c      	ite	eq
 8001be6:	6a1b      	ldreq	r3, [r3, #32]
 8001be8:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 8001bea:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001bee:	fab2 f282 	clz	r2, r2
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	f002 021f 	and.w	r2, r2, #31
 8001bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8001bfc:	421a      	tst	r2, r3
 8001bfe:	d135      	bne.n	8001c6c <HAL_RCC_OscConfig+0x480>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c00:	4a7b      	ldr	r2, [pc, #492]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 8001c02:	68e3      	ldr	r3, [r4, #12]
 8001c04:	6a11      	ldr	r1, [r2, #32]
 8001c06:	f021 0105 	bic.w	r1, r1, #5
 8001c0a:	4319      	orrs	r1, r3
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c0c:	2b01      	cmp	r3, #1
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0e:	6211      	str	r1, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001c10:	d13c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001c12:	f000 fb0b 	bl	800222c <HAL_GetTick>
 8001c16:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	2302      	movs	r3, #2
 8001c1a:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c1e:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	2302      	movs	r3, #2
 8001c24:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c30:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	4b6e      	ldr	r3, [pc, #440]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c38:	f04f 0202 	mov.w	r2, #2
 8001c3c:	bf0c      	ite	eq
 8001c3e:	6a1b      	ldreq	r3, [r3, #32]
 8001c40:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 8001c42:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c46:	fab2 f282 	clz	r2, r2
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	f002 021f 	and.w	r2, r2, #31
 8001c50:	fa01 f202 	lsl.w	r2, r1, r2
 8001c54:	421a      	tst	r2, r3
 8001c56:	d011      	beq.n	8001c7c <HAL_RCC_OscConfig+0x490>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c58:	69e3      	ldr	r3, [r4, #28]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d141      	bne.n	8001ce2 <HAL_RCC_OscConfig+0x4f6>
 8001c5e:	e094      	b.n	8001d8a <HAL_RCC_OscConfig+0x59e>
    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
    
    while((PWR->CR & PWR_CR_DBP) == RESET)
    {
      if((HAL_GetTick()-tickstart) > DBP_TIMEOUT_VALUE)
 8001c60:	f000 fae4 	bl	800222c <HAL_GetTick>
 8001c64:	1b40      	subs	r0, r0, r5
 8001c66:	2864      	cmp	r0, #100	; 0x64
 8001c68:	d99e      	bls.n	8001ba8 <HAL_RCC_OscConfig+0x3bc>
 8001c6a:	e62f      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
    tickstart = HAL_GetTick();
      
    /* Wait till LSE is ready */  
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
    {
      if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8001c6c:	f000 fade 	bl	800222c <HAL_GetTick>
 8001c70:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c74:	1b40      	subs	r0, r0, r5
 8001c76:	4298      	cmp	r0, r3
 8001c78:	d9a2      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x3d4>
 8001c7a:	e627      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8001c7c:	f000 fad6 	bl	800222c <HAL_GetTick>
 8001c80:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c84:	1b40      	subs	r0, r0, r5
 8001c86:	4298      	cmp	r0, r3
 8001c88:	d9c6      	bls.n	8001c18 <HAL_RCC_OscConfig+0x42c>
 8001c8a:	e61f      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
      }
    }
    else
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8001c8c:	f000 face 	bl	800222c <HAL_GetTick>
 8001c90:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	2302      	movs	r3, #2
 8001c94:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001c98:	fab3 f383 	clz	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001ca2:	fab3 f383 	clz	r3, r3
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001caa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	4b4f      	ldr	r3, [pc, #316]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cb2:	f04f 0202 	mov.w	r2, #2
 8001cb6:	bf0c      	ite	eq
 8001cb8:	6a1b      	ldreq	r3, [r3, #32]
 8001cba:	6a5b      	ldrne	r3, [r3, #36]	; 0x24
 8001cbc:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001cc0:	fab2 f282 	clz	r2, r2
 8001cc4:	2101      	movs	r1, #1
 8001cc6:	f002 021f 	and.w	r2, r2, #31
 8001cca:	fa01 f202 	lsl.w	r2, r1, r2
 8001cce:	421a      	tst	r2, r3
 8001cd0:	d0c2      	beq.n	8001c58 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick()-tickstart) > LSE_TIMEOUT_VALUE)
 8001cd2:	f000 faab 	bl	800222c <HAL_GetTick>
 8001cd6:	f241 3388 	movw	r3, #5000	; 0x1388
 8001cda:	1b40      	subs	r0, r0, r5
 8001cdc:	4298      	cmp	r0, r3
 8001cde:	d9d8      	bls.n	8001c92 <HAL_RCC_OscConfig+0x4a6>
 8001ce0:	e5f4      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ce2:	4a43      	ldr	r2, [pc, #268]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 8001ce4:	6852      	ldr	r2, [r2, #4]
 8001ce6:	f002 020c 	and.w	r2, r2, #12
 8001cea:	2a08      	cmp	r2, #8
 8001cec:	f43f adbc 	beq.w	8001868 <HAL_RCC_OscConfig+0x7c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	4b41      	ldr	r3, [pc, #260]	; (8001df8 <HAL_RCC_OscConfig+0x60c>)
 8001cf4:	f04f 0200 	mov.w	r2, #0
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cf8:	601a      	str	r2, [r3, #0]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cfa:	d164      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x5da>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cfc:	f000 fa96 	bl	800222c <HAL_GetTick>
 8001d00:	4605      	mov	r5, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d06:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001d0a:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0e:	f043 0320 	orr.w	r3, r3, #32
 8001d12:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	4b35      	ldr	r3, [pc, #212]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 8001d1a:	d138      	bne.n	8001d8e <HAL_RCC_OscConfig+0x5a2>
 8001d1c:	681a      	ldr	r2, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d22:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	fab1 f181 	clz	r1, r1
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	f001 011f 	and.w	r1, r1, #31
 8001d30:	fa03 f101 	lsl.w	r1, r3, r1
 8001d34:	4211      	tst	r1, r2
 8001d36:	d132      	bne.n	8001d9e <HAL_RCC_OscConfig+0x5b2>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d38:	4a2d      	ldr	r2, [pc, #180]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 8001d3a:	6a25      	ldr	r5, [r4, #32]
 8001d3c:	6850      	ldr	r0, [r2, #4]
 8001d3e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001d40:	f420 1074 	bic.w	r0, r0, #3997696	; 0x3d0000
 8001d44:	4329      	orrs	r1, r5
 8001d46:	4301      	orrs	r1, r0
 8001d48:	6051      	str	r1, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d4a:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <HAL_RCC_OscConfig+0x60c>)
 8001d4c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d4e:	f000 fa6d 	bl	800222c <HAL_GetTick>
 8001d52:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d58:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001d5c:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d60:	f043 0320 	orr.w	r3, r3, #32
 8001d64:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	4b21      	ldr	r3, [pc, #132]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 8001d6c:	d11d      	bne.n	8001daa <HAL_RCC_OscConfig+0x5be>
 8001d6e:	681b      	ldr	r3, [r3, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d74:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	fab2 f282 	clz	r2, r2
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	f002 021f 	and.w	r2, r2, #31
 8001d82:	fa01 f202 	lsl.w	r2, r1, r2
 8001d86:	421a      	tst	r2, r3
 8001d88:	d017      	beq.n	8001dba <HAL_RCC_OscConfig+0x5ce>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	bd38      	pop	{r3, r4, r5, pc}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d8e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d92:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001d96:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d9c:	e7bf      	b.n	8001d1e <HAL_RCC_OscConfig+0x532>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8001d9e:	f000 fa45 	bl	800222c <HAL_GetTick>
 8001da2:	1b40      	subs	r0, r0, r5
 8001da4:	2864      	cmp	r0, #100	; 0x64
 8001da6:	d9ac      	bls.n	8001d02 <HAL_RCC_OscConfig+0x516>
 8001da8:	e590      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dae:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	fab2 f282 	clz	r2, r2

        /* Get timeout */
        tickstart = HAL_GetTick();
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db8:	e7da      	b.n	8001d70 <HAL_RCC_OscConfig+0x584>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8001dba:	f000 fa37 	bl	800222c <HAL_GetTick>
 8001dbe:	1b00      	subs	r0, r0, r4
 8001dc0:	2864      	cmp	r0, #100	; 0x64
 8001dc2:	d9c7      	bls.n	8001d54 <HAL_RCC_OscConfig+0x568>
 8001dc4:	e582      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dc6:	f000 fa31 	bl	800222c <HAL_GetTick>
 8001dca:	4604      	mov	r4, r0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dd0:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001dd4:	fab3 f383 	clz	r3, r3
      
        /* Wait till PLL is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dd8:	f043 0320 	orr.w	r3, r3, #32
 8001ddc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_RCC_OscConfig+0x604>)
 8001de4:	d10a      	bne.n	8001dfc <HAL_RCC_OscConfig+0x610>
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	e00f      	b.n	8001e0a <HAL_RCC_OscConfig+0x61e>
 8001dea:	bf00      	nop
 8001dec:	42420480 	.word	0x42420480
 8001df0:	40021000 	.word	0x40021000
 8001df4:	40007000 	.word	0x40007000
 8001df8:	42420060 	.word	0x42420060
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e00:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001e04:	fab2 f282 	clz	r2, r2
 8001e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e0a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001e12:	fab2 f282 	clz	r2, r2
 8001e16:	2101      	movs	r1, #1
 8001e18:	f002 021f 	and.w	r2, r2, #31
 8001e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e20:	421a      	tst	r2, r3
 8001e22:	d0b2      	beq.n	8001d8a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick()-tickstart) > PLL_TIMEOUT_VALUE)
 8001e24:	f000 fa02 	bl	800222c <HAL_GetTick>
 8001e28:	1b00      	subs	r0, r0, r4
 8001e2a:	2864      	cmp	r0, #100	; 0x64
 8001e2c:	d9ce      	bls.n	8001dcc <HAL_RCC_OscConfig+0x5e0>
 8001e2e:	e54d      	b.n	80018cc <HAL_RCC_OscConfig+0xe0>

08001e30 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e30:	4bb3      	ldr	r3, [pc, #716]	; (8002100 <HAL_RCC_ClockConfig+0x2d0>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	f002 0207 	and.w	r2, r2, #7
 8001e38:	4291      	cmp	r1, r2
  *         If a clock source which is not yet ready is selected, the switch will
  *         occur when the clock source will be ready.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3a:	b570      	push	{r4, r5, r6, lr}
 8001e3c:	4604      	mov	r4, r0
 8001e3e:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001e40:	f240 80b4 	bls.w	8001fac <HAL_RCC_ClockConfig+0x17c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	f022 0207 	bic.w	r2, r2, #7
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	428b      	cmp	r3, r1
 8001e56:	d001      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x2c>
    {
      return HAL_ERROR;
 8001e58:	2001      	movs	r0, #1
 8001e5a:	bd70      	pop	{r4, r5, r6, pc}
    }

    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	6803      	ldr	r3, [r0, #0]
 8001e5e:	0798      	lsls	r0, r3, #30
 8001e60:	d506      	bpl.n	8001e70 <HAL_RCC_ClockConfig+0x40>
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e62:	4aa8      	ldr	r2, [pc, #672]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001e64:	68a1      	ldr	r1, [r4, #8]
 8001e66:	6850      	ldr	r0, [r2, #4]
 8001e68:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8001e6c:	4301      	orrs	r1, r0
 8001e6e:	6051      	str	r1, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e70:	07d9      	lsls	r1, r3, #31
 8001e72:	d40b      	bmi.n	8001e8c <HAL_RCC_ClockConfig+0x5c>
      return HAL_ERROR;
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	6823      	ldr	r3, [r4, #0]
 8001e76:	075a      	lsls	r2, r3, #29
 8001e78:	f140 8146 	bpl.w	8002108 <HAL_RCC_ClockConfig+0x2d8>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e7c:	4aa1      	ldr	r2, [pc, #644]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001e7e:	68e1      	ldr	r1, [r4, #12]
 8001e80:	6850      	ldr	r0, [r2, #4]
 8001e82:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8001e86:	4301      	orrs	r1, r0
 8001e88:	6051      	str	r1, [r2, #4]
 8001e8a:	e13d      	b.n	8002108 <HAL_RCC_ClockConfig+0x2d8>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8c:	6863      	ldr	r3, [r4, #4]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d118      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x94>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e96:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001e9a:	fab2 f282 	clz	r2, r2
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	f042 0220 	orr.w	r2, r2, #32
 8001ea2:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8001ea6:	2a01      	cmp	r2, #1
 8001ea8:	4a96      	ldr	r2, [pc, #600]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001eaa:	d101      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0x80>
 8001eac:	6812      	ldr	r2, [r2, #0]
 8001eae:	e006      	b.n	8001ebe <HAL_RCC_ClockConfig+0x8e>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb0:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001eb4:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001eb8:	fab1 f181 	clz	r1, r1
 8001ebc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8001ec2:	e02f      	b.n	8001f24 <HAL_RCC_ClockConfig+0xf4>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d118      	bne.n	8001efa <HAL_RCC_ClockConfig+0xca>
 8001ec8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001ed0:	fab2 f282 	clz	r2, r2
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed4:	f042 0220 	orr.w	r2, r2, #32
 8001ed8:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8001edc:	2a01      	cmp	r2, #1
 8001ede:	4a89      	ldr	r2, [pc, #548]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0xb6>
 8001ee2:	6812      	ldr	r2, [r2, #0]
 8001ee4:	e006      	b.n	8001ef4 <HAL_RCC_ClockConfig+0xc4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001eea:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001eee:	fab1 f181 	clz	r1, r1
 8001ef2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ef8:	e014      	b.n	8001f24 <HAL_RCC_ClockConfig+0xf4>
 8001efa:	2202      	movs	r2, #2
 8001efc:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001f00:	fab2 f282 	clz	r2, r2
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	f042 0220 	orr.w	r2, r2, #32
 8001f08:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8001f0c:	2a01      	cmp	r2, #1
 8001f0e:	4a7d      	ldr	r2, [pc, #500]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_ClockConfig+0xe6>
 8001f12:	6812      	ldr	r2, [r2, #0]
 8001f14:	e005      	b.n	8001f22 <HAL_RCC_ClockConfig+0xf2>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f16:	2102      	movs	r1, #2
 8001f18:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001f1c:	fab1 f181 	clz	r1, r1
 8001f20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	2102      	movs	r1, #2
 8001f24:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001f28:	fab1 f181 	clz	r1, r1
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	f001 011f 	and.w	r1, r1, #31
 8001f32:	fa00 f101 	lsl.w	r1, r0, r1
 8001f36:	4211      	tst	r1, r2
 8001f38:	d08e      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4a72      	ldr	r2, [pc, #456]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001f3c:	6851      	ldr	r1, [r2, #4]
 8001f3e:	f021 0103 	bic.w	r1, r1, #3
 8001f42:	430b      	orrs	r3, r1
 8001f44:	6053      	str	r3, [r2, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001f46:	f000 f971 	bl	800222c <HAL_GetTick>
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f4a:	6863      	ldr	r3, [r4, #4]
 8001f4c:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 8001f4e:	4605      	mov	r5, r0
      
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f50:	d10e      	bne.n	8001f70 <HAL_RCC_ClockConfig+0x140>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f52:	4b6c      	ldr	r3, [pc, #432]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d08a      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x44>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f5e:	f000 f965 	bl	800222c <HAL_GetTick>
 8001f62:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f66:	1b40      	subs	r0, r0, r5
 8001f68:	4298      	cmp	r0, r3
 8001f6a:	d9f2      	bls.n	8001f52 <HAL_RCC_ClockConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f6c:	2003      	movs	r0, #3
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d00c      	beq.n	8001f8e <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f74:	4b63      	ldr	r3, [pc, #396]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f013 0f0c 	tst.w	r3, #12
 8001f7c:	d10e      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x16c>
 8001f7e:	e779      	b.n	8001e74 <HAL_RCC_ClockConfig+0x44>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f000 f954 	bl	800222c <HAL_GetTick>
 8001f84:	f241 3388 	movw	r3, #5000	; 0x1388
 8001f88:	1b40      	subs	r0, r0, r5
 8001f8a:	4298      	cmp	r0, r3
 8001f8c:	d8ee      	bhi.n	8001f6c <HAL_RCC_ClockConfig+0x13c>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f8e:	4b5d      	ldr	r3, [pc, #372]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d1f2      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x150>
 8001f9a:	e76b      	b.n	8001e74 <HAL_RCC_ClockConfig+0x44>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f9c:	f000 f946 	bl	800222c <HAL_GetTick>
 8001fa0:	f241 3388 	movw	r3, #5000	; 0x1388
 8001fa4:	1b40      	subs	r0, r0, r5
 8001fa6:	4298      	cmp	r0, r3
 8001fa8:	d9e4      	bls.n	8001f74 <HAL_RCC_ClockConfig+0x144>
 8001faa:	e7df      	b.n	8001f6c <HAL_RCC_ClockConfig+0x13c>
  }
  /* Decreasing the CPU frequency */
  else
  {
    /*-------------------------- HCLK Configuration ----------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	6803      	ldr	r3, [r0, #0]
 8001fae:	079e      	lsls	r6, r3, #30
 8001fb0:	d506      	bpl.n	8001fc0 <HAL_RCC_ClockConfig+0x190>
    {
      assert_param(IS_RCC_SYSCLK_DIV(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fb2:	4a54      	ldr	r2, [pc, #336]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001fb4:	68a1      	ldr	r1, [r4, #8]
 8001fb6:	6850      	ldr	r0, [r2, #4]
 8001fb8:	f020 00f0 	bic.w	r0, r0, #240	; 0xf0
 8001fbc:	4301      	orrs	r1, r0
 8001fbe:	6051      	str	r1, [r2, #4]
    }

    /*------------------------- SYSCLK Configuration ---------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fc0:	07d8      	lsls	r0, r3, #31
 8001fc2:	d40c      	bmi.n	8001fde <HAL_RCC_ClockConfig+0x1ae>
        }
      }
    }

    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc4:	4b4e      	ldr	r3, [pc, #312]	; (8002100 <HAL_RCC_ClockConfig+0x2d0>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	f022 0207 	bic.w	r2, r2, #7
 8001fcc:	432a      	orrs	r2, r5
 8001fce:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	42ab      	cmp	r3, r5
 8001fd8:	f47f af3e 	bne.w	8001e58 <HAL_RCC_ClockConfig+0x28>
 8001fdc:	e74a      	b.n	8001e74 <HAL_RCC_ClockConfig+0x44>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
    {
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	6863      	ldr	r3, [r4, #4]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d118      	bne.n	8002016 <HAL_RCC_ClockConfig+0x1e6>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fe8:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8001fec:	fab2 f282 	clz	r2, r2
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff0:	f042 0220 	orr.w	r2, r2, #32
 8001ff4:	f3c2 1242 	ubfx	r2, r2, #5, #3
 8001ff8:	2a01      	cmp	r2, #1
 8001ffa:	4a42      	ldr	r2, [pc, #264]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8001ffc:	d101      	bne.n	8002002 <HAL_RCC_ClockConfig+0x1d2>
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	e006      	b.n	8002010 <HAL_RCC_ClockConfig+0x1e0>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002006:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800200a:	fab1 f181 	clz	r1, r1
 800200e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8002014:	e02f      	b.n	8002076 <HAL_RCC_ClockConfig+0x246>
        {
          return HAL_ERROR;
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002016:	2b02      	cmp	r3, #2
 8002018:	d118      	bne.n	800204c <HAL_RCC_ClockConfig+0x21c>
 800201a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800201e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002022:	fab2 f282 	clz	r2, r2
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002026:	f042 0220 	orr.w	r2, r2, #32
 800202a:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800202e:	2a01      	cmp	r2, #1
 8002030:	4a34      	ldr	r2, [pc, #208]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8002032:	d101      	bne.n	8002038 <HAL_RCC_ClockConfig+0x208>
 8002034:	6812      	ldr	r2, [r2, #0]
 8002036:	e006      	b.n	8002046 <HAL_RCC_ClockConfig+0x216>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002038:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800203c:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002040:	fab1 f181 	clz	r1, r1
 8002044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800204a:	e014      	b.n	8002076 <HAL_RCC_ClockConfig+0x246>
 800204c:	2202      	movs	r2, #2
 800204e:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002052:	fab2 f282 	clz	r2, r2
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	f042 0220 	orr.w	r2, r2, #32
 800205a:	f3c2 1242 	ubfx	r2, r2, #5, #3
 800205e:	2a01      	cmp	r2, #1
 8002060:	4a28      	ldr	r2, [pc, #160]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x238>
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	e005      	b.n	8002074 <HAL_RCC_ClockConfig+0x244>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002068:	2102      	movs	r1, #2
 800206a:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800206e:	fab1 f181 	clz	r1, r1
 8002072:	6a52      	ldr	r2, [r2, #36]	; 0x24
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	2102      	movs	r1, #2
 8002076:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800207a:	fab1 f181 	clz	r1, r1
 800207e:	2001      	movs	r0, #1
 8002080:	f001 011f 	and.w	r1, r1, #31
 8002084:	fa00 f101 	lsl.w	r1, r0, r1
 8002088:	4211      	tst	r1, r2
 800208a:	f43f aee5 	beq.w	8001e58 <HAL_RCC_ClockConfig+0x28>
        {
          return HAL_ERROR;
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800208e:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 8002090:	6851      	ldr	r1, [r2, #4]
 8002092:	f021 0103 	bic.w	r1, r1, #3
 8002096:	430b      	orrs	r3, r1
 8002098:	6053      	str	r3, [r2, #4]

      /* Get timeout */
      tickstart = HAL_GetTick();
 800209a:	f000 f8c7 	bl	800222c <HAL_GetTick>

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	6863      	ldr	r3, [r4, #4]
 80020a0:	2b01      	cmp	r3, #1
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);

      /* Get timeout */
      tickstart = HAL_GetTick();
 80020a2:	4606      	mov	r6, r0

      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a4:	d10d      	bne.n	80020c2 <HAL_RCC_ClockConfig+0x292>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 030c 	and.w	r3, r3, #12
 80020ae:	2b04      	cmp	r3, #4
 80020b0:	d088      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x194>
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b2:	f000 f8bb 	bl	800222c <HAL_GetTick>
 80020b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80020ba:	1b80      	subs	r0, r0, r6
 80020bc:	4298      	cmp	r0, r3
 80020be:	d9f2      	bls.n	80020a6 <HAL_RCC_ClockConfig+0x276>
 80020c0:	e754      	b.n	8001f6c <HAL_RCC_ClockConfig+0x13c>
          {
            return HAL_TIMEOUT;
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d00d      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f013 0f0c 	tst.w	r3, #12
 80020ce:	d10f      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x2c0>
 80020d0:	e778      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x194>
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d2:	f000 f8ab 	bl	800222c <HAL_GetTick>
 80020d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80020da:	1b80      	subs	r0, r0, r6
 80020dc:	4298      	cmp	r0, r3
 80020de:	f63f af45 	bhi.w	8001f6c <HAL_RCC_ClockConfig+0x13c>
          }
        }
      }
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <HAL_RCC_ClockConfig+0x2d4>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d1f1      	bne.n	80020d2 <HAL_RCC_ClockConfig+0x2a2>
 80020ee:	e769      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x194>
      }
      else
      {
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if((HAL_GetTick()-tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f000 f89c 	bl	800222c <HAL_GetTick>
 80020f4:	f241 3388 	movw	r3, #5000	; 0x1388
 80020f8:	1b80      	subs	r0, r0, r6
 80020fa:	4298      	cmp	r0, r3
 80020fc:	d9e3      	bls.n	80020c6 <HAL_RCC_ClockConfig+0x296>
 80020fe:	e735      	b.n	8001f6c <HAL_RCC_ClockConfig+0x13c>
 8002100:	40022000 	.word	0x40022000
 8002104:	40021000 	.word	0x40021000
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	0719      	lsls	r1, r3, #28
 800210a:	d507      	bpl.n	800211c <HAL_RCC_ClockConfig+0x2ec>
  {
    assert_param(IS_RCC_HCLK_DIV(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_RCC_ClockConfig+0x2f8>)
 800210e:	6921      	ldr	r1, [r4, #16]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8002116:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800211a:	605a      	str	r2, [r3, #4]
  }

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800211c:	200f      	movs	r0, #15
 800211e:	f000 f858 	bl	80021d2 <HAL_InitTick>

  return HAL_OK;
 8002122:	2000      	movs	r0, #0
}
 8002124:	bd70      	pop	{r4, r5, r6, pc}
 8002126:	bf00      	nop
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0, prediv = 0, pllmul = 0, pllclk = 0;
  uint32_t sysclockfreq = 0;

  tmpreg = RCC->CFGR;
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <HAL_RCC_GetSysClockFreq+0x58>)
 800212e:	685b      	ldr	r3, [r3, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002130:	f003 020c 	and.w	r2, r3, #12
 8002134:	2a08      	cmp	r2, #8
 8002136:	d122      	bne.n	800217e <HAL_RCC_GetSysClockFreq+0x52>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002138:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800213c:	fa92 f2a2 	rbit	r2, r2
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 8002140:	fab2 f282 	clz	r2, r2
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002144:	f403 1170 	and.w	r1, r3, #3932160	; 0x3c0000
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	fa21 f202 	lsr.w	r2, r1, r2
 800214e:	490e      	ldr	r1, [pc, #56]	; (8002188 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002150:	5c8a      	ldrb	r2, [r1, r2]
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002152:	490c      	ldr	r1, [pc, #48]	; (8002184 <HAL_RCC_GetSysClockFreq+0x58>)
 8002154:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002156:	210f      	movs	r1, #15
 8002158:	fa91 f1a1 	rbit	r1, r1
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 800215c:	fab1 f181 	clz	r1, r1
 8002160:	f000 000f 	and.w	r0, r0, #15
 8002164:	b2c9      	uxtb	r1, r1
 8002166:	fa20 f101 	lsr.w	r1, r0, r1
 800216a:	4808      	ldr	r0, [pc, #32]	; (800218c <HAL_RCC_GetSysClockFreq+0x60>)
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800216c:	03db      	lsls	r3, r3, #15
    sysclockfreq = HSE_VALUE;
    break;

  case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800216e:	5c41      	ldrb	r1, [r0, r1]
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8002170:	bf4a      	itet	mi
 8002172:	4807      	ldrmi	r0, [pc, #28]	; (8002190 <HAL_RCC_GetSysClockFreq+0x64>)
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 8002174:	4807      	ldrpl	r0, [pc, #28]	; (8002194 <HAL_RCC_GetSysClockFreq+0x68>)
    pllmul = PLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
    prediv = PredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
    if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
    {
      /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
      pllclk = (HSE_VALUE/prediv) * pllmul;
 8002176:	fbb0 f0f1 	udivmi	r0, r0, r1
    }
    else
    {
      /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
      pllclk = (HSI_VALUE >> 1) * pllmul;
 800217a:	4350      	muls	r0, r2
 800217c:	4770      	bx	lr

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
  case RCC_SYSCLKSOURCE_STATUS_HSE:    /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800217e:	4804      	ldr	r0, [pc, #16]	; (8002190 <HAL_RCC_GetSysClockFreq+0x64>)
  default:
    sysclockfreq = HSI_VALUE;
    break;
  }
  return sysclockfreq;
}
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40021000 	.word	0x40021000
 8002188:	080178a5 	.word	0x080178a5
 800218c:	08017895 	.word	0x08017895
 8002190:	007a1200 	.word	0x007a1200
 8002194:	003d0900 	.word	0x003d0900

08002198 <HAL_RCC_GetHCLKFreq>:
  *                       
  * @param  None
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002198:	b508      	push	{r3, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> APBAHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800219a:	f7ff ffc7 	bl	800212c <HAL_RCC_GetSysClockFreq>
 800219e:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80021a0:	685a      	ldr	r2, [r3, #4]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	23f0      	movs	r3, #240	; 0xf0
 80021a4:	fa93 f3a3 	rbit	r3, r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
   uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	fa22 f303 	lsr.w	r3, r2, r3
 80021b6:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_RCC_GetHCLKFreq+0x30>)
 80021b8:	5cd3      	ldrb	r3, [r2, r3]
 80021ba:	40d8      	lsrs	r0, r3
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <HAL_RCC_GetHCLKFreq+0x34>)
 80021be:	6018      	str	r0, [r3, #0]
  return SystemCoreClock;
}
 80021c0:	bd08      	pop	{r3, pc}
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08017885 	.word	0x08017885
 80021cc:	20000014 	.word	0x20000014

080021d0 <HAL_MspInit>:
  * @brief  Initializes the MSP.
  * @param  None
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80021d0:	4770      	bx	lr

080021d2 <HAL_InitTick>:
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)

{
 80021d2:	b510      	push	{r4, lr}
 80021d4:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80021d6:	f7ff ffdf 	bl	8002198 <HAL_RCC_GetHCLKFreq>
 80021da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021de:	fbb0 f0f3 	udiv	r0, r0, r3
 80021e2:	f000 f887 	bl	80022f4 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80021e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021ea:	4621      	mov	r1, r4
 80021ec:	2200      	movs	r2, #0
 80021ee:	f000 f843 	bl	8002278 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 80021f2:	2000      	movs	r0, #0
 80021f4:	bd10      	pop	{r4, pc}
	...

080021f8 <HAL_Init>:
  * @note                  
  * @param  None
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f8:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021fa:	4b07      	ldr	r3, [pc, #28]	; (8002218 <HAL_Init+0x20>)
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	f042 0210 	orr.w	r2, r2, #16
 8002202:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002204:	2003      	movs	r0, #3
 8002206:	f000 f825 	bl	8002254 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220a:	200f      	movs	r0, #15
 800220c:	f7ff ffe1 	bl	80021d2 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002210:	f7ff ffde 	bl	80021d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8002214:	2000      	movs	r0, #0
 8002216:	bd08      	pop	{r3, pc}
 8002218:	40022000 	.word	0x40022000

0800221c <HAL_IncTick>:
  * @param  None
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <HAL_IncTick+0xc>)
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	3201      	adds	r2, #1
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000b90 	.word	0x20000b90

0800222c <HAL_GetTick>:
  * @param  None
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800222c:	4b01      	ldr	r3, [pc, #4]	; (8002234 <HAL_GetTick+0x8>)
 800222e:	6818      	ldr	r0, [r3, #0]
}
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	20000b90 	.word	0x20000b90

08002238 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8002238:	b513      	push	{r0, r1, r4, lr}
 800223a:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 800223c:	f7ff fff6 	bl	800222c <HAL_GetTick>
 8002240:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8002242:	f7ff fff3 	bl	800222c <HAL_GetTick>
 8002246:	9b01      	ldr	r3, [sp, #4]
 8002248:	1b00      	subs	r0, r0, r4
 800224a:	4298      	cmp	r0, r3
 800224c:	d3f9      	bcc.n	8002242 <HAL_Delay+0xa>
  {
  }
}
 800224e:	b002      	add	sp, #8
 8002250:	bd10      	pop	{r4, pc}
	...

08002254 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002256:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8002258:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800225c:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 800225e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8002266:	f000 0007 	and.w	r0, r0, #7

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
  reg_value  =  (reg_value                                 |
 800226a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 800226e:	60d3      	str	r3, [r2, #12]
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <HAL_NVIC_SetPriority>:

    \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grouping field */
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <HAL_NVIC_SetPriority+0x5c>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002280:	b570      	push	{r4, r5, r6, lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002282:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
 8002284:	f1c3 0407 	rsb	r4, r3, #7
 8002288:	2c04      	cmp	r4, #4
 800228a:	bf28      	it	cs
 800228c:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 800228e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 8002290:	f04f 0501 	mov.w	r5, #1
  uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;
 8002294:	bf8c      	ite	hi
 8002296:	3b03      	subhi	r3, #3
 8002298:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 800229a:	fa05 f404 	lsl.w	r4, r5, r4
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 800229e:	fa05 f603 	lsl.w	r6, r5, r3

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80022a2:	3c01      	subs	r4, #1
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80022a4:	3e01      	subs	r6, #1

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80022a6:	4021      	ands	r1, r4
           ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
 80022a8:	4032      	ands	r2, r6

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
           ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;
  SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

  return (
 80022ae:	4313      	orrs	r3, r2
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
 80022b0:	2800      	cmp	r0, #0
 80022b2:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80022b6:	da05      	bge.n	80022c4 <HAL_NVIC_SetPriority+0x4c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	f000 000f 	and.w	r0, r0, #15
 80022be:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <HAL_NVIC_SetPriority+0x60>)
 80022c0:	541a      	strb	r2, [r3, r0]
 80022c2:	bd70      	pop	{r4, r5, r6, pc}
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80022c4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80022c8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 80022d2:	bd70      	pop	{r4, r5, r6, pc}
 80022d4:	e000ed00 	.word	0xe000ed00
 80022d8:	e000ed14 	.word	0xe000ed14

080022dc <HAL_NVIC_EnableIRQ>:
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80022dc:	0942      	lsrs	r2, r0, #5
 80022de:	2301      	movs	r3, #1
 80022e0:	f000 001f 	and.w	r0, r0, #31
 80022e4:	fa03 f000 	lsl.w	r0, r3, r0
 80022e8:	4b01      	ldr	r3, [pc, #4]	; (80022f0 <HAL_NVIC_EnableIRQ+0x14>)
 80022ea:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80022ee:	4770      	bx	lr
 80022f0:	e000e100 	.word	0xe000e100

080022f4 <HAL_SYSTICK_Config>:
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 80022f4:	3801      	subs	r0, #1
 80022f6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80022fa:	d20a      	bcs.n	8002312 <HAL_SYSTICK_Config+0x1e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_SYSTICK_Config+0x24>)
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80022fe:	4a07      	ldr	r2, [pc, #28]	; (800231c <HAL_SYSTICK_Config+0x28>)
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
 8002300:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8002302:	21f0      	movs	r1, #240	; 0xf0
 8002304:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002308:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	2207      	movs	r2, #7
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 800230c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	4770      	bx	lr
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
 8002312:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	e000e010 	.word	0xe000e010
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  for (position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002324:	f8d1 c000 	ldr.w	ip, [r1]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002328:	2300      	movs	r3, #0
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800232a:	2201      	movs	r2, #1
 800232c:	409a      	lsls	r2, r3
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800232e:	ea02 040c 	and.w	r4, r2, ip
 
    if (iocurrent == ioposition)
 8002332:	4294      	cmp	r4, r2
 8002334:	f040 80a0 	bne.w	8002478 <HAL_GPIO_Init+0x158>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/ 
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8002338:	684a      	ldr	r2, [r1, #4]
 800233a:	f022 0710 	bic.w	r7, r2, #16
 800233e:	2f02      	cmp	r7, #2
 8002340:	d113      	bne.n	800236a <HAL_GPIO_Init+0x4a>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8002342:	08de      	lsrs	r6, r3, #3
 8002344:	eb00 0686 	add.w	r6, r0, r6, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002348:	f003 0807 	and.w	r8, r3, #7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 800234c:	6a35      	ldr	r5, [r6, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800234e:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8002352:	f04f 090f 	mov.w	r9, #15
 8002356:	fa09 f908 	lsl.w	r9, r9, r8
 800235a:	ea25 0909 	bic.w	r9, r5, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800235e:	690d      	ldr	r5, [r1, #16]
 8002360:	fa05 f808 	lsl.w	r8, r5, r8
 8002364:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->AFR[position >> 3] = temp;
 8002368:	6235      	str	r5, [r6, #32]
 800236a:	005d      	lsls	r5, r3, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800236c:	2603      	movs	r6, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800236e:	f8d0 9000 	ldr.w	r9, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002372:	40ae      	lsls	r6, r5
 8002374:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002376:	f002 0803 	and.w	r8, r2, #3
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800237a:	ea06 0909 	and.w	r9, r6, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800237e:	fa08 f805 	lsl.w	r8, r8, r5
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002382:	3f01      	subs	r7, #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002384:	ea49 0808 	orr.w	r8, r9, r8
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002388:	2f01      	cmp	r7, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
      GPIOx->MODER = temp;
 800238a:	f8c0 8000 	str.w	r8, [r0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800238e:	d810      	bhi.n	80023b2 <HAL_GPIO_Init+0x92>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002390:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002392:	ea06 0807 	and.w	r8, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 8002396:	68cf      	ldr	r7, [r1, #12]
 8002398:	40af      	lsls	r7, r5
 800239a:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 800239e:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a0:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a2:	ea27 0804 	bic.w	r8, r7, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80023a6:	f3c2 1700 	ubfx	r7, r2, #4, #1
 80023aa:	409f      	lsls	r7, r3
 80023ac:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OTYPER = temp;
 80023b0:	6047      	str	r7, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023b2:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80023b4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80023b6:	688f      	ldr	r7, [r1, #8]
 80023b8:	40af      	lsls	r7, r5
 80023ba:	ea46 0507 	orr.w	r5, r6, r7
      GPIOx->PUPDR = temp;
 80023be:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80023c0:	00d5      	lsls	r5, r2, #3
 80023c2:	d559      	bpl.n	8002478 <HAL_GPIO_Init+0x158>
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
 80023c4:	4d2f      	ldr	r5, [pc, #188]	; (8002484 <HAL_GPIO_Init+0x164>)
 80023c6:	69ae      	ldr	r6, [r5, #24]
 80023c8:	f046 0601 	orr.w	r6, r6, #1
 80023cc:	61ae      	str	r6, [r5, #24]
 80023ce:	f023 0603 	bic.w	r6, r3, #3
 80023d2:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80023d6:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023da:	f003 0703 	and.w	r7, r3, #3
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
 80023de:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023e0:	00bf      	lsls	r7, r7, #2
 80023e2:	f04f 080f 	mov.w	r8, #15
 80023e6:	fa08 f807 	lsl.w	r8, r8, r7
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 80023ea:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __SYSCFG_CLK_ENABLE();
  
        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023ee:	ea25 0808 	bic.w	r8, r5, r8
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
 80023f2:	d015      	beq.n	8002420 <HAL_GPIO_Init+0x100>
 80023f4:	4d24      	ldr	r5, [pc, #144]	; (8002488 <HAL_GPIO_Init+0x168>)
 80023f6:	42a8      	cmp	r0, r5
 80023f8:	d014      	beq.n	8002424 <HAL_GPIO_Init+0x104>
 80023fa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80023fe:	42a8      	cmp	r0, r5
 8002400:	d012      	beq.n	8002428 <HAL_GPIO_Init+0x108>
 8002402:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002406:	42a8      	cmp	r0, r5
 8002408:	d010      	beq.n	800242c <HAL_GPIO_Init+0x10c>
 800240a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800240e:	42a8      	cmp	r0, r5
 8002410:	d00e      	beq.n	8002430 <HAL_GPIO_Init+0x110>
 8002412:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002416:	42a8      	cmp	r0, r5
 8002418:	bf14      	ite	ne
 800241a:	2506      	movne	r5, #6
 800241c:	2505      	moveq	r5, #5
 800241e:	e008      	b.n	8002432 <HAL_GPIO_Init+0x112>
 8002420:	2500      	movs	r5, #0
 8002422:	e006      	b.n	8002432 <HAL_GPIO_Init+0x112>
 8002424:	2501      	movs	r5, #1
 8002426:	e004      	b.n	8002432 <HAL_GPIO_Init+0x112>
 8002428:	2502      	movs	r5, #2
 800242a:	e002      	b.n	8002432 <HAL_GPIO_Init+0x112>
 800242c:	2503      	movs	r5, #3
 800242e:	e000      	b.n	8002432 <HAL_GPIO_Init+0x112>
 8002430:	2504      	movs	r5, #4
 8002432:	40bd      	lsls	r5, r7
 8002434:	ea45 0508 	orr.w	r5, r5, r8
        SYSCFG->EXTICR[position >> 2] = temp;
 8002438:	60b5      	str	r5, [r6, #8]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800243a:	4e14      	ldr	r6, [pc, #80]	; (800248c <HAL_GPIO_Init+0x16c>)
 800243c:	6837      	ldr	r7, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
 800243e:	43e5      	mvns	r5, r4
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002440:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        {
          temp |= iocurrent;
 8002444:	bf14      	ite	ne
 8002446:	4327      	orrne	r7, r4
        temp |= ((uint32_t)(GET_GPIO_SOURCE(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 8002448:	402f      	andeq	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800244a:	6037      	str	r7, [r6, #0]

        temp = EXTI->EMR;
 800244c:	6877      	ldr	r7, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800244e:	0396      	lsls	r6, r2, #14
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002450:	4e0e      	ldr	r6, [pc, #56]	; (800248c <HAL_GPIO_Init+0x16c>)

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
 8002452:	bf4c      	ite	mi
 8002454:	4327      	orrmi	r7, r4
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 8002456:	402f      	andpl	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        { 
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8002458:	6077      	str	r7, [r6, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800245a:	68b7      	ldr	r7, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800245c:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        {
          temp |= iocurrent;
 8002460:	bf14      	ite	ne
 8002462:	4327      	orrne	r7, r4
        }
        EXTI->EMR = temp;
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8002464:	402f      	andeq	r7, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8002466:	60b7      	str	r7, [r6, #8]

        temp = EXTI->FTSR;
 8002468:	68f6      	ldr	r6, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800246a:	0292      	lsls	r2, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800246c:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_GPIO_Init+0x16c>)
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 800246e:	bf54      	ite	pl
 8002470:	ea05 0406 	andpl.w	r4, r5, r6
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 8002474:	4334      	orrmi	r4, r6
        }
        EXTI->FTSR = temp;
 8002476:	60d4      	str	r4, [r2, #12]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002478:	3301      	adds	r3, #1
 800247a:	2b10      	cmp	r3, #16
 800247c:	f47f af55 	bne.w	800232a <HAL_GPIO_Init+0xa>
        }
        EXTI->FTSR = temp;
      }
    }
  } 
}
 8002480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002484:	40021000 	.word	0x40021000
 8002488:	48000400 	.word	0x48000400
 800248c:	40010400 	.word	0x40010400

08002490 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002490:	6903      	ldr	r3, [r0, #16]
 8002492:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
  }
 8002494:	bf0c      	ite	eq
 8002496:	2000      	moveq	r0, #0
 8002498:	2001      	movne	r0, #1
 800249a:	4770      	bx	lr

0800249c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800249c:	b10a      	cbz	r2, 80024a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRRL = GPIO_Pin;
 800249e:	8301      	strh	r1, [r0, #24]
 80024a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
 80024a2:	8341      	strh	r1, [r0, #26]
 80024a4:	4770      	bx	lr

080024a6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80024a6:	6943      	ldr	r3, [r0, #20]
 80024a8:	4059      	eors	r1, r3
 80024aa:	6141      	str	r1, [r0, #20]
 80024ac:	4770      	bx	lr

080024ae <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{ 
 80024ae:	b538      	push	{r3, r4, r5, lr}
  uint32_t i = 0;

  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80024b0:	4604      	mov	r4, r0
 80024b2:	2800      	cmp	r0, #0
 80024b4:	d03f      	beq.n	8002536 <HAL_PCD_Init+0x88>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  hpcd->State = PCD_BUSY;
 80024b6:	2302      	movs	r3, #2
 80024b8:	f880 3141 	strb.w	r3, [r0, #321]	; 0x141
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);
 80024bc:	f002 f848 	bl	8004550 <HAL_PCD_MspInit>

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80024c0:	6860      	ldr	r0, [r4, #4]
 80024c2:	4623      	mov	r3, r4
 80024c4:	2200      	movs	r2, #0
 80024c6:	4282      	cmp	r2, r0
 80024c8:	f103 031c 	add.w	r3, r3, #28
 80024cc:	f04f 0100 	mov.w	r1, #0
 80024d0:	d008      	beq.n	80024e4 <HAL_PCD_Init+0x36>
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80024d2:	2501      	movs	r5, #1
   hpcd->IN_ep[i].num = i;
 80024d4:	731a      	strb	r2, [r3, #12]

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   /* Init ep structure */
   hpcd->IN_ep[i].is_in = 1;
 80024d6:	735d      	strb	r5, [r3, #13]
   hpcd->IN_ep[i].num = i;
   /* Control until ep is actvated */
   hpcd->IN_ep[i].type = PCD_EP_TYPE_CTRL;
 80024d8:	73d9      	strb	r1, [r3, #15]
   hpcd->IN_ep[i].maxpacket =  0;
 80024da:	6199      	str	r1, [r3, #24]
   hpcd->IN_ep[i].xfer_buff = 0;
 80024dc:	61d9      	str	r1, [r3, #28]
   hpcd->IN_ep[i].xfer_len = 0;
 80024de:	6219      	str	r1, [r3, #32]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_PCD_MspInit(hpcd);

 /* Init endpoints structures */
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80024e0:	442a      	add	r2, r5
 80024e2:	e7f0      	b.n	80024c6 <HAL_PCD_Init+0x18>
 80024e4:	4622      	mov	r2, r4
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 80024e6:	4281      	cmp	r1, r0
 80024e8:	f102 021c 	add.w	r2, r2, #28
 80024ec:	f04f 0300 	mov.w	r3, #0
 80024f0:	d00d      	beq.n	800250e <HAL_PCD_Init+0x60>
 {
   hpcd->OUT_ep[i].is_in = 0;
   hpcd->OUT_ep[i].num = i;
 80024f2:	f882 1098 	strb.w	r1, [r2, #152]	; 0x98
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 {
   hpcd->OUT_ep[i].is_in = 0;
 80024f6:	f882 3099 	strb.w	r3, [r2, #153]	; 0x99
   hpcd->OUT_ep[i].num = i;
   /* Control until ep is activated */
   hpcd->OUT_ep[i].type = PCD_EP_TYPE_CTRL;
 80024fa:	f882 309b 	strb.w	r3, [r2, #155]	; 0x9b
   hpcd->OUT_ep[i].maxpacket = 0;
 80024fe:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
   hpcd->OUT_ep[i].xfer_buff = 0;
 8002502:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
   hpcd->OUT_ep[i].xfer_len = 0;
 8002506:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
   hpcd->IN_ep[i].maxpacket =  0;
   hpcd->IN_ep[i].xfer_buff = 0;
   hpcd->IN_ep[i].xfer_len = 0;
 }
 
 for (i = 0; i < hpcd->Init.dev_endpoints ; i++)
 800250a:	3101      	adds	r1, #1
 800250c:	e7eb      	b.n	80024e6 <HAL_PCD_Init+0x38>
   hpcd->OUT_ep[i].xfer_len = 0;
 }
  
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 800250e:	6822      	ldr	r2, [r4, #0]
 8002510:	2101      	movs	r1, #1
 8002512:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8002516:	f44f 413d 	mov.w	r1, #48384	; 0xbd00
 /* Init Device */
 /*CNTR_FRES = 1*/
 hpcd->Instance->CNTR = USB_CNTR_FRES;
 
 /*CNTR_FRES = 0*/
 hpcd->Instance->CNTR = 0;
 800251a:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
 
 /*Clear pending interrupts*/
 hpcd->Instance->ISTR = 0;
 800251e:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
 
  /*Set Btable Adress*/
 hpcd->Instance->BTABLE = BTABLE_ADDRESS;
 8002522:	f8a2 3050 	strh.w	r3, [r2, #80]	; 0x50
  /*set wInterrupt_Mask global variable*/
  wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
 8002526:	f8a2 1040 	strh.w	r1, [r2, #64]	; 0x40
  
  hpcd->USB_Address = 0;
 800252a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  hpcd->State= PCD_READY;

 return HAL_OK;
 800252e:	4618      	mov	r0, r3
  
  /*Set interrupt mask*/
  hpcd->Instance->CNTR = wInterrupt_Mask;
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;
 8002530:	f884 3141 	strb.w	r3, [r4, #321]	; 0x141

 return HAL_OK;
 8002534:	bd38      	pop	{r3, r4, r5, pc}
  uint32_t wInterrupt_Mask = 0;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
  {
    return HAL_ERROR;
 8002536:	2001      	movs	r0, #1
  
  hpcd->USB_Address = 0;
  hpcd->State= PCD_READY;

 return HAL_OK;
}
 8002538:	bd38      	pop	{r3, r4, r5, pc}

0800253a <HAL_PCD_Start>:
  * @brief  Start The USB OTG Device.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
 800253a:	b508      	push	{r3, lr}
  /*  DP Pull-Down is external */
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800253c:	2101      	movs	r1, #1
 800253e:	f000 feda 	bl	80032f6 <HAL_PCDEx_SetConnectionState>
  
  return HAL_OK;
}
 8002542:	2000      	movs	r0, #0
 8002544:	bd08      	pop	{r3, pc}

08002546 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 8002546:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800254a:	2b01      	cmp	r3, #1
 800254c:	d00f      	beq.n	800256e <HAL_PCD_SetAddress+0x28>
 800254e:	2301      	movs	r3, #1
 8002550:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

   if(address == 0) 
 8002554:	b921      	cbnz	r1, 8002560 <HAL_PCD_SetAddress+0x1a>
   {
     /* set device address and enable function */
     hpcd->Instance->DADDR = USB_DADDR_EF;
 8002556:	6803      	ldr	r3, [r0, #0]
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800255e:	e001      	b.n	8002564 <HAL_PCD_SetAddress+0x1e>
   }
   else /* USB Address will be applied later */
   {
     hpcd->USB_Address = address;
 8002560:	f880 1024 	strb.w	r1, [r0, #36]	; 0x24
   }

  __HAL_UNLOCK(hpcd);   
 8002564:	2300      	movs	r3, #0
 8002566:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 800256a:	4618      	mov	r0, r3
 800256c:	4770      	bx	lr
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
   __HAL_LOCK(hpcd); 
 800256e:	2002      	movs	r0, #2
     hpcd->USB_Address = address;
   }

  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8002570:	4770      	bx	lr

08002572 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packert size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002572:	b5f0      	push	{r4, r5, r6, r7, lr}
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 8002574:	b2cc      	uxtb	r4, r1
 8002576:	f014 0f80 	tst.w	r4, #128	; 0x80
 800257a:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 800257e:	f04f 061c 	mov.w	r6, #28
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002582:	bf15      	itete	ne
 8002584:	fb06 0105 	mlane	r1, r6, r5, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002588:	fb06 0101 	mlaeq	r1, r6, r1, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800258c:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 800258e:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002590:	09e4      	lsrs	r4, r4, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 8002592:	700d      	strb	r5, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8002594:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8002596:	70cb      	strb	r3, [r1, #3]
  
  __HAL_LOCK(hpcd); 
 8002598:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
 800259c:	60ca      	str	r2, [r1, #12]
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 800259e:	2b01      	cmp	r3, #1
 80025a0:	f000 8188 	beq.w	80028b4 <HAL_PCD_EP_Open+0x342>
 80025a4:	2301      	movs	r3, #1
 80025a6:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

/* initialize Endpoint */
  switch (ep->type)
 80025aa:	78cc      	ldrb	r4, [r1, #3]
 80025ac:	780a      	ldrb	r2, [r1, #0]
 80025ae:	6803      	ldr	r3, [r0, #0]
 80025b0:	2c03      	cmp	r4, #3
 80025b2:	d832      	bhi.n	800261a <HAL_PCD_EP_Open+0xa8>
 80025b4:	e8df f004 	tbb	[pc, r4]
 80025b8:	180e2402 	.word	0x180e2402
  {
  case PCD_EP_TYPE_CTRL:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_CONTROL);
 80025bc:	b214      	sxth	r4, r2
 80025be:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80025c2:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80025c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025ca:	0412      	lsls	r2, r2, #16
 80025cc:	0c12      	lsrs	r2, r2, #16
 80025ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025d2:	e020      	b.n	8002616 <HAL_PCD_EP_Open+0xa4>
    break;
  case PCD_EP_TYPE_BULK:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_BULK);
 80025d4:	b214      	sxth	r4, r2
 80025d6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80025da:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80025de:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025e2:	0412      	lsls	r2, r2, #16
 80025e4:	0c12      	lsrs	r2, r2, #16
 80025e6:	e016      	b.n	8002616 <HAL_PCD_EP_Open+0xa4>
    break;
  case PCD_EP_TYPE_INTR:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_INTERRUPT);
 80025e8:	b214      	sxth	r4, r2
 80025ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80025ee:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 80025f2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80025f6:	0412      	lsls	r2, r2, #16
 80025f8:	0c12      	lsrs	r2, r2, #16
 80025fa:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 80025fe:	e00a      	b.n	8002616 <HAL_PCD_EP_Open+0xa4>
    break;
  case PCD_EP_TYPE_ISOC:
    PCD_SET_EPTYPE(hpcd->Instance, ep->num, USB_EP_ISOCHRONOUS);
 8002600:	b214      	sxth	r4, r2
 8002602:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002606:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 800260a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800260e:	0412      	lsls	r2, r2, #16
 8002610:	0c12      	lsrs	r2, r2, #16
 8002612:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002616:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    break;
  } 
  
  PCD_SET_EP_ADDRESS(hpcd->Instance, ep->num, ep->num);
 800261a:	780d      	ldrb	r5, [r1, #0]
 800261c:	b22c      	sxth	r4, r5
 800261e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002622:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002626:	0512      	lsls	r2, r2, #20
 8002628:	0d12      	lsrs	r2, r2, #20
 800262a:	432a      	orrs	r2, r5
 800262c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002630:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002634:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002638:	7a8c      	ldrb	r4, [r1, #10]
 800263a:	780a      	ldrb	r2, [r1, #0]
 800263c:	2c00      	cmp	r4, #0
 800263e:	d175      	bne.n	800272c <HAL_PCD_EP_Open+0x1ba>
  {
    if (ep->is_in)
 8002640:	784c      	ldrb	r4, [r1, #1]
 8002642:	888e      	ldrh	r6, [r1, #4]
 8002644:	2508      	movs	r5, #8
 8002646:	b33c      	cbz	r4, 8002698 <HAL_PCD_EP_Open+0x126>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002648:	f8b3 4050 	ldrh.w	r4, [r3, #80]	; 0x50
 800264c:	b2a4      	uxth	r4, r4
 800264e:	fb15 4202 	smlabb	r2, r5, r2, r4
 8002652:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8002656:	0876      	lsrs	r6, r6, #1
 8002658:	0076      	lsls	r6, r6, #1
 800265a:	f8c2 6400 	str.w	r6, [r2, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800265e:	780c      	ldrb	r4, [r1, #0]
 8002660:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002664:	0655      	lsls	r5, r2, #25
 8002666:	d50b      	bpl.n	8002680 <HAL_PCD_EP_Open+0x10e>
 8002668:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800266c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002670:	0512      	lsls	r2, r2, #20
 8002672:	0d12      	lsrs	r2, r2, #20
 8002674:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002678:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800267c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_NAK); 
 8002680:	7809      	ldrb	r1, [r1, #0]
 8002682:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002686:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800268a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268e:	0412      	lsls	r2, r2, #16
 8002690:	0c12      	lsrs	r2, r2, #16
 8002692:	f082 0220 	eor.w	r2, r2, #32
 8002696:	e102      	b.n	800289e <HAL_PCD_EP_Open+0x32c>
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(hpcd->Instance, ep->num, ep->pmaadress);
 8002698:	f8b3 7050 	ldrh.w	r7, [r3, #80]	; 0x50
 800269c:	b2bf      	uxth	r7, r7
 800269e:	fb15 7202 	smlabb	r2, r5, r2, r7
 80026a2:	3204      	adds	r2, #4
 80026a4:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 80026a8:	0876      	lsrs	r6, r6, #1
 80026aa:	0076      	lsls	r6, r6, #1
 80026ac:	f844 6012 	str.w	r6, [r4, r2, lsl #1]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, ep->maxpacket);
 80026b0:	f8b3 6050 	ldrh.w	r6, [r3, #80]	; 0x50
 80026b4:	780a      	ldrb	r2, [r1, #0]
 80026b6:	b2b6      	uxth	r6, r6
 80026b8:	fb15 6502 	smlabb	r5, r5, r2, r6
 80026bc:	68ca      	ldr	r2, [r1, #12]
 80026be:	2a3e      	cmp	r2, #62	; 0x3e
 80026c0:	f105 0606 	add.w	r6, r5, #6
 80026c4:	d90b      	bls.n	80026de <HAL_PCD_EP_Open+0x16c>
 80026c6:	f3c2 154f 	ubfx	r5, r2, #5, #16
 80026ca:	06d2      	lsls	r2, r2, #27
 80026cc:	bf04      	itt	eq
 80026ce:	f105 35ff 	addeq.w	r5, r5, #4294967295	; 0xffffffff
 80026d2:	b2ad      	uxtheq	r5, r5
 80026d4:	ea6f 65c5 	mvn.w	r5, r5, lsl #27
 80026d8:	ea6f 4555 	mvn.w	r5, r5, lsr #17
 80026dc:	e006      	b.n	80026ec <HAL_PCD_EP_Open+0x17a>
 80026de:	f3c2 054f 	ubfx	r5, r2, #1, #16
 80026e2:	07d7      	lsls	r7, r2, #31
 80026e4:	bf44      	itt	mi
 80026e6:	3501      	addmi	r5, #1
 80026e8:	b2ad      	uxthmi	r5, r5
 80026ea:	02ad      	lsls	r5, r5, #10
 80026ec:	b2ad      	uxth	r5, r5
 80026ee:	f844 5016 	str.w	r5, [r4, r6, lsl #1]
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80026f2:	780c      	ldrb	r4, [r1, #0]
 80026f4:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80026f8:	0452      	lsls	r2, r2, #17
 80026fa:	d50b      	bpl.n	8002714 <HAL_PCD_EP_Open+0x1a2>
 80026fc:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002700:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002704:	0512      	lsls	r2, r2, #20
 8002706:	0d12      	lsrs	r2, r2, #20
 8002708:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800270c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002710:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8002714:	7809      	ldrb	r1, [r1, #0]
 8002716:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 800271a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800271e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002722:	0412      	lsls	r2, r2, #16
 8002724:	0c12      	lsrs	r2, r2, #16
 8002726:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 800272a:	e0b8      	b.n	800289e <HAL_PCD_EP_Open+0x32c>
  }
  /*Double Buffer*/
  else
  {
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
 800272c:	b214      	sxth	r4, r2
 800272e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002732:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002736:	0512      	lsls	r2, r2, #20
 8002738:	0d12      	lsrs	r2, r2, #20
 800273a:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 800273e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002742:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002746:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 800274a:	780e      	ldrb	r6, [r1, #0]
 800274c:	2408      	movs	r4, #8
 800274e:	b2ad      	uxth	r5, r5
 8002750:	fb14 5506 	smlabb	r5, r4, r6, r5
 8002754:	88ce      	ldrh	r6, [r1, #6]
 8002756:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800275a:	0876      	lsrs	r6, r6, #1
 800275c:	0076      	lsls	r6, r6, #1
 800275e:	f842 6015 	str.w	r6, [r2, r5, lsl #1]
 8002762:	f8b3 5050 	ldrh.w	r5, [r3, #80]	; 0x50
 8002766:	780e      	ldrb	r6, [r1, #0]
 8002768:	b2ad      	uxth	r5, r5
 800276a:	fb14 5406 	smlabb	r4, r4, r6, r5
 800276e:	890d      	ldrh	r5, [r1, #8]
 8002770:	3404      	adds	r4, #4
 8002772:	086d      	lsrs	r5, r5, #1
 8002774:	006d      	lsls	r5, r5, #1
 8002776:	f842 5014 	str.w	r5, [r2, r4, lsl #1]
 800277a:	780c      	ldrb	r4, [r1, #0]
    
    if (ep->is_in==0)
 800277c:	784a      	ldrb	r2, [r1, #1]
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800277e:	b224      	sxth	r4, r4
    /*Set the endpoint as double buffered*/
    PCD_SET_EP_DBUF(hpcd->Instance, ep->num);
    /*Set buffer address for double buffered mode*/
    PCD_SET_EP_DBUF_ADDR(hpcd->Instance, ep->num,ep->pmaaddr0, ep->pmaaddr1);
    
    if (ep->is_in==0)
 8002780:	2a00      	cmp	r2, #0
 8002782:	d146      	bne.n	8002812 <HAL_PCD_EP_Open+0x2a0>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002784:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002788:	0457      	lsls	r7, r2, #17
 800278a:	d50b      	bpl.n	80027a4 <HAL_PCD_EP_Open+0x232>
 800278c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002790:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002794:	0512      	lsls	r2, r2, #20
 8002796:	0d12      	lsrs	r2, r2, #20
 8002798:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800279c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027a0:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80027a4:	780c      	ldrb	r4, [r1, #0]
 80027a6:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027aa:	0656      	lsls	r6, r2, #25
 80027ac:	d50b      	bpl.n	80027c6 <HAL_PCD_EP_Open+0x254>
 80027ae:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027b2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027b6:	0512      	lsls	r2, r2, #20
 80027b8:	0d12      	lsrs	r2, r2, #20
 80027ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027be:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80027c2:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 80027c6:	780c      	ldrb	r4, [r1, #0]
 80027c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027d0:	0512      	lsls	r2, r2, #20
 80027d2:	0d12      	lsrs	r2, r2, #20
 80027d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027d8:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80027dc:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 80027e0:	780c      	ldrb	r4, [r1, #0]
 80027e2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80027e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027ea:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80027ee:	0412      	lsls	r2, r2, #16
 80027f0:	0c12      	lsrs	r2, r2, #16
 80027f2:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 80027f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80027fe:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8002802:	7809      	ldrb	r1, [r1, #0]
 8002804:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002808:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 800280c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002810:	e043      	b.n	800289a <HAL_PCD_EP_Open+0x328>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8002812:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002816:	0455      	lsls	r5, r2, #17
 8002818:	d50b      	bpl.n	8002832 <HAL_PCD_EP_Open+0x2c0>
 800281a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800281e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002822:	0512      	lsls	r2, r2, #20
 8002824:	0d12      	lsrs	r2, r2, #20
 8002826:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800282a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800282e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 8002832:	780c      	ldrb	r4, [r1, #0]
 8002834:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002838:	0652      	lsls	r2, r2, #25
 800283a:	d50b      	bpl.n	8002854 <HAL_PCD_EP_Open+0x2e2>
 800283c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002840:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002844:	0512      	lsls	r2, r2, #20
 8002846:	0d12      	lsrs	r2, r2, #20
 8002848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800284c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002850:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002854:	780c      	ldrb	r4, [r1, #0]
 8002856:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800285a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800285e:	0512      	lsls	r2, r2, #20
 8002860:	0d12      	lsrs	r2, r2, #20
 8002862:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800286a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 800286e:	780c      	ldrb	r4, [r1, #0]
 8002870:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002874:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002878:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800287c:	0412      	lsls	r2, r2, #16
 800287e:	0c12      	lsrs	r2, r2, #16
 8002880:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002884:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002888:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 800288c:	7809      	ldrb	r1, [r1, #0]
 800288e:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002892:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002896:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800289a:	0412      	lsls	r2, r2, #16
 800289c:	0c12      	lsrs	r2, r2, #16
 800289e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028a6:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 80028aa:	2300      	movs	r3, #0
 80028ac:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return ret;
 80028b0:	4618      	mov	r0, r3
 80028b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  
  ep->is_in = (0x80 & ep_addr) != 0;
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
  
  __HAL_LOCK(hpcd); 
 80028b4:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return ret;
}
 80028b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028b8 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
 80028b8:	b2cb      	uxtb	r3, r1
 80028ba:	f013 0f80 	tst.w	r3, #128	; 0x80
 80028be:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
 80028c2:	b530      	push	{r4, r5, lr}
 80028c4:	f04f 041c 	mov.w	r4, #28
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80028c8:	bf15      	itete	ne
 80028ca:	fb04 0102 	mlane	r1, r4, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80028ce:	fb04 0101 	mlaeq	r1, r4, r1, r0
{  
  PCD_EPTypeDef *ep;
  
  if ((ep_addr & 0x80) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80028d2:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 80028d4:	31b4      	addeq	r1, #180	; 0xb4
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80028d6:	09db      	lsrs	r3, r3, #7
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  }
  ep->num   = ep_addr & 0x7F;
 80028d8:	700a      	strb	r2, [r1, #0]
  
  ep->is_in = (0x80 & ep_addr) != 0;
 80028da:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80028dc:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	f000 80c2 	beq.w	8002a6a <HAL_PCD_EP_Close+0x1b2>
 80028e6:	2301      	movs	r3, #1
 80028e8:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140

  if (ep->doublebuffer == 0) 
 80028ec:	7a8d      	ldrb	r5, [r1, #10]
 80028ee:	784c      	ldrb	r4, [r1, #1]
 80028f0:	6803      	ldr	r3, [r0, #0]
 80028f2:	780a      	ldrb	r2, [r1, #0]
 80028f4:	bb45      	cbnz	r5, 8002948 <HAL_PCD_EP_Close+0x90>
  {
    if (ep->is_in)
 80028f6:	b1c4      	cbz	r4, 800292a <HAL_PCD_EP_Close+0x72>
    {
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80028f8:	b214      	sxth	r4, r2
 80028fa:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80028fe:	0655      	lsls	r5, r2, #25
 8002900:	d50b      	bpl.n	800291a <HAL_PCD_EP_Close+0x62>
 8002902:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002906:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800290a:	0512      	lsls	r2, r2, #20
 800290c:	0d12      	lsrs	r2, r2, #20
 800290e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002912:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002916:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS); 
 800291a:	7809      	ldrb	r1, [r1, #0]
 800291c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002920:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002924:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002928:	e092      	b.n	8002a50 <HAL_PCD_EP_Close+0x198>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800292a:	b214      	sxth	r4, r2
 800292c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002930:	0452      	lsls	r2, r2, #17
 8002932:	f140 8086 	bpl.w	8002a42 <HAL_PCD_EP_Close+0x18a>
 8002936:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800293a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800293e:	0512      	lsls	r2, r2, #20
 8002940:	0d12      	lsrs	r2, r2, #20
 8002942:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002946:	e078      	b.n	8002a3a <HAL_PCD_EP_Close+0x182>
    }
  }
  /*Double Buffer*/
  else
  { 
    if (ep->is_in==0)
 8002948:	2c00      	cmp	r4, #0
 800294a:	d13c      	bne.n	80029c6 <HAL_PCD_EP_Close+0x10e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 800294c:	b214      	sxth	r4, r2
 800294e:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002952:	0455      	lsls	r5, r2, #17
 8002954:	d50b      	bpl.n	800296e <HAL_PCD_EP_Close+0xb6>
 8002956:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800295a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800295e:	0512      	lsls	r2, r2, #20
 8002960:	0d12      	lsrs	r2, r2, #20
 8002962:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002966:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800296a:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 800296e:	780c      	ldrb	r4, [r1, #0]
 8002970:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002974:	0652      	lsls	r2, r2, #25
 8002976:	d50b      	bpl.n	8002990 <HAL_PCD_EP_Close+0xd8>
 8002978:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800297c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002980:	0512      	lsls	r2, r2, #20
 8002982:	0d12      	lsrs	r2, r2, #20
 8002984:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002988:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800298c:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(hpcd->Instance, ep->num);
 8002990:	780c      	ldrb	r4, [r1, #0]
 8002992:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002996:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800299a:	0512      	lsls	r2, r2, #20
 800299c:	0d12      	lsrs	r2, r2, #20
 800299e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029a2:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80029a6:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 80029aa:	780c      	ldrb	r4, [r1, #0]
 80029ac:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80029b4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80029b8:	0412      	lsls	r2, r2, #16
 80029ba:	0c12      	lsrs	r2, r2, #16
 80029bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029c4:	e7a7      	b.n	8002916 <HAL_PCD_EP_Close+0x5e>
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 80029c6:	b214      	sxth	r4, r2
 80029c8:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029cc:	0455      	lsls	r5, r2, #17
 80029ce:	d50b      	bpl.n	80029e8 <HAL_PCD_EP_Close+0x130>
 80029d0:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029d4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029d8:	0512      	lsls	r2, r2, #20
 80029da:	0d12      	lsrs	r2, r2, #20
 80029dc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80029e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80029e4:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80029e8:	780c      	ldrb	r4, [r1, #0]
 80029ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029ee:	0652      	lsls	r2, r2, #25
 80029f0:	d50b      	bpl.n	8002a0a <HAL_PCD_EP_Close+0x152>
 80029f2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80029f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80029fa:	0512      	lsls	r2, r2, #20
 80029fc:	0d12      	lsrs	r2, r2, #20
 80029fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a02:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002a06:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_RX_DTOG(hpcd->Instance, ep->num);
 8002a0a:	780c      	ldrb	r4, [r1, #0]
 8002a0c:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a10:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002a14:	0512      	lsls	r2, r2, #20
 8002a16:	0d12      	lsrs	r2, r2, #20
 8002a18:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002a1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a20:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_DIS);
 8002a24:	780c      	ldrb	r4, [r1, #0]
 8002a26:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8002a2a:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a32:	0412      	lsls	r2, r2, #16
 8002a34:	0c12      	lsrs	r2, r2, #16
 8002a36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a3e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_DIS);
 8002a42:	7809      	ldrb	r1, [r1, #0]
 8002a44:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8002a48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002a4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a50:	0412      	lsls	r2, r2, #16
 8002a52:	0c12      	lsrs	r2, r2, #16
 8002a54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a5c:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
 8002a60:	2300      	movs	r3, #0
 8002a62:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  return HAL_OK;
 8002a66:	4618      	mov	r0, r3
 8002a68:	bd30      	pop	{r4, r5, pc}
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
  
  __HAL_LOCK(hpcd); 
 8002a6a:	2002      	movs	r0, #2
    }
  } 
  
  __HAL_UNLOCK(hpcd);   
  return HAL_OK;
}
 8002a6c:	bd30      	pop	{r4, r5, pc}

08002a6e <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a6e:	b570      	push	{r4, r5, r6, lr}
  
 PCD_EPTypeDef *ep;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8002a70:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002a74:	251c      	movs	r5, #28
 8002a76:	fb05 0501 	mla	r5, r5, r1, r0
 8002a7a:	35b0      	adds	r5, #176	; 0xb0
 8002a7c:	1d2c      	adds	r4, r5, #4
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002a7e:	6122      	str	r2, [r4, #16]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8002a80:	2200      	movs	r2, #0
  ep->is_in = 0;
 8002a82:	7062      	strb	r2, [r4, #1]
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8002a84:	6163      	str	r3, [r4, #20]
  ep->xfer_count = 0;
 8002a86:	61a2      	str	r2, [r4, #24]
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 8002a88:	7129      	strb	r1, [r5, #4]
   
  __HAL_LOCK(hpcd); 
 8002a8a:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
 8002a8e:	2901      	cmp	r1, #1
 8002a90:	d053      	beq.n	8002b3a <HAL_PCD_EP_Receive+0xcc>
 8002a92:	2101      	movs	r1, #1
 8002a94:	f880 1140 	strb.w	r1, [r0, #320]	; 0x140
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002a98:	68e1      	ldr	r1, [r4, #12]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8002a9a:	7aa6      	ldrb	r6, [r4, #10]
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
   
  /* Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002a9c:	428b      	cmp	r3, r1
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8002a9e:	bf85      	ittet	hi
 8002aa0:	ebc1 0303 	rsbhi	r3, r1, r3
 8002aa4:	6163      	strhi	r3, [r4, #20]
  }
  else
  {
    len=ep->xfer_len;
    ep->xfer_len =0;
 8002aa6:	6162      	strls	r2, [r4, #20]
 8002aa8:	460b      	movhi	r3, r1
 8002aaa:	6802      	ldr	r2, [r0, #0]
 8002aac:	7929      	ldrb	r1, [r5, #4]
  }
  
  /* configure and validate Rx endpoint */
  if (ep->doublebuffer == 0) 
 8002aae:	b10e      	cbz	r6, 8002ab4 <HAL_PCD_EP_Receive+0x46>
    PCD_SET_EP_RX_CNT(hpcd->Instance, ep->num, len);
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ab0:	7864      	ldrb	r4, [r4, #1]
 8002ab2:	bb0c      	cbnz	r4, 8002af8 <HAL_PCD_EP_Receive+0x8a>
 8002ab4:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8002ab8:	b2a4      	uxth	r4, r4
 8002aba:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002abe:	2b3e      	cmp	r3, #62	; 0x3e
 8002ac0:	f502 6680 	add.w	r6, r2, #1024	; 0x400
 8002ac4:	f101 0106 	add.w	r1, r1, #6
 8002ac8:	d90b      	bls.n	8002ae2 <HAL_PCD_EP_Receive+0x74>
 8002aca:	f3c3 144f 	ubfx	r4, r3, #5, #16
 8002ace:	06db      	lsls	r3, r3, #27
 8002ad0:	bf04      	itt	eq
 8002ad2:	f104 34ff 	addeq.w	r4, r4, #4294967295	; 0xffffffff
 8002ad6:	b2a4      	uxtheq	r4, r4
 8002ad8:	ea6f 64c4 	mvn.w	r4, r4, lsl #27
 8002adc:	ea6f 4454 	mvn.w	r4, r4, lsr #17
 8002ae0:	e006      	b.n	8002af0 <HAL_PCD_EP_Receive+0x82>
 8002ae2:	f3c3 044f 	ubfx	r4, r3, #1, #16
 8002ae6:	07db      	lsls	r3, r3, #31
 8002ae8:	bf44      	itt	mi
 8002aea:	3401      	addmi	r4, #1
 8002aec:	b2a4      	uxthmi	r4, r4
 8002aee:	02a4      	lsls	r4, r4, #10
 8002af0:	b2a4      	uxth	r4, r4
 8002af2:	f846 4011 	str.w	r4, [r6, r1, lsl #1]
 8002af6:	e00a      	b.n	8002b0e <HAL_PCD_EP_Receive+0xa0>
 8002af8:	2c01      	cmp	r4, #1
 8002afa:	d108      	bne.n	8002b0e <HAL_PCD_EP_Receive+0xa0>
 8002afc:	f8b2 4050 	ldrh.w	r4, [r2, #80]	; 0x50
 8002b00:	b2a4      	uxth	r4, r4
 8002b02:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
 8002b06:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8002b0a:	f8c1 340c 	str.w	r3, [r1, #1036]	; 0x40c
  } 
  
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8002b0e:	7929      	ldrb	r1, [r5, #4]
 8002b10:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002b14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b1c:	041b      	lsls	r3, r3, #16
 8002b1e:	0c1b      	lsrs	r3, r3, #16
 8002b20:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002b24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b2c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd); 
 8002b30:	2300      	movs	r3, #0
 8002b32:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 8002b36:	4618      	mov	r0, r3
 8002b38:	bd70      	pop	{r4, r5, r6, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
   
  __HAL_LOCK(hpcd); 
 8002b3a:	2002      	movs	r0, #2
  PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 8002b3c:	bd70      	pop	{r4, r5, r6, pc}

08002b3e <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8002b3e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002b42:	231c      	movs	r3, #28
 8002b44:	fb03 0001 	mla	r0, r3, r1, r0
}
 8002b48:	f8b0 00cc 	ldrh.w	r0, [r0, #204]	; 0xcc
 8002b4c:	4770      	bx	lr

08002b4e <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  PCD_EPTypeDef *ep;
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8002b50:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8002b54:	271c      	movs	r7, #28
 8002b56:	434f      	muls	r7, r1
 8002b58:	3728      	adds	r7, #40	; 0x28
 8002b5a:	19c5      	adds	r5, r0, r7
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b5c:	4604      	mov	r4, r0
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
 8002b5e:	616b      	str	r3, [r5, #20]
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b60:	461e      	mov	r6, r3
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8002b62:	2000      	movs	r0, #0
  ep->is_in = 1;
 8002b64:	2301      	movs	r3, #1
 8002b66:	706b      	strb	r3, [r5, #1]
  uint16_t pmabuffer = 0;
    
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8002b68:	612a      	str	r2, [r5, #16]
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8002b6a:	61a8      	str	r0, [r5, #24]
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
 8002b6c:	55e1      	strb	r1, [r4, r7]
  
  __HAL_LOCK(hpcd); 
 8002b6e:	f894 1140 	ldrb.w	r1, [r4, #320]	; 0x140
 8002b72:	4299      	cmp	r1, r3
 8002b74:	f000 8095 	beq.w	8002ca2 <HAL_PCD_EP_Transmit+0x154>
 8002b78:	f884 3140 	strb.w	r3, [r4, #320]	; 0x140
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002b7c:	68eb      	ldr	r3, [r5, #12]
    len=ep->xfer_len;
    ep->xfer_len =0;
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8002b7e:	7aa9      	ldrb	r1, [r5, #10]
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
  
  /*Multi packet transfer*/
  if (ep->xfer_len > ep->maxpacket)
 8002b80:	429e      	cmp	r6, r3
  {
    len=ep->maxpacket;
    ep->xfer_len-=len; 
 8002b82:	bf83      	ittte	hi
 8002b84:	ebc3 0606 	rsbhi	r6, r3, r6
 8002b88:	616e      	strhi	r6, [r5, #20]
 8002b8a:	461e      	movhi	r6, r3
  }
  else
  {  
    len=ep->xfer_len;
    ep->xfer_len =0;
 8002b8c:	6168      	strls	r0, [r5, #20]
 8002b8e:	b2b3      	uxth	r3, r6
  }
  
  /* configure and validate Tx endpoint */
  if (ep->doublebuffer == 0) 
 8002b90:	b981      	cbnz	r1, 8002bb4 <HAL_PCD_EP_Transmit+0x66>
  {
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, len);
 8002b92:	4611      	mov	r1, r2
 8002b94:	6820      	ldr	r0, [r4, #0]
 8002b96:	88aa      	ldrh	r2, [r5, #4]
 8002b98:	f000 fb85 	bl	80032a6 <PCD_WritePMA>
    PCD_SET_EP_TX_CNT(hpcd->Instance, ep->num, len);
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	5de1      	ldrb	r1, [r4, r7]
 8002ba0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002ba4:	b292      	uxth	r2, r2
 8002ba6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002baa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8002bae:	f8c3 6404 	str.w	r6, [r3, #1028]	; 0x404
 8002bb2:	e060      	b.n	8002c76 <HAL_PCD_EP_Transmit+0x128>
  }
  else
  {
    /*Set the Double buffer counter*/
    PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002bb4:	f895 e001 	ldrb.w	lr, [r5, #1]
 8002bb8:	6820      	ldr	r0, [r4, #0]
 8002bba:	5de1      	ldrb	r1, [r4, r7]
 8002bbc:	f1be 0f00 	cmp.w	lr, #0
 8002bc0:	d122      	bne.n	8002c08 <HAL_PCD_EP_Transmit+0xba>
 8002bc2:	f8b0 c050 	ldrh.w	ip, [r0, #80]	; 0x50
 8002bc6:	fa1f fc8c 	uxth.w	ip, ip
 8002bca:	eb0c 01c1 	add.w	r1, ip, r1, lsl #3
 8002bce:	2e3e      	cmp	r6, #62	; 0x3e
 8002bd0:	f500 6e80 	add.w	lr, r0, #1024	; 0x400
 8002bd4:	f101 0c06 	add.w	ip, r1, #6
 8002bd8:	d90b      	bls.n	8002bf2 <HAL_PCD_EP_Transmit+0xa4>
 8002bda:	f3c6 114f 	ubfx	r1, r6, #5, #16
 8002bde:	06f6      	lsls	r6, r6, #27
 8002be0:	bf04      	itt	eq
 8002be2:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8002be6:	b289      	uxtheq	r1, r1
 8002be8:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002bec:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002bf0:	e006      	b.n	8002c00 <HAL_PCD_EP_Transmit+0xb2>
 8002bf2:	f3c6 014f 	ubfx	r1, r6, #1, #16
 8002bf6:	07f6      	lsls	r6, r6, #31
 8002bf8:	bf44      	itt	mi
 8002bfa:	3101      	addmi	r1, #1
 8002bfc:	b289      	uxthmi	r1, r1
 8002bfe:	0289      	lsls	r1, r1, #10
 8002c00:	b289      	uxth	r1, r1
 8002c02:	f84e 101c 	str.w	r1, [lr, ip, lsl #1]
 8002c06:	e00c      	b.n	8002c22 <HAL_PCD_EP_Transmit+0xd4>
 8002c08:	f1be 0f01 	cmp.w	lr, #1
 8002c0c:	d109      	bne.n	8002c22 <HAL_PCD_EP_Transmit+0xd4>
 8002c0e:	f8b0 e050 	ldrh.w	lr, [r0, #80]	; 0x50
 8002c12:	fa1f fe8e 	uxth.w	lr, lr
 8002c16:	eb0e 01c1 	add.w	r1, lr, r1, lsl #3
 8002c1a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8002c1e:	f8c1 640c 	str.w	r6, [r1, #1036]	; 0x40c
    
    /*Write the data to the USB endpoint*/
    if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num)& USB_EP_DTOG_TX)
 8002c22:	5de1      	ldrb	r1, [r4, r7]
 8002c24:	f830 1021 	ldrh.w	r1, [r0, r1, lsl #2]
 8002c28:	0649      	lsls	r1, r1, #25
    {
      pmabuffer = ep->pmaaddr1;
 8002c2a:	bf4c      	ite	mi
 8002c2c:	892e      	ldrhmi	r6, [r5, #8]
    }
    else
    {
      pmabuffer = ep->pmaaddr0;
 8002c2e:	88ee      	ldrhpl	r6, [r5, #6]
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
 8002c30:	4611      	mov	r1, r2
 8002c32:	4632      	mov	r2, r6
 8002c34:	f000 fb37 	bl	80032a6 <PCD_WritePMA>
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
 8002c38:	786b      	ldrb	r3, [r5, #1]
 8002c3a:	6822      	ldr	r2, [r4, #0]
 8002c3c:	5de1      	ldrb	r1, [r4, r7]
 8002c3e:	b95b      	cbnz	r3, 8002c58 <HAL_PCD_EP_Transmit+0x10a>
 8002c40:	b209      	sxth	r1, r1
 8002c42:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c4a:	051b      	lsls	r3, r3, #20
 8002c4c:	0d1b      	lsrs	r3, r3, #20
 8002c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c56:	e00c      	b.n	8002c72 <HAL_PCD_EP_Transmit+0x124>
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d10c      	bne.n	8002c76 <HAL_PCD_EP_Transmit+0x128>
 8002c5c:	b209      	sxth	r1, r1
 8002c5e:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c66:	051b      	lsls	r3, r3, #20
 8002c68:	0d1b      	lsrs	r3, r3, #20
 8002c6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c72:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c76:	5de1      	ldrb	r1, [r4, r7]
 8002c78:	6822      	ldr	r2, [r4, #0]
 8002c7a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c86:	041b      	lsls	r3, r3, #16
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  
  __HAL_UNLOCK(hpcd);
 8002c96:	2000      	movs	r0, #0
    }
    PCD_WritePMA(hpcd->Instance, ep->xfer_buff, pmabuffer, len);
    PCD_FreeUserBuffer(hpcd->Instance, ep->num, ep->is_in);
  }

  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002c98:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
  
  __HAL_UNLOCK(hpcd);
 8002c9c:	f884 0140 	strb.w	r0, [r4, #320]	; 0x140
     
  return HAL_OK;
 8002ca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ep->xfer_len = len;
  ep->xfer_count = 0;
  ep->is_in = 1;
  ep->num = ep_addr & 0x7F;
  
  __HAL_LOCK(hpcd); 
 8002ca2:	2002      	movs	r0, #2
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
  
  __HAL_UNLOCK(hpcd);
     
  return HAL_OK;
}
 8002ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002ca6 <HAL_PCD_IRQHandler>:
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8002ca6:	6803      	ldr	r3, [r0, #0]
 8002ca8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002cac:	b21b      	sxth	r3, r3
 8002cae:	2b00      	cmp	r3, #0
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002cb4:	4604      	mov	r4, r0
  uint32_t wInterrupt_Mask = 0;
  
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8002cb6:	db11      	blt.n	8002cdc <HAL_PCD_IRQHandler+0x36>
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8002cb8:	6823      	ldr	r3, [r4, #0]
 8002cba:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002cbe:	0552      	lsls	r2, r2, #21
 8002cc0:	f140 81c3 	bpl.w	800304a <HAL_PCD_IRQHandler+0x3a4>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cc4:	f64f 32ff 	movw	r2, #64511	; 0xfbff
    HAL_PCD_ResetCallback(hpcd);
 8002cc8:	4620      	mov	r0, r4
    PCD_EP_ISR_Handler(hpcd);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002cca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8002cce:	f001 fca9 	bl	8004624 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	2100      	movs	r1, #0
 8002cd6:	f7ff fc36 	bl	8002546 <HAL_PCD_SetAddress>
 8002cda:	e1b6      	b.n	800304a <HAL_PCD_IRQHandler+0x3a4>
{
  PCD_EPTypeDef *ep;
  uint16_t count=0;
  uint8_t EPindex;
  __IO uint16_t wIstr;  
  __IO uint16_t wEPVal = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f8ad 3006 	strh.w	r3, [sp, #6]
  
  /* stay in loop while pending interrupts */
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8002ce2:	6820      	ldr	r0, [r4, #0]
 8002ce4:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	f8ad 3004 	strh.w	r3, [sp, #4]
 8002cee:	041b      	lsls	r3, r3, #16
 8002cf0:	d5e2      	bpl.n	8002cb8 <HAL_PCD_IRQHandler+0x12>
  {
    /* extract highest priority endpoint number */
    EPindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002cf2:	f8bd 8004 	ldrh.w	r8, [sp, #4]
    
    if (EPindex == 0)
 8002cf6:	f018 080f 	ands.w	r8, r8, #15
 8002cfa:	f040 80b7 	bne.w	8002e6c <HAL_PCD_IRQHandler+0x1c6>
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8002cfe:	f8bd 1004 	ldrh.w	r1, [sp, #4]
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d02:	8803      	ldrh	r3, [r0, #0]
    if (EPindex == 0)
    {
      /* Decode and service control endpoint interrupt */
      
      /* DIR bit = origin of the interrupt */   
      if ((wIstr & USB_ISTR_DIR) == 0)
 8002d04:	f001 0110 	and.w	r1, r1, #16
 8002d08:	b289      	uxth	r1, r1
 8002d0a:	bb59      	cbnz	r1, 8002d64 <HAL_PCD_IRQHandler+0xbe>
      {
        /* DIR = 0 */
        
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002d0c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002d10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d14:	041b      	lsls	r3, r3, #16
 8002d16:	0c1b      	lsrs	r3, r3, #16
 8002d18:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d1a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d1e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d28:	eb00 0043 	add.w	r0, r0, r3, lsl #1
        ep->xfer_buff += ep->xfer_count;
 8002d2c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        /* DIR = 0      => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always  */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
        ep = &hpcd->IN_ep[0];
        
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002d2e:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
 8002d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d36:	6423      	str	r3, [r4, #64]	; 0x40
        ep->xfer_buff += ep->xfer_count;
 8002d38:	4413      	add	r3, r2
 8002d3a:	63a3      	str	r3, [r4, #56]	; 0x38
 
        /* TX COMPLETE */
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8002d3c:	4620      	mov	r0, r4
 8002d3e:	f001 fc65 	bl	800460c <HAL_PCD_DataInStageCallback>
        
        
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8002d42:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0cb      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x3c>
 8002d4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1c8      	bne.n	8002ce2 <HAL_PCD_IRQHandler+0x3c>
        {
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8002d50:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
 8002d54:	6822      	ldr	r2, [r4, #0]
 8002d56:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8002d5a:	f8a2 104c 	strh.w	r1, [r2, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8002d5e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8002d62:	e7be      	b.n	8002ce2 <HAL_PCD_IRQHandler+0x3c>
        /* DIR = 1 */
        
        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	f8ad 3006 	strh.w	r3, [sp, #6]
        
        if ((wEPVal & USB_EP_SETUP) != 0)
 8002d6a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002d6e:	051b      	lsls	r3, r3, #20
 8002d70:	d51f      	bpl.n	8002db2 <HAL_PCD_IRQHandler+0x10c>
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d72:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002d76:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d80:	eb00 0343 	add.w	r3, r0, r3, lsl #1
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002d84:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
        
        if ((wEPVal & USB_EP_SETUP) != 0)
        {
          /* Get SETUP Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d88:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002d8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d90:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          PCD_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8002d94:	f504 71a2 	add.w	r1, r4, #324	; 0x144
 8002d98:	f000 fa9c 	bl	80032d4 <PCD_ReadPMA>
          /* SETUP bit kept frozen while CTR_RX = 1*/ 
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8002d9c:	6822      	ldr	r2, [r4, #0]
 8002d9e:	8813      	ldrh	r3, [r2, #0]
 8002da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da4:	051b      	lsls	r3, r3, #20
 8002da6:	0d1b      	lsrs	r3, r3, #20
 8002da8:	8013      	strh	r3, [r2, #0]
          
          /* Process SETUP Packet*/
          HAL_PCD_SetupStageCallback(hpcd);
 8002daa:	4620      	mov	r0, r4
 8002dac:	f001 fc1e 	bl	80045ec <HAL_PCD_SetupStageCallback>
 8002db0:	e797      	b.n	8002ce2 <HAL_PCD_IRQHandler+0x3c>
        }
        
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8002db2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002db6:	b21b      	sxth	r3, r3
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	da92      	bge.n	8002ce2 <HAL_PCD_IRQHandler+0x3c>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002dbc:	8803      	ldrh	r3, [r0, #0]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	051b      	lsls	r3, r3, #20
 8002dc4:	0d1b      	lsrs	r3, r3, #20
 8002dc6:	8003      	strh	r3, [r0, #0]
          /* Get Control Data OUT Packet*/
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002dc8:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002dcc:	f894 20b4 	ldrb.w	r2, [r4, #180]	; 0xb4
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002dd6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002dda:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002dde:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002de2:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
          
          if (ep->xfer_count != 0)
 8002de6:	b163      	cbz	r3, 8002e02 <HAL_PCD_IRQHandler+0x15c>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002de8:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
 8002dec:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
 8002df0:	f000 fa70 	bl	80032d4 <PCD_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8002df4:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 8002df8:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8002dfc:	4413      	add	r3, r2
 8002dfe:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8002e02:	4620      	mov	r0, r4
 8002e04:	2100      	movs	r1, #0
 8002e06:	f001 fbf8 	bl	80045fa <HAL_PCD_DataOutStageCallback>
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e0a:	6822      	ldr	r2, [r4, #0]
 8002e0c:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
 8002e10:	f8b2 5050 	ldrh.w	r5, [r2, #80]	; 0x50
 8002e14:	2b3e      	cmp	r3, #62	; 0x3e
 8002e16:	b2ad      	uxth	r5, r5
 8002e18:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8002e1c:	f105 0506 	add.w	r5, r5, #6
 8002e20:	d90b      	bls.n	8002e3a <HAL_PCD_IRQHandler+0x194>
 8002e22:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8002e26:	06df      	lsls	r7, r3, #27
 8002e28:	bf04      	itt	eq
 8002e2a:	f101 31ff 	addeq.w	r1, r1, #4294967295	; 0xffffffff
 8002e2e:	b289      	uxtheq	r1, r1
 8002e30:	ea6f 61c1 	mvn.w	r1, r1, lsl #27
 8002e34:	ea6f 4151 	mvn.w	r1, r1, lsr #17
 8002e38:	e006      	b.n	8002e48 <HAL_PCD_IRQHandler+0x1a2>
 8002e3a:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002e3e:	07de      	lsls	r6, r3, #31
 8002e40:	bf44      	itt	mi
 8002e42:	3101      	addmi	r1, #1
 8002e44:	b289      	uxthmi	r1, r1
 8002e46:	0289      	lsls	r1, r1, #10
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e48:	8813      	ldrh	r3, [r2, #0]
 8002e4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e52:	041b      	lsls	r3, r3, #16
 8002e54:	0c1b      	lsrs	r3, r3, #16
 8002e56:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e5e:	b289      	uxth	r1, r1
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
          }
          
          /* Process Control Data OUT Packet*/
           HAL_PCD_DataOutStageCallback(hpcd, 0);
          
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002e64:	f840 1015 	str.w	r1, [r0, r5, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002e68:	8013      	strh	r3, [r2, #0]
 8002e6a:	e73a      	b.n	8002ce2 <HAL_PCD_IRQHandler+0x3c>
    {
      
      /* Decode and service non control endpoints interrupt  */
      
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
 8002e6c:	fa0f f788 	sxth.w	r7, r8
 8002e70:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8002e7a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002e7e:	b21b      	sxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da6d      	bge.n	8002f60 <HAL_PCD_IRQHandler+0x2ba>
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002e84:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
 8002e88:	f04f 091c 	mov.w	r9, #28
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
        ep = &hpcd->OUT_ep[EPindex];
 8002e90:	fb09 4908 	mla	r9, r9, r8, r4
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002e94:	051b      	lsls	r3, r3, #20
        ep = &hpcd->OUT_ep[EPindex];
 8002e96:	f109 09b0 	add.w	r9, r9, #176	; 0xb0
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, EPindex);
      if ((wEPVal & USB_EP_CTR_RX) != 0)
      {  
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, EPindex);
 8002e9a:	0d1b      	lsrs	r3, r3, #20
 8002e9c:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        ep = &hpcd->OUT_ep[EPindex];
 8002ea0:	f109 0504 	add.w	r5, r9, #4
        
        /* OUT double Buffering*/
        if (ep->doublebuffer == 0)
 8002ea4:	7aaa      	ldrb	r2, [r5, #10]
 8002ea6:	f899 3004 	ldrb.w	r3, [r9, #4]
 8002eaa:	b99a      	cbnz	r2, 8002ed4 <HAL_PCD_IRQHandler+0x22e>
        {
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002eac:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002eb0:	b292      	uxth	r2, r2
 8002eb2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002eb6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002eba:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8002ebe:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002ec2:	b2b6      	uxth	r6, r6
          if (count != 0)
 8002ec4:	2e00      	cmp	r6, #0
 8002ec6:	d037      	beq.n	8002f38 <HAL_PCD_IRQHandler+0x292>
          {
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002ec8:	6929      	ldr	r1, [r5, #16]
 8002eca:	88aa      	ldrh	r2, [r5, #4]
 8002ecc:	4633      	mov	r3, r6
 8002ece:	f000 fa01 	bl	80032d4 <PCD_ReadPMA>
 8002ed2:	e031      	b.n	8002f38 <HAL_PCD_IRQHandler+0x292>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002ed4:	b21a      	sxth	r2, r3
 8002ed6:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eda:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002ede:	f412 4f80 	tst.w	r2, #16384	; 0x4000
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ee2:	b289      	uxth	r1, r1
 8002ee4:	f04f 0208 	mov.w	r2, #8
 8002ee8:	fb12 1303 	smlabb	r3, r2, r3, r1
 8002eec:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8002ef0:	d008      	beq.n	8002f04 <HAL_PCD_IRQHandler+0x25e>
          {
            /*read from endpoint BUF0Addr buffer*/
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ef2:	f8d3 6404 	ldr.w	r6, [r3, #1028]	; 0x404
 8002ef6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002efa:	b2b6      	uxth	r6, r6
            if (count != 0)
 8002efc:	b16e      	cbz	r6, 8002f1a <HAL_PCD_IRQHandler+0x274>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002efe:	6929      	ldr	r1, [r5, #16]
 8002f00:	88ea      	ldrh	r2, [r5, #6]
 8002f02:	e007      	b.n	8002f14 <HAL_PCD_IRQHandler+0x26e>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f04:	f8d3 640c 	ldr.w	r6, [r3, #1036]	; 0x40c
 8002f08:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8002f0c:	b2b6      	uxth	r6, r6
            if (count != 0)
 8002f0e:	b126      	cbz	r6, 8002f1a <HAL_PCD_IRQHandler+0x274>
            {
              PCD_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002f10:	6929      	ldr	r1, [r5, #16]
 8002f12:	892a      	ldrh	r2, [r5, #8]
 8002f14:	4633      	mov	r3, r6
 8002f16:	f000 f9dd 	bl	80032d4 <PCD_ReadPMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8002f1a:	f899 1004 	ldrb.w	r1, [r9, #4]
 8002f1e:	6822      	ldr	r2, [r4, #0]
 8002f20:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8002f24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f28:	051b      	lsls	r3, r3, #20
 8002f2a:	0d1b      	lsrs	r3, r3, #20
 8002f2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f30:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002f34:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002f38:	69ab      	ldr	r3, [r5, #24]
        ep->xfer_buff+=count;
 8002f3a:	692a      	ldr	r2, [r5, #16]
 8002f3c:	f899 1004 	ldrb.w	r1, [r9, #4]
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
 8002f40:	4433      	add	r3, r6
 8002f42:	61ab      	str	r3, [r5, #24]
        ep->xfer_buff+=count;
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8002f44:	696b      	ldr	r3, [r5, #20]
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
        }
        /*multi-packet on the NON control OUT endpoint*/
        ep->xfer_count+=count;
        ep->xfer_buff+=count;
 8002f46:	4432      	add	r2, r6
 8002f48:	612a      	str	r2, [r5, #16]
       
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8002f4a:	b113      	cbz	r3, 8002f52 <HAL_PCD_IRQHandler+0x2ac>
 8002f4c:	68e8      	ldr	r0, [r5, #12]
 8002f4e:	4286      	cmp	r6, r0
 8002f50:	d203      	bcs.n	8002f5a <HAL_PCD_IRQHandler+0x2b4>
        {
          /* RX COMPLETE */
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002f52:	4620      	mov	r0, r4
 8002f54:	f001 fb51 	bl	80045fa <HAL_PCD_DataOutStageCallback>
 8002f58:	e002      	b.n	8002f60 <HAL_PCD_IRQHandler+0x2ba>
        }
        else
        {
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f7ff fd87 	bl	8002a6e <HAL_PCD_EP_Receive>
        }
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8002f60:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8002f64:	061a      	lsls	r2, r3, #24
 8002f66:	f57f aebc 	bpl.w	8002ce2 <HAL_PCD_IRQHandler+0x3c>
      {
        ep = &hpcd->IN_ep[EPindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002f6a:	6820      	ldr	r0, [r4, #0]
 8002f6c:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8002f70:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
 8002f74:	261c      	movs	r6, #28
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002f76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
 8002f7a:	fb06 f608 	mul.w	r6, r6, r8
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002f7e:	041b      	lsls	r3, r3, #16
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
 8002f80:	3628      	adds	r6, #40	; 0x28
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
 8002f82:	0c1b      	lsrs	r3, r3, #16
 8002f84:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        
      } /* if((wEPVal & EP_CTR_RX) */
      
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[EPindex];
 8002f88:	19a5      	adds	r5, r4, r6
 8002f8a:	5da3      	ldrb	r3, [r4, r6]
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, EPindex);
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8002f8c:	7aaa      	ldrb	r2, [r5, #10]
 8002f8e:	b992      	cbnz	r2, 8002fb6 <HAL_PCD_IRQHandler+0x310>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002f90:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002f94:	b292      	uxth	r2, r2
 8002f96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002f9a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002f9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002fa2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fa6:	61ab      	str	r3, [r5, #24]
          if (ep->xfer_count != 0)
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d034      	beq.n	8003016 <HAL_PCD_IRQHandler+0x370>
          {
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8002fac:	6929      	ldr	r1, [r5, #16]
 8002fae:	88aa      	ldrh	r2, [r5, #4]
 8002fb0:	f000 f979 	bl	80032a6 <PCD_WritePMA>
 8002fb4:	e02f      	b.n	8003016 <HAL_PCD_IRQHandler+0x370>
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002fb6:	b21a      	sxth	r2, r3
 8002fb8:	f830 2022 	ldrh.w	r2, [r0, r2, lsl #2]
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fbc:	f8b0 1050 	ldrh.w	r1, [r0, #80]	; 0x50
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002fc0:	f012 0f40 	tst.w	r2, #64	; 0x40
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fc4:	b289      	uxth	r1, r1
 8002fc6:	f04f 0208 	mov.w	r2, #8
 8002fca:	fb12 1303 	smlabb	r3, r2, r3, r1
 8002fce:	eb00 0343 	add.w	r3, r0, r3, lsl #1
            PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
          }
        }
        else
        {
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8002fd2:	d008      	beq.n	8002fe6 <HAL_PCD_IRQHandler+0x340>
          {
            /*read from endpoint BUF0Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002fd4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8002fd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fdc:	61ab      	str	r3, [r5, #24]
            if (ep->xfer_count != 0)
 8002fde:	b163      	cbz	r3, 8002ffa <HAL_PCD_IRQHandler+0x354>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8002fe0:	6929      	ldr	r1, [r5, #16]
 8002fe2:	88ea      	ldrh	r2, [r5, #6]
 8002fe4:	e007      	b.n	8002ff6 <HAL_PCD_IRQHandler+0x350>
            }
          }
          else
          {
            /*read from endpoint BUF1Addr buffer*/
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002fe6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002fee:	61ab      	str	r3, [r5, #24]
            if (ep->xfer_count != 0)
 8002ff0:	b11b      	cbz	r3, 8002ffa <HAL_PCD_IRQHandler+0x354>
            {
              PCD_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8002ff2:	6929      	ldr	r1, [r5, #16]
 8002ff4:	892a      	ldrh	r2, [r5, #8]
 8002ff6:	f000 f956 	bl	80032a6 <PCD_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8002ffa:	5da1      	ldrb	r1, [r4, r6]
 8002ffc:	6822      	ldr	r2, [r4, #0]
 8002ffe:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8003002:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003006:	051b      	lsls	r3, r3, #20
 8003008:	0d1b      	lsrs	r3, r3, #20
 800300a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800300e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003012:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003016:	6823      	ldr	r3, [r4, #0]
 8003018:	5da1      	ldrb	r1, [r4, r6]
 800301a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800301e:	b292      	uxth	r2, r2
 8003020:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8003024:	eb03 0342 	add.w	r3, r3, r2, lsl #1
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003028:	4620      	mov	r0, r4
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800302a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
        ep->xfer_buff+=ep->xfer_count;
 800302e:	692b      	ldr	r3, [r5, #16]
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003030:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8003034:	61aa      	str	r2, [r5, #24]
        ep->xfer_buff+=ep->xfer_count;
 8003036:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 8003038:	696b      	ldr	r3, [r5, #20]
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
        ep->xfer_buff+=ep->xfer_count;
 800303a:	612a      	str	r2, [r5, #16]
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 800303c:	b913      	cbnz	r3, 8003044 <HAL_PCD_IRQHandler+0x39e>
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800303e:	f001 fae5 	bl	800460c <HAL_PCD_DataInStageCallback>
 8003042:	e64e      	b.n	8002ce2 <HAL_PCD_IRQHandler+0x3c>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8003044:	f7ff fd83 	bl	8002b4e <HAL_PCD_EP_Transmit>
 8003048:	e64b      	b.n	8002ce2 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
    HAL_PCD_ResetCallback(hpcd);
    HAL_PCD_SetAddress(hpcd, 0);
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVRM))
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003050:	0457      	lsls	r7, r2, #17
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVRM);    
 8003052:	bf44      	itt	mi
 8003054:	f64b 72ff 	movwmi	r2, #49151	; 0xbfff
 8003058:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 800305c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003060:	0496      	lsls	r6, r2, #18
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8003062:	bf44      	itt	mi
 8003064:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 8003068:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 800306c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003070:	04d5      	lsls	r5, r2, #19
 8003072:	d513      	bpl.n	800309c <HAL_PCD_IRQHandler+0x3f6>
  {  
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8003074:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003078:	f022 0204 	bic.w	r2, r2, #4
 800307c:	0412      	lsls	r2, r2, #16
 800307e:	0c12      	lsrs	r2, r2, #16
 8003080:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    /*set wInterrupt_Mask global variable*/
    wInterrupt_Mask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
      | USB_CNTR_ESOFM | USB_CNTR_RESETM;
    
    /*Set interrupt mask*/
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8003084:	f44f 423d 	mov.w	r2, #48384	; 0xbd00
 8003088:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    
    HAL_PCD_ResumeCallback(hpcd);
 800308c:	4620      	mov	r0, r4
 800308e:	f001 fad7 	bl	8004640 <HAL_PCD_ResumeCallback>
    
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	f64e 72ff 	movw	r2, #61439	; 0xefff
 8003098:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80030a2:	0510      	lsls	r0, r2, #20
 80030a4:	d518      	bpl.n	80030d8 <HAL_PCD_IRQHandler+0x432>
  {    
    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 80030a6:	f24f 72ff 	movw	r2, #63487	; 0xf7ff
 80030aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 80030ae:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80030b2:	b292      	uxth	r2, r2
 80030b4:	f042 0208 	orr.w	r2, r2, #8
 80030b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 80030bc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80030c0:	b292      	uxth	r2, r2
 80030c2:	f042 0204 	orr.w	r2, r2, #4
 80030c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 80030ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80030ce:	04d9      	lsls	r1, r3, #19
 80030d0:	d402      	bmi.n	80030d8 <HAL_PCD_IRQHandler+0x432>
    {
      HAL_PCD_SuspendCallback(hpcd);
 80030d2:	4620      	mov	r0, r4
 80030d4:	f001 fab3 	bl	800463e <HAL_PCD_SuspendCallback>
    }
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80030de:	0592      	lsls	r2, r2, #22
 80030e0:	d506      	bpl.n	80030f0 <HAL_PCD_IRQHandler+0x44a>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80030e2:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 80030e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80030ea:	4620      	mov	r0, r4
 80030ec:	f001 fa96 	bl	800461c <HAL_PCD_SOFCallback>
  }

  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80030f6:	05d7      	lsls	r7, r2, #23
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80030f8:	bf44      	itt	mi
 80030fa:	f64f 62ff 	movwmi	r2, #65279	; 0xfeff
 80030fe:	f8a3 2044 	strhmi.w	r2, [r3, #68]	; 0x44
  }
}
 8003102:	b003      	add	sp, #12
 8003104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08003108 <HAL_PCD_EP_SetStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003108:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 800310c:	2b01      	cmp	r3, #1
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800310e:	b510      	push	{r4, lr}
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003110:	d049      	beq.n	80031a6 <HAL_PCD_EP_SetStall+0x9e>
   
  if ((0x80 & ep_addr) == 0x80)
 8003112:	b2cc      	uxtb	r4, r1
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 8003114:	2301      	movs	r3, #1
   
  if ((0x80 & ep_addr) == 0x80)
 8003116:	f014 0f80 	tst.w	r4, #128	; 0x80
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 800311a:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 800311e:	f001 027f 	and.w	r2, r1, #127	; 0x7f
 8003122:	f04f 031c 	mov.w	r3, #28
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003126:	bf15      	itete	ne
 8003128:	fb03 0302 	mlane	r3, r3, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800312c:	fb03 0301 	mlaeq	r3, r3, r1, r0
   
  __HAL_LOCK(hpcd); 
   
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8003130:	3328      	addne	r3, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003132:	33b4      	addeq	r3, #180	; 0xb4
  }
  
  ep->is_stall = 1;
 8003134:	2101      	movs	r1, #1
 8003136:	7099      	strb	r1, [r3, #2]
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8003138:	09e4      	lsrs	r4, r4, #7
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 1;
  ep->num   = ep_addr & 0x7F;
 800313a:	b2d1      	uxtb	r1, r2
 800313c:	7019      	strb	r1, [r3, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800313e:	705c      	strb	r4, [r3, #1]
 8003140:	6802      	ldr	r2, [r0, #0]
  
  if (ep->num == 0)
 8003142:	b981      	cbnz	r1, 8003166 <HAL_PCD_EP_SetStall+0x5e>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8003144:	8813      	ldrh	r3, [r2, #0]
 8003146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800314a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003156:	f083 0310 	eor.w	r3, r3, #16
 800315a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800315e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003162:	8013      	strh	r3, [r2, #0]
 8003164:	e01a      	b.n	800319c <HAL_PCD_EP_SetStall+0x94>
 8003166:	b209      	sxth	r1, r1
  }
  else
  {
    if (ep->is_in)
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 8003168:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
  }
  else
  {
    if (ep->is_in)
 800316c:	b144      	cbz	r4, 8003180 <HAL_PCD_EP_SetStall+0x78>
    {
      PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num , USB_EP_TX_STALL); 
 800316e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003176:	041b      	lsls	r3, r3, #16
 8003178:	0c1b      	lsrs	r3, r3, #16
 800317a:	f083 0310 	eor.w	r3, r3, #16
 800317e:	e007      	b.n	8003190 <HAL_PCD_EP_SetStall+0x88>
    }
    else
    {
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num , USB_EP_RX_STALL);
 8003180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003190:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003198:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
    }
  }
  __HAL_UNLOCK(hpcd); 
 800319c:	2300      	movs	r3, #0
 800319e:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
  
  return HAL_OK;
 80031a2:	4618      	mov	r0, r3
 80031a4:	bd10      	pop	{r4, pc}
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
   
  __HAL_LOCK(hpcd); 
 80031a6:	2002      	movs	r0, #2
    }
  }
  __HAL_UNLOCK(hpcd); 
  
  return HAL_OK;
}
 80031a8:	bd10      	pop	{r4, pc}

080031aa <HAL_PCD_EP_ClrStall>:
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
 80031aa:	b2cb      	uxtb	r3, r1
 80031ac:	f013 0f80 	tst.w	r3, #128	; 0x80
 80031b0:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  * @param  hpcd: PCD handle
  * @param  ep_addr: endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b4:	b510      	push	{r4, lr}
 80031b6:	f04f 041c 	mov.w	r4, #28
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80031ba:	bf15      	itete	ne
 80031bc:	fb04 0102 	mlane	r1, r4, r2, r0
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031c0:	fb04 0101 	mlaeq	r1, r4, r1, r0
{
  PCD_EPTypeDef *ep;
  
  if ((0x80 & ep_addr) == 0x80)
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80031c4:	3128      	addne	r1, #40	; 0x28
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031c6:	31b4      	addeq	r1, #180	; 0xb4
  }
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80031c8:	09db      	lsrs	r3, r3, #7
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
  }
  
  ep->is_stall = 0;
 80031ca:	2400      	movs	r4, #0
 80031cc:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80031ce:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80031d0:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 80031d2:	f890 3140 	ldrb.w	r3, [r0, #320]	; 0x140
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d049      	beq.n	800326e <HAL_PCD_EP_ClrStall+0xc4>
 80031da:	2301      	movs	r3, #1
 80031dc:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
 80031e0:	780c      	ldrb	r4, [r1, #0]
  
  if (ep->is_in)
 80031e2:	784a      	ldrb	r2, [r1, #1]
 80031e4:	6803      	ldr	r3, [r0, #0]
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80031e6:	b224      	sxth	r4, r4
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
  
  if (ep->is_in)
 80031e8:	b1da      	cbz	r2, 8003222 <HAL_PCD_EP_ClrStall+0x78>
  {
    PCD_CLEAR_TX_DTOG(hpcd->Instance, ep->num);
 80031ea:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031ee:	0652      	lsls	r2, r2, #25
 80031f0:	d50b      	bpl.n	800320a <HAL_PCD_EP_ClrStall+0x60>
 80031f2:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 80031f6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80031fa:	0512      	lsls	r2, r2, #20
 80031fc:	0d12      	lsrs	r2, r2, #20
 80031fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003202:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8003206:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800320a:	7809      	ldrb	r1, [r1, #0]
 800320c:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003210:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8003214:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003218:	0412      	lsls	r2, r2, #16
 800321a:	0c12      	lsrs	r2, r2, #16
 800321c:	f082 0230 	eor.w	r2, r2, #48	; 0x30
 8003220:	e01a      	b.n	8003258 <HAL_PCD_EP_ClrStall+0xae>
  }
  else
  {
    PCD_CLEAR_RX_DTOG(hpcd->Instance, ep->num);
 8003222:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 8003226:	0452      	lsls	r2, r2, #17
 8003228:	d50b      	bpl.n	8003242 <HAL_PCD_EP_ClrStall+0x98>
 800322a:	f833 2024 	ldrh.w	r2, [r3, r4, lsl #2]
 800322e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003232:	0512      	lsls	r2, r2, #20
 8003234:	0d12      	lsrs	r2, r2, #20
 8003236:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800323a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800323e:	f823 2024 	strh.w	r2, [r3, r4, lsl #2]
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
 8003242:	7809      	ldrb	r1, [r1, #0]
 8003244:	f833 2021 	ldrh.w	r2, [r3, r1, lsl #2]
 8003248:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800324c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003250:	0412      	lsls	r2, r2, #16
 8003252:	0c12      	lsrs	r2, r2, #16
 8003254:	f482 5240 	eor.w	r2, r2, #12288	; 0x3000
 8003258:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800325c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003260:	f823 2021 	strh.w	r2, [r3, r1, lsl #2]
  }
  __HAL_UNLOCK(hpcd); 
 8003264:	2300      	movs	r3, #0
 8003266:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
    
  return HAL_OK;
 800326a:	4618      	mov	r0, r3
 800326c:	bd10      	pop	{r4, pc}
  
  ep->is_stall = 0;
  ep->num   = ep_addr & 0x7F;
  ep->is_in = ((ep_addr & 0x80) == 0x80);
  
  __HAL_LOCK(hpcd); 
 800326e:	2002      	movs	r0, #2
    PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_VALID);
  }
  __HAL_UNLOCK(hpcd); 
    
  return HAL_OK;
}
 8003270:	bd10      	pop	{r4, pc}

08003272 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8003272:	f011 0f80 	tst.w	r1, #128	; 0x80
HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, 
                        uint16_t ep_addr,
                        uint16_t ep_kind,
                        uint32_t pmaadress)

{
 8003276:	b510      	push	{r4, lr}
 8003278:	f04f 041c 	mov.w	r4, #28
  PCD_EPTypeDef *ep;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 800327c:	d005      	beq.n	800328a <HAL_PCDEx_PMAConfig+0x18>
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800327e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8003282:	fb04 0001 	mla	r0, r4, r1, r0
 8003286:	3028      	adds	r0, #40	; 0x28
 8003288:	e002      	b.n	8003290 <HAL_PCDEx_PMAConfig+0x1e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800328a:	fb04 0001 	mla	r0, r4, r1, r0
 800328e:	30b4      	adds	r0, #180	; 0xb4
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003290:	b912      	cbnz	r2, 8003298 <HAL_PCDEx_PMAConfig+0x26>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8003292:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8003294:	8083      	strh	r3, [r0, #4]
 8003296:	e004      	b.n	80032a2 <HAL_PCDEx_PMAConfig+0x30>
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 8003298:	2201      	movs	r2, #1
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800329a:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800329c:	0c1b      	lsrs	r3, r3, #16
    ep->pmaadress = (uint16_t)pmaadress;
  }
  else /*USB_DBL_BUF*/
  {
    /*Double Buffer Endpoint*/
    ep->doublebuffer = 1;
 800329e:	7282      	strb	r2, [r0, #10]
    /*Configure the PMA*/
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 80032a0:	8103      	strh	r3, [r0, #8]
  }
  
  return HAL_OK; 
}
 80032a2:	2000      	movs	r0, #0
 80032a4:	bd10      	pop	{r4, pc}

080032a6 <PCD_WritePMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80032a6:	3301      	adds	r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80032a8:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_WritePMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80032ac:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80032ae:	105b      	asrs	r3, r3, #1
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80032b0:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 80032b4:	2400      	movs	r4, #0
 80032b6:	429c      	cmp	r4, r3
 80032b8:	f101 0102 	add.w	r1, r1, #2
 80032bc:	d009      	beq.n	80032d2 <PCD_WritePMA+0x2c>
  {
    temp1 = (uint16_t) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80032be:	f811 5c01 	ldrb.w	r5, [r1, #-1]
  uint32_t i, temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (i = n; i != 0; i--)
  {
    temp1 = (uint16_t) * pbUsrBuf;
 80032c2:	f811 0c02 	ldrb.w	r0, [r1, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 80032c6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
    *pdwVal++ = temp2;
 80032ca:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 80032ce:	3401      	adds	r4, #1
 80032d0:	e7f1      	b.n	80032b6 <PCD_WritePMA+0x10>
    pdwVal++;
    pbUsrBuf++;
  }
}
 80032d2:	bd30      	pop	{r4, r5, pc}

080032d4 <PCD_ReadPMA>:
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 80032d4:	3301      	adds	r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80032d6:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  * @param   wPMABufAddr: address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void PCD_ReadPMA(USB_TypeDef  *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80032da:	b530      	push	{r4, r5, lr}
  uint32_t n = (wNBytes + 1) >> 1;/* /2*/
 80032dc:	105b      	asrs	r3, r3, #1
  uint32_t i;
  uint32_t *pdwVal;
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 80032de:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (i = n; i != 0; i--)
 80032e2:	2400      	movs	r4, #0
 80032e4:	429c      	cmp	r4, r3
 80032e6:	d005      	beq.n	80032f4 <PCD_ReadPMA+0x20>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 80032e8:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 80032ec:	f821 5014 	strh.w	r5, [r1, r4, lsl #1]
 80032f0:	3401      	adds	r4, #1
 80032f2:	e7f7      	b.n	80032e4 <PCD_ReadPMA+0x10>
    pbUsrBuf++;
  }
}
 80032f4:	bd30      	pop	{r4, r5, pc}

080032f6 <HAL_PCDEx_SetConnectionState>:
  * @param  hpcd: PCD handle
  * @param  state: Device state
  * @retval None
  */
 __weak void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 80032f6:	4770      	bx	lr

080032f8 <I2C_TransferConfig>:
  *     @arg I2C_GENERATE_START_READ: Generate Restart for read request.
  *     @arg I2C_GENERATE_START_WRITE: Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80032f8:	b530      	push	{r4, r5, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80032fa:	6804      	ldr	r4, [r0, #0]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 80032fc:	4806      	ldr	r0, [pc, #24]	; (8003318 <I2C_TransferConfig+0x20>)
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));
    
  /* Get the CR2 register value */
  tmpreg = hi2c->Instance->CR2;
 80032fe:	6865      	ldr	r5, [r4, #4]
  
  /* clear tmpreg specific bits */
  tmpreg &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | I2C_CR2_RD_WRN | I2C_CR2_START | I2C_CR2_STOP));
 8003300:	4028      	ands	r0, r5
  
  /* update tmpreg */
  tmpreg |= (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << 16 ) & I2C_CR2_NBYTES) | \
 8003302:	9d03      	ldr	r5, [sp, #12]
 8003304:	4328      	orrs	r0, r5
 8003306:	4303      	orrs	r3, r0
 8003308:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800330c:	ea43 0001 	orr.w	r0, r3, r1
 8003310:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
            (uint32_t)Mode | (uint32_t)Request);
  
  /* update CR2 register */
  hi2c->Instance->CR2 = tmpreg;  
 8003314:	6062      	str	r2, [r4, #4]
 8003316:	bd30      	pop	{r4, r5, pc}
 8003318:	fc009800 	.word	0xfc009800

0800331c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4604      	mov	r4, r0
 8003320:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003322:	f7fe ff83 	bl	800222c <HAL_GetTick>

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 800332a:	4606      	mov	r6, r0

  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800332c:	f012 0010 	ands.w	r0, r2, #16
 8003330:	d039      	beq.n	80033a6 <I2C_IsAcknowledgeFailed+0x8a>
  {
    /* Generate stop if necessary only in case of I2C peripheral in MASTER mode */
    if((hi2c->State == HAL_I2C_STATE_MASTER_BUSY_TX) || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_TX)
 8003332:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003336:	2a12      	cmp	r2, #18
 8003338:	d007      	beq.n	800334a <I2C_IsAcknowledgeFailed+0x2e>
 800333a:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800333e:	2a52      	cmp	r2, #82	; 0x52
 8003340:	d003      	beq.n	800334a <I2C_IsAcknowledgeFailed+0x2e>
       || (hi2c->State == HAL_I2C_STATE_MEM_BUSY_RX))
 8003342:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003346:	2a62      	cmp	r2, #98	; 0x62
 8003348:	d112      	bne.n	8003370 <I2C_IsAcknowledgeFailed+0x54>
    {
      /* No need to generate the STOP condition if AUTOEND mode is enabled */
      /* Generate the STOP condition only in case of SOFTEND mode is enabled */
      if((hi2c->Instance->CR2 & I2C_AUTOEND_MODE) != I2C_AUTOEND_MODE)
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	0190      	lsls	r0, r2, #6
 800334e:	d40f      	bmi.n	8003370 <I2C_IsAcknowledgeFailed+0x54>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003356:	605a      	str	r2, [r3, #4]
 8003358:	e00a      	b.n	8003370 <I2C_IsAcknowledgeFailed+0x54>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800335a:	699a      	ldr	r2, [r3, #24]
 800335c:	0692      	lsls	r2, r2, #26
 800335e:	d411      	bmi.n	8003384 <I2C_IsAcknowledgeFailed+0x68>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8003360:	1c69      	adds	r1, r5, #1
 8003362:	d0fa      	beq.n	800335a <I2C_IsAcknowledgeFailed+0x3e>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003364:	b135      	cbz	r5, 8003374 <I2C_IsAcknowledgeFailed+0x58>
 8003366:	f7fe ff61 	bl	800222c <HAL_GetTick>
 800336a:	1b80      	subs	r0, r0, r6
 800336c:	42a8      	cmp	r0, r5
 800336e:	d801      	bhi.n	8003374 <I2C_IsAcknowledgeFailed+0x58>
      }
    }
		
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003370:	6823      	ldr	r3, [r4, #0]
 8003372:	e7f2      	b.n	800335a <I2C_IsAcknowledgeFailed+0x3e>
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
        {
          hi2c->State= HAL_I2C_STATE_READY;
 8003374:	2301      	movs	r3, #1
 8003376:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800337a:	2300      	movs	r3, #0
 800337c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8003380:	2003      	movs	r0, #3
 8003382:	bd70      	pop	{r4, r5, r6, pc}
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003384:	2210      	movs	r2, #16
 8003386:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003388:	2220      	movs	r2, #32
 800338a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	4a06      	ldr	r2, [pc, #24]	; (80033a8 <I2C_IsAcknowledgeFailed+0x8c>)
 8003390:	400a      	ands	r2, r1
 8003392:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003394:	2304      	movs	r3, #4
 8003396:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    hi2c->State= HAL_I2C_STATE_READY;
 800339a:	2001      	movs	r0, #1

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800339c:	2300      	movs	r3, #0

    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->State= HAL_I2C_STATE_READY;
 800339e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

    return HAL_ERROR;
  }
  return HAL_OK;
}
 80033a6:	bd70      	pop	{r4, r5, r6, pc}
 80033a8:	fe00e800 	.word	0xfe00e800

080033ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Status: The new Flag status (SET or RESET).
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{  
 80033ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033b0:	4604      	mov	r4, r0
 80033b2:	460e      	mov	r6, r1
 80033b4:	4690      	mov	r8, r2
 80033b6:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7fe ff38 	bl	800222c <HAL_GetTick>
 80033bc:	4607      	mov	r7, r0
     
  /* Wait until flag is set */
  if(Status == RESET)
 80033be:	f1b8 0f00 	cmp.w	r8, #0
 80033c2:	d125      	bne.n	8003410 <I2C_WaitOnFlagUntilTimeout+0x64>
  {    
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033c4:	6822      	ldr	r2, [r4, #0]
 80033c6:	6993      	ldr	r3, [r2, #24]
 80033c8:	4033      	ands	r3, r6
 80033ca:	42b3      	cmp	r3, r6
 80033cc:	d00e      	beq.n	80033ec <I2C_WaitOnFlagUntilTimeout+0x40>
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80033ce:	1c69      	adds	r1, r5, #1
 80033d0:	d0f9      	beq.n	80033c6 <I2C_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80033d2:	b17d      	cbz	r5, 80033f4 <I2C_WaitOnFlagUntilTimeout+0x48>
 80033d4:	f7fe ff2a 	bl	800222c <HAL_GetTick>
 80033d8:	1bc0      	subs	r0, r0, r7
 80033da:	42a8      	cmp	r0, r5
 80033dc:	d9f2      	bls.n	80033c4 <I2C_WaitOnFlagUntilTimeout+0x18>
 80033de:	e009      	b.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x48>
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80033e0:	1c6b      	adds	r3, r5, #1
 80033e2:	d106      	bne.n	80033f2 <I2C_WaitOnFlagUntilTimeout+0x46>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 80033e4:	6993      	ldr	r3, [r2, #24]
 80033e6:	4033      	ands	r3, r6
 80033e8:	42b3      	cmp	r3, r6
 80033ea:	d0f9      	beq.n	80033e0 <I2C_WaitOnFlagUntilTimeout+0x34>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80033ec:	2000      	movs	r0, #0
 80033ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80033f2:	b945      	cbnz	r5, 8003406 <I2C_WaitOnFlagUntilTimeout+0x5a>
        {
          hi2c->State= HAL_I2C_STATE_READY;
 80033f4:	2301      	movs	r3, #1
 80033f6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033fa:	2300      	movs	r3, #0
 80033fc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          return HAL_TIMEOUT;
 8003400:	2003      	movs	r0, #3
 8003402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
    {
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003406:	f7fe ff11 	bl	800222c <HAL_GetTick>
 800340a:	1bc0      	subs	r0, r0, r7
 800340c:	42a8      	cmp	r0, r5
 800340e:	d8f1      	bhi.n	80033f4 <I2C_WaitOnFlagUntilTimeout+0x48>
      }
    }
  }
  else
  {
    while(__HAL_I2C_GET_FLAG(hi2c, Flag) != RESET)
 8003410:	6822      	ldr	r2, [r4, #0]
 8003412:	e7e7      	b.n	80033e4 <I2C_WaitOnFlagUntilTimeout+0x38>

08003414 <I2C_WaitOnTXISFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)  
{  
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	4604      	mov	r4, r0
 8003418:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800341a:	f7fe ff07 	bl	800222c <HAL_GetTick>
 800341e:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003420:	6823      	ldr	r3, [r4, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	0798      	lsls	r0, r3, #30
 8003426:	d41b      	bmi.n	8003460 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003428:	4620      	mov	r0, r4
 800342a:	4629      	mov	r1, r5
 800342c:	f7ff ff76 	bl	800331c <I2C_IsAcknowledgeFailed>
 8003430:	b9c0      	cbnz	r0, 8003464 <I2C_WaitOnTXISFlagUntilTimeout+0x50>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003432:	1c6b      	adds	r3, r5, #1
 8003434:	d0f4      	beq.n	8003420 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003436:	b96d      	cbnz	r5, 8003454 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003438:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800343c:	f043 0320 	orr.w	r3, r3, #32
 8003440:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
        hi2c->State= HAL_I2C_STATE_READY;
 8003444:	2301      	movs	r3, #1
 8003446:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 8003450:	2003      	movs	r0, #3
 8003452:	bd70      	pop	{r4, r5, r6, pc}
    }
		
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003454:	f7fe feea 	bl	800222c <HAL_GetTick>
 8003458:	1b80      	subs	r0, r0, r6
 800345a:	42a8      	cmp	r0, r5
 800345c:	d9e0      	bls.n	8003420 <I2C_WaitOnTXISFlagUntilTimeout+0xc>
 800345e:	e7eb      	b.n	8003438 <I2C_WaitOnTXISFlagUntilTimeout+0x24>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
 8003460:	2000      	movs	r0, #0
 8003462:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 8003464:	2001      	movs	r0, #1
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;      
}
 8003466:	bd70      	pop	{r4, r5, r6, pc}

08003468 <I2C_RequestMemoryWrite>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800346a:	9d08      	ldr	r5, [sp, #32]
 800346c:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800346e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003472:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003474:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)   
{
 8003476:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800347c:	b2fa      	uxtb	r2, r7
 800347e:	f7ff ff3b 	bl	80032f8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003482:	4620      	mov	r0, r4
 8003484:	4629      	mov	r1, r5
 8003486:	f7ff ffc5 	bl	8003414 <I2C_WaitOnTXISFlagUntilTimeout>
 800348a:	b130      	cbz	r0, 800349a <I2C_RequestMemoryWrite+0x32>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800348c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003490:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 8003492:	bf0c      	ite	eq
 8003494:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 8003496:	2003      	movne	r0, #3
 8003498:	e017      	b.n	80034ca <I2C_RequestMemoryWrite+0x62>
    }
  }

  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800349a:	2f01      	cmp	r7, #1
 800349c:	6823      	ldr	r3, [r4, #0]
 800349e:	d008      	beq.n	80034b2 <I2C_RequestMemoryWrite+0x4a>
  }      
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 80034a0:	0a32      	lsrs	r2, r6, #8
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80034a4:	4620      	mov	r0, r4
 80034a6:	4629      	mov	r1, r5
 80034a8:	f7ff ffb4 	bl	8003414 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d1ed      	bne.n	800348c <I2C_RequestMemoryWrite+0x24>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 80034b0:	6823      	ldr	r3, [r4, #0]
 80034b2:	b2f6      	uxtb	r6, r6
 80034b4:	629e      	str	r6, [r3, #40]	; 0x28
  }
  
  /* Wait until TCR flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80034b6:	4620      	mov	r0, r4
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	2200      	movs	r2, #0
 80034bc:	462b      	mov	r3, r5
 80034be:	f7ff ff75 	bl	80033ac <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 80034c2:	2800      	cmp	r0, #0
 80034c4:	bf14      	ite	ne
 80034c6:	2003      	movne	r0, #3
 80034c8:	2000      	moveq	r0, #0
  }

return HAL_OK;
}
 80034ca:	b003      	add	sp, #12
 80034cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034ce <I2C_RequestMemoryRead>:
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 80034ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80034d0:	9d08      	ldr	r5, [sp, #32]
 80034d2:	461f      	mov	r7, r3
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 80034d8:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034da:	9300      	str	r3, [sp, #0]
  * @param  MemAddSize: Size of internal memory address
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout)
{
 80034dc:	4616      	mov	r6, r2
  I2C_TransferConfig(hi2c,DevAddress,MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034de:	2300      	movs	r3, #0
 80034e0:	b2fa      	uxtb	r2, r7
 80034e2:	f7ff ff09 	bl	80032f8 <I2C_TransferConfig>
  
  /* Wait until TXIS flag is set */
  if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80034e6:	4620      	mov	r0, r4
 80034e8:	4629      	mov	r1, r5
 80034ea:	f7ff ff93 	bl	8003414 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ee:	b130      	cbz	r0, 80034fe <I2C_RequestMemoryRead+0x30>
  {
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034f0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80034f4:	2b04      	cmp	r3, #4
    {
      return HAL_ERROR;
 80034f6:	bf0c      	ite	eq
 80034f8:	2001      	moveq	r0, #1
    }
    else
    {
      return HAL_TIMEOUT;
 80034fa:	2003      	movne	r0, #3
 80034fc:	e017      	b.n	800352e <I2C_RequestMemoryRead+0x60>
    }
  }
  
  /* If Memory address size is 8Bit */
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034fe:	2f01      	cmp	r7, #1
 8003500:	6823      	ldr	r3, [r4, #0]
 8003502:	d008      	beq.n	8003516 <I2C_RequestMemoryRead+0x48>
  }      
  /* If Mememory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_MSB(MemAddress); 
 8003504:	0a32      	lsrs	r2, r6, #8
 8003506:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Wait until TXIS flag is set */
    if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 8003508:	4620      	mov	r0, r4
 800350a:	4629      	mov	r1, r5
 800350c:	f7ff ff82 	bl	8003414 <I2C_WaitOnTXISFlagUntilTimeout>
 8003510:	2800      	cmp	r0, #0
 8003512:	d1ed      	bne.n	80034f0 <I2C_RequestMemoryRead+0x22>
        return HAL_TIMEOUT;
      }
    }
    
    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = __HAL_I2C_MEM_ADD_LSB(MemAddress);  
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	b2f6      	uxtb	r6, r6
 8003518:	629e      	str	r6, [r3, #40]	; 0x28
  }
  
  /* Wait until TC flag is set */
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout) != HAL_OK)      
 800351a:	4620      	mov	r0, r4
 800351c:	2140      	movs	r1, #64	; 0x40
 800351e:	2200      	movs	r2, #0
 8003520:	462b      	mov	r3, r5
 8003522:	f7ff ff43 	bl	80033ac <I2C_WaitOnFlagUntilTimeout>
  {
    return HAL_TIMEOUT;
 8003526:	2800      	cmp	r0, #0
 8003528:	bf14      	ite	ne
 800352a:	2003      	movne	r0, #3
 800352c:	2000      	moveq	r0, #0
  }
  
  return HAL_OK;
}
 800352e:	b003      	add	sp, #12
 8003530:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003532 <I2C_WaitOnSTOPFlagUntilTimeout>:
  *                the configuration information for the specified I2C.
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout)
{  
 8003532:	b570      	push	{r4, r5, r6, lr}
 8003534:	4604      	mov	r4, r0
 8003536:	460d      	mov	r5, r1
  uint32_t tickstart = 0x00;
  tickstart = HAL_GetTick();
 8003538:	f7fe fe78 	bl	800222c <HAL_GetTick>
 800353c:	4606      	mov	r6, r0
  
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	069a      	lsls	r2, r3, #26
 8003544:	d419      	bmi.n	800357a <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
 8003546:	4620      	mov	r0, r4
 8003548:	4629      	mov	r1, r5
 800354a:	f7ff fee7 	bl	800331c <I2C_IsAcknowledgeFailed>
 800354e:	b9b0      	cbnz	r0, 800357e <I2C_WaitOnSTOPFlagUntilTimeout+0x4c>
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003550:	b96d      	cbnz	r5, 800356e <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003552:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003556:	f043 0320 	orr.w	r3, r3, #32
 800355a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
      hi2c->State= HAL_I2C_STATE_READY;
 800355e:	2301      	movs	r3, #1
 8003560:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003564:	2300      	movs	r3, #0
 8003566:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 800356a:	2003      	movs	r0, #3
 800356c:	bd70      	pop	{r4, r5, r6, pc}
    {
      return HAL_ERROR;
    }
		
    /* Check for the Timeout */
    if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800356e:	f7fe fe5d 	bl	800222c <HAL_GetTick>
 8003572:	1b80      	subs	r0, r0, r6
 8003574:	42a8      	cmp	r0, r5
 8003576:	d9e2      	bls.n	800353e <I2C_WaitOnSTOPFlagUntilTimeout+0xc>
 8003578:	e7eb      	b.n	8003552 <I2C_WaitOnSTOPFlagUntilTimeout+0x20>
      __HAL_UNLOCK(hi2c);

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800357a:	2000      	movs	r0, #0
 800357c:	bd70      	pop	{r4, r5, r6, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
  {
    /* Check if a NACK is detected */
    if(I2C_IsAcknowledgeFailed(hi2c, Timeout) != HAL_OK)
    {
      return HAL_ERROR;
 800357e:	2001      	movs	r0, #1

      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
}
 8003580:	bd70      	pop	{r4, r5, r6, pc}

08003582 <HAL_I2C_MspInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003582:	4770      	bx	lr

08003584 <HAL_I2C_Init>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
 8003584:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003586:	4604      	mov	r4, r0
 8003588:	2800      	cmp	r0, #0
 800358a:	d041      	beq.n	8003610 <HAL_I2C_Init+0x8c>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800358c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003590:	b90b      	cbnz	r3, 8003596 <HAL_I2C_Init+0x12>
  {
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003592:	f7ff fff6 	bl	8003582 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003596:	2302      	movs	r3, #2
 8003598:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	68e1      	ldr	r1, [r4, #12]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	f022 0201 	bic.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]
  
  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035a8:	6862      	ldr	r2, [r4, #4]
 80035aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035ae:	611a      	str	r2, [r3, #16]
  
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035b6:	609a      	str	r2, [r3, #8]
  if(hi2c->Init.OwnAddress1 != 0)
 80035b8:	68a2      	ldr	r2, [r4, #8]
 80035ba:	b142      	cbz	r2, 80035ce <HAL_I2C_Init+0x4a>
  {
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035bc:	2901      	cmp	r1, #1
 80035be:	d103      	bne.n	80035c8 <HAL_I2C_Init+0x44>
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80035c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035c4:	609a      	str	r2, [r3, #8]
 80035c6:	e007      	b.n	80035d8 <HAL_I2C_Init+0x54>
    }
    else /* I2C_ADDRESSINGMODE_10BIT */
    {
      hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80035c8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80035cc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035ce:	2902      	cmp	r1, #2
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80035d0:	bf04      	itt	eq
 80035d2:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80035d6:	605a      	streq	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035d8:	685a      	ldr	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035da:	6961      	ldr	r1, [r4, #20]
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80035dc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80035e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035e4:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80035e6:	6922      	ldr	r2, [r4, #16]
 80035e8:	4311      	orrs	r1, r2
 80035ea:	69a2      	ldr	r2, [r4, #24]
 80035ec:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
 80035f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035f2:	6a21      	ldr	r1, [r4, #32]
 80035f4:	69e2      	ldr	r2, [r4, #28]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	f042 0201 	orr.w	r2, r2, #1
 8003600:	601a      	str	r2, [r3, #0]
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003602:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8003604:	2301      	movs	r3, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
  
  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003606:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_READY;
 800360a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  
  return HAL_OK;
 800360e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{ 
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003610:	2001      	movs	r0, #1
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  
  return HAL_OK;
}
 8003612:	bd10      	pop	{r4, pc}

08003614 <HAL_I2C_MspDeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
 __weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003614:	4770      	bx	lr

08003616 <HAL_I2C_DeInit>:
  * @param  hi2c : Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003616:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8003618:	4604      	mov	r4, r0
 800361a:	b188      	cbz	r0, 8003640 <HAL_I2C_DeInit+0x2a>
  }
  
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  
  hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	2302      	movs	r3, #2
 800361e:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
  
  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003622:	6803      	ldr	r3, [r0, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800362c:	f7ff fff2 	bl	8003614 <HAL_I2C_MspDeInit>
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003630:	2000      	movs	r0, #0
 8003632:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
  hi2c->State = HAL_I2C_STATE_RESET;
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003636:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
  
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_RESET;
 800363a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
 800363e:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if(hi2c == NULL)
  {
    return HAL_ERROR;
 8003640:	2001      	movs	r0, #1
  
  /* Release Lock */
  __HAL_UNLOCK(hi2c);

  return HAL_OK;
}
 8003642:	bd10      	pop	{r4, pc}

08003644 <HAL_I2C_Mem_Write>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003644:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003648:	f890 a035 	ldrb.w	sl, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800364c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8003650:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 8003654:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003658:	fa5f fa8a 	uxtb.w	sl, sl
 800365c:	f1ba 0f01 	cmp.w	sl, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003660:	4604      	mov	r4, r0
 8003662:	460f      	mov	r7, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003664:	d164      	bne.n	8003730 <HAL_I2C_Mem_Write+0xec>
  { 
    if((pData == NULL) || (Size == 0)) 
 8003666:	f1b8 0f00 	cmp.w	r8, #0
 800366a:	d101      	bne.n	8003670 <HAL_I2C_Mem_Write+0x2c>
    {
      return  HAL_ERROR;                                    
 800366c:	2001      	movs	r0, #1
 800366e:	e062      	b.n	8003736 <HAL_I2C_Mem_Write+0xf2>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  { 
    if((pData == NULL) || (Size == 0)) 
 8003670:	2d00      	cmp	r5, #0
 8003672:	d0fb      	beq.n	800366c <HAL_I2C_Mem_Write+0x28>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003674:	6806      	ldr	r6, [r0, #0]
 8003676:	69b6      	ldr	r6, [r6, #24]
 8003678:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 800367c:	d158      	bne.n	8003730 <HAL_I2C_Mem_Write+0xec>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800367e:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 8003682:	f1bc 0f01 	cmp.w	ip, #1
 8003686:	d053      	beq.n	8003730 <HAL_I2C_Mem_Write+0xec>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
 8003688:	f04f 0e52 	mov.w	lr, #82	; 0x52
 800368c:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003690:	f880 a034 	strb.w	sl, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_TX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003694:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8003698:	f8cd 9000 	str.w	r9, [sp]
 800369c:	f7ff fee4 	bl	8003468 <I2C_RequestMemoryWrite>
 80036a0:	b120      	cbz	r0, 80036ac <HAL_I2C_Mem_Write+0x68>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036a6:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 80036aa:	e031      	b.n	8003710 <HAL_I2C_Mem_Write+0xcc>

    /* Set NBYTES to write and reload if size > 255 */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036ac:	9000      	str	r0, [sp, #0]
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 80036ae:	2dff      	cmp	r5, #255	; 0xff
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036b0:	4620      	mov	r0, r4
 80036b2:	4639      	mov	r1, r7
        {
          return HAL_TIMEOUT;
        }

        
        if(Size > 255)
 80036b4:	d81c      	bhi.n	80036f0 <HAL_I2C_Mem_Write+0xac>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036b6:	b2ea      	uxtb	r2, r5
 80036b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036bc:	f7ff fe1c 	bl	80032f8 <I2C_TransferConfig>
      Sizetmp = Size;
 80036c0:	462e      	mov	r6, r5
    }
    
    do
    {
      /* Wait until TXIS flag is set */
      if(I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout) != HAL_OK)
 80036c2:	4620      	mov	r0, r4
 80036c4:	4649      	mov	r1, r9
 80036c6:	f7ff fea5 	bl	8003414 <I2C_WaitOnTXISFlagUntilTimeout>
 80036ca:	b9f8      	cbnz	r0, 800370c <HAL_I2C_Mem_Write+0xc8>
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	f818 2b01 	ldrb.w	r2, [r8], #1
      Sizetmp--;
      Size--;
 80036d2:	3d01      	subs	r5, #1

      if((Sizetmp == 0)&&(Size!=0))
 80036d4:	3e01      	subs	r6, #1
          return HAL_TIMEOUT;
        }
      }
     
      /* Write data to DR */
      hi2c->Instance->TXDR = (*pData++);
 80036d6:	629a      	str	r2, [r3, #40]	; 0x28
      Sizetmp--;
      Size--;
 80036d8:	b2ad      	uxth	r5, r5

      if((Sizetmp == 0)&&(Size!=0))
 80036da:	d110      	bne.n	80036fe <HAL_I2C_Mem_Write+0xba>
 80036dc:	b18d      	cbz	r5, 8003702 <HAL_I2C_Mem_Write+0xbe>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80036de:	4620      	mov	r0, r4
 80036e0:	2180      	movs	r1, #128	; 0x80
 80036e2:	4632      	mov	r2, r6
 80036e4:	464b      	mov	r3, r9
 80036e6:	f7ff fe61 	bl	80033ac <I2C_WaitOnFlagUntilTimeout>
 80036ea:	bb18      	cbnz	r0, 8003734 <HAL_I2C_Mem_Write+0xf0>
        }

        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036ec:	9600      	str	r6, [sp, #0]
 80036ee:	e7de      	b.n	80036ae <HAL_I2C_Mem_Write+0x6a>
 80036f0:	22ff      	movs	r2, #255	; 0xff
 80036f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036f6:	f7ff fdff 	bl	80032f8 <I2C_TransferConfig>
          Sizetmp = 255;
 80036fa:	26ff      	movs	r6, #255	; 0xff
 80036fc:	e7e1      	b.n	80036c2 <HAL_I2C_Mem_Write+0x7e>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }
      
    }while(Size > 0);
 80036fe:	2d00      	cmp	r5, #0
 8003700:	d1df      	bne.n	80036c2 <HAL_I2C_Mem_Write+0x7e>
    
    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 8003702:	4620      	mov	r0, r4
 8003704:	2119      	movs	r1, #25
 8003706:	f7ff ff14 	bl	8003532 <I2C_WaitOnSTOPFlagUntilTimeout>
 800370a:	b120      	cbz	r0, 8003716 <HAL_I2C_Mem_Write+0xd2>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800370c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8003710:	2b04      	cmp	r3, #4
 8003712:	d10f      	bne.n	8003734 <HAL_I2C_Mem_Write+0xf0>
 8003714:	e7aa      	b.n	800366c <HAL_I2C_Mem_Write+0x28>
        return HAL_TIMEOUT;
      }
    }
    
    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	2220      	movs	r2, #32
 800371a:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 800371c:	6859      	ldr	r1, [r3, #4]
 800371e:	4a07      	ldr	r2, [pc, #28]	; (800373c <HAL_I2C_Mem_Write+0xf8>)
 8003720:	400a      	ands	r2, r1
 8003722:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY; 	  
 8003724:	2301      	movs	r3, #1
 8003726:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800372a:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 800372e:	e002      	b.n	8003736 <HAL_I2C_Mem_Write+0xf2>
  }
  else
  {
    return HAL_BUSY;
 8003730:	2002      	movs	r0, #2
 8003732:	e000      	b.n	8003736 <HAL_I2C_Mem_Write+0xf2>
      if((Sizetmp == 0)&&(Size!=0))
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
 8003734:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003736:	b002      	add	sp, #8
 8003738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800373c:	fe00e800 	.word	0xfe00e800

08003740 <HAL_I2C_Mem_Read>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003740:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003744:	f890 a035 	ldrb.w	sl, [r0, #53]	; 0x35
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003748:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800374c:	f8bd 502c 	ldrh.w	r5, [sp, #44]	; 0x2c
 8003750:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003754:	fa5f fa8a 	uxtb.w	sl, sl
 8003758:	f1ba 0f01 	cmp.w	sl, #1
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800375c:	4604      	mov	r4, r0
 800375e:	460f      	mov	r7, r1
  uint32_t Sizetmp = 0;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
 8003760:	d16c      	bne.n	800383c <HAL_I2C_Mem_Read+0xfc>
  {    
    if((pData == NULL) || (Size == 0)) 
 8003762:	f1b8 0f00 	cmp.w	r8, #0
 8003766:	d101      	bne.n	800376c <HAL_I2C_Mem_Read+0x2c>
    {
      return  HAL_ERROR;                                    
 8003768:	2001      	movs	r0, #1
 800376a:	e068      	b.n	800383e <HAL_I2C_Mem_Read+0xfe>
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
  
  if(hi2c->State == HAL_I2C_STATE_READY)
  {    
    if((pData == NULL) || (Size == 0)) 
 800376c:	2d00      	cmp	r5, #0
 800376e:	d0fb      	beq.n	8003768 <HAL_I2C_Mem_Read+0x28>
    {
      return  HAL_ERROR;                                    
    }

    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003770:	6806      	ldr	r6, [r0, #0]
 8003772:	69b6      	ldr	r6, [r6, #24]
 8003774:	f416 4600 	ands.w	r6, r6, #32768	; 0x8000
 8003778:	d160      	bne.n	800383c <HAL_I2C_Mem_Read+0xfc>
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800377a:	f890 c034 	ldrb.w	ip, [r0, #52]	; 0x34
 800377e:	f1bc 0f01 	cmp.w	ip, #1
 8003782:	d05b      	beq.n	800383c <HAL_I2C_Mem_Read+0xfc>
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
 8003784:	f04f 0e62 	mov.w	lr, #98	; 0x62
 8003788:	f880 e035 	strb.w	lr, [r0, #53]	; 0x35
    {
      return HAL_BUSY;
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800378c:	f880 a034 	strb.w	sl, [r0, #52]	; 0x34
    
    hi2c->State = HAL_I2C_STATE_MEM_BUSY_RX;
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003790:	f880 6036 	strb.w	r6, [r0, #54]	; 0x36
    
    /* Send Slave Address and Memory Address */
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout) != HAL_OK)
 8003794:	f8cd 9000 	str.w	r9, [sp]
 8003798:	f7ff fe99 	bl	80034ce <I2C_RequestMemoryRead>
 800379c:	b120      	cbz	r0, 80037a8 <HAL_I2C_Mem_Read+0x68>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379e:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037a2:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
 80037a6:	e038      	b.n	800381a <HAL_I2C_Mem_Read+0xda>
 80037a8:	f44f 5310 	mov.w	r3, #9216	; 0x2400
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if size > 255 and generate RESTART */
    /* Size > 255, need to set RELOAD bit */
    if(Size > 255)
 80037ac:	2dff      	cmp	r5, #255	; 0xff
    {
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80037ae:	9300      	str	r3, [sp, #0]
 80037b0:	4620      	mov	r0, r4
 80037b2:	4639      	mov	r1, r7
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 80037b4:	d821      	bhi.n	80037fa <HAL_I2C_Mem_Read+0xba>
      I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
      Sizetmp = 255;
    }
    else
    {
      I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80037b6:	b2ea      	uxtb	r2, r5
 80037b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037bc:	f7ff fd9c 	bl	80032f8 <I2C_TransferConfig>
      Sizetmp = Size;
 80037c0:	462e      	mov	r6, r5
    }
    
    do
    {  
      /* Wait until RXNE flag is set */
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout) != HAL_OK)      
 80037c2:	4620      	mov	r0, r4
 80037c4:	2104      	movs	r1, #4
 80037c6:	2200      	movs	r2, #0
 80037c8:	464b      	mov	r3, r9
 80037ca:	f7ff fdef 	bl	80033ac <I2C_WaitOnFlagUntilTimeout>
 80037ce:	bb30      	cbnz	r0, 800381e <HAL_I2C_Mem_Read+0xde>
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 80037d0:	6823      	ldr	r3, [r4, #0]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 80037d4:	3d01      	subs	r5, #1

      if((Sizetmp == 0)&&(Size!=0))
 80037d6:	3e01      	subs	r6, #1
      {
        return HAL_TIMEOUT;
      }
          
      /* Read data from RXDR */
      (*pData++) = hi2c->Instance->RXDR;
 80037d8:	f808 3b01 	strb.w	r3, [r8], #1

      /* Decrement the Size counter */
      Sizetmp--;
      Size--;   
 80037dc:	b2ad      	uxth	r5, r5

      if((Sizetmp == 0)&&(Size!=0))
 80037de:	d113      	bne.n	8003808 <HAL_I2C_Mem_Read+0xc8>
 80037e0:	b1a5      	cbz	r5, 800380c <HAL_I2C_Mem_Read+0xcc>
      {
        /* Wait until TCR flag is set */
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
 80037e2:	4620      	mov	r0, r4
 80037e4:	2180      	movs	r1, #128	; 0x80
 80037e6:	4632      	mov	r2, r6
 80037e8:	464b      	mov	r3, r9
 80037ea:	f7ff fddf 	bl	80033ac <I2C_WaitOnFlagUntilTimeout>
 80037ee:	b9b0      	cbnz	r0, 800381e <HAL_I2C_Mem_Read+0xde>
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037f0:	9600      	str	r6, [sp, #0]
 80037f2:	4620      	mov	r0, r4
 80037f4:	4639      	mov	r1, r7
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout) != HAL_OK)      
        {
          return HAL_TIMEOUT;
        }
        
        if(Size > 255)
 80037f6:	2dff      	cmp	r5, #255	; 0xff
 80037f8:	e7dc      	b.n	80037b4 <HAL_I2C_Mem_Read+0x74>
        {
          I2C_TransferConfig(hi2c,DevAddress,255, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80037fa:	22ff      	movs	r2, #255	; 0xff
 80037fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003800:	f7ff fd7a 	bl	80032f8 <I2C_TransferConfig>
          Sizetmp = 255;
 8003804:	26ff      	movs	r6, #255	; 0xff
 8003806:	e7dc      	b.n	80037c2 <HAL_I2C_Mem_Read+0x82>
          I2C_TransferConfig(hi2c,DevAddress,Size, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
          Sizetmp = Size;
        }
      }

    }while(Size > 0);
 8003808:	2d00      	cmp	r5, #0
 800380a:	d1da      	bne.n	80037c2 <HAL_I2C_Mem_Read+0x82>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */ 
    if(I2C_WaitOnSTOPFlagUntilTimeout(hi2c, I2C_TIMEOUT_STOPF) != HAL_OK)
 800380c:	4620      	mov	r0, r4
 800380e:	2119      	movs	r1, #25
 8003810:	f7ff fe8f 	bl	8003532 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003814:	b128      	cbz	r0, 8003822 <HAL_I2C_Mem_Read+0xe2>
    {
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003816:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800381a:	2b04      	cmp	r3, #4
 800381c:	d0a4      	beq.n	8003768 <HAL_I2C_Mem_Read+0x28>
      {
        return HAL_ERROR;
      }
      else
      {
        return HAL_TIMEOUT;
 800381e:	2003      	movs	r0, #3
 8003820:	e00d      	b.n	800383e <HAL_I2C_Mem_Read+0xfe>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003822:	6823      	ldr	r3, [r4, #0]
 8003824:	2220      	movs	r2, #32
 8003826:	61da      	str	r2, [r3, #28]
  	
    /* Clear Configuration Register 2 */
    __HAL_I2C_RESET_CR2(hi2c);
 8003828:	6859      	ldr	r1, [r3, #4]
 800382a:	4a06      	ldr	r2, [pc, #24]	; (8003844 <HAL_I2C_Mem_Read+0x104>)
 800382c:	400a      	ands	r2, r1
 800382e:	605a      	str	r2, [r3, #4]
    
    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	2301      	movs	r3, #1
 8003832:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003836:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    
    return HAL_OK;
 800383a:	e000      	b.n	800383e <HAL_I2C_Mem_Read+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800383c:	2002      	movs	r0, #2
  }
}
 800383e:	b002      	add	sp, #8
 8003840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003844:	fe00e800 	.word	0xfe00e800

08003848 <HAL_I2C_GetState>:
  * @param  hi2c : I2C handle
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
  return hi2c->State;
 8003848:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800384c:	4770      	bx	lr

0800384e <SPI_WaitFlagStateUntilTimeout>:
  * @param State : flag state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 800384e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003852:	4604      	mov	r4, r0
 8003854:	460f      	mov	r7, r1
 8003856:	4616      	mov	r6, r2
 8003858:	461d      	mov	r5, r3
  uint32_t tickstart = HAL_GetTick();
 800385a:	f7fe fce7 	bl	800222c <HAL_GetTick>
 800385e:	4680      	mov	r8, r0
     
  while((hspi->Instance->SR & Flag) != State)
 8003860:	6822      	ldr	r2, [r4, #0]
 8003862:	6893      	ldr	r3, [r2, #8]
 8003864:	403b      	ands	r3, r7
 8003866:	42b3      	cmp	r3, r6
 8003868:	d033      	beq.n	80038d2 <SPI_WaitFlagStateUntilTimeout+0x84>
  {
    if(Timeout != HAL_MAX_DELAY)
 800386a:	1c6b      	adds	r3, r5, #1
 800386c:	d0f9      	beq.n	8003862 <SPI_WaitFlagStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800386e:	b94d      	cbnz	r5, 8003884 <SPI_WaitFlagStateUntilTimeout+0x36>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003870:	6823      	ldr	r3, [r4, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003878:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387a:	6862      	ldr	r2, [r4, #4]
 800387c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003880:	d112      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x5a>
 8003882:	e006      	b.n	8003892 <SPI_WaitFlagStateUntilTimeout+0x44>
     
  while((hspi->Instance->SR & Flag) != State)
  {
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003884:	f7fe fcd2 	bl	800222c <HAL_GetTick>
 8003888:	ebc8 0000 	rsb	r0, r8, r0
 800388c:	42a8      	cmp	r0, r5
 800388e:	d9e7      	bls.n	8003860 <SPI_WaitFlagStateUntilTimeout+0x12>
 8003890:	e7ee      	b.n	8003870 <SPI_WaitFlagStateUntilTimeout+0x22>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003892:	68a2      	ldr	r2, [r4, #8]
 8003894:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003898:	d002      	beq.n	80038a0 <SPI_WaitFlagStateUntilTimeout+0x52>
 800389a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800389e:	d103      	bne.n	80038a8 <SPI_WaitFlagStateUntilTimeout+0x5a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038a6:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 80038a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80038aa:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80038ae:	d107      	bne.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          __HAL_SPI_RESET_CRC(hspi);
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038be:	601a      	str	r2, [r3, #0]
        }
        
        hspi->State= HAL_SPI_STATE_READY;
 80038c0:	2301      	movs	r3, #1
 80038c2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038c6:	2300      	movs	r3, #0
 80038c8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80038cc:	2003      	movs	r0, #3
 80038ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 80038d2:	2000      	movs	r0, #0
}
 80038d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080038d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param State: Fifo state to check
  * @param Timeout : Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout)
{
 80038d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80038dc:	4604      	mov	r4, r0
 80038de:	460f      	mov	r7, r1
 80038e0:	4616      	mov	r6, r2
 80038e2:	461d      	mov	r5, r3
  __IO uint8_t tmpreg __attribute((unused));
  uint32_t tickstart = HAL_GetTick();
 80038e4:	f7fe fca2 	bl	800222c <HAL_GetTick>
 80038e8:	4680      	mov	r8, r0

  while((hspi->Instance->SR & Flag) != State)
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	403a      	ands	r2, r7
 80038f0:	42b2      	cmp	r2, r6
 80038f2:	d03a      	beq.n	800396a <SPI_WaitFifoStateUntilTimeout+0x92>
  {
    if((Flag == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80038f4:	f5b7 6fc0 	cmp.w	r7, #1536	; 0x600
 80038f8:	d104      	bne.n	8003904 <SPI_WaitFifoStateUntilTimeout+0x2c>
 80038fa:	b91e      	cbnz	r6, 8003904 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
 80038fc:	7b1a      	ldrb	r2, [r3, #12]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	f88d 2007 	strb.w	r2, [sp, #7]
    }
    if(Timeout != HAL_MAX_DELAY)
 8003904:	1c6a      	adds	r2, r5, #1
 8003906:	d0f1      	beq.n	80038ec <SPI_WaitFifoStateUntilTimeout+0x14>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003908:	b94d      	cbnz	r5, 800391e <SPI_WaitFifoStateUntilTimeout+0x46>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003912:	605a      	str	r2, [r3, #4]
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003914:	6862      	ldr	r2, [r4, #4]
 8003916:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800391a:	d112      	bne.n	8003942 <SPI_WaitFifoStateUntilTimeout+0x6a>
 800391c:	e006      	b.n	800392c <SPI_WaitFifoStateUntilTimeout+0x54>
    {
      tmpreg = *((__IO uint8_t*)&hspi->Instance->DR);
    }
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 800391e:	f7fe fc85 	bl	800222c <HAL_GetTick>
 8003922:	ebc8 0000 	rsb	r0, r8, r0
 8003926:	42a8      	cmp	r0, r5
 8003928:	d9df      	bls.n	80038ea <SPI_WaitFifoStateUntilTimeout+0x12>
 800392a:	e7ee      	b.n	800390a <SPI_WaitFifoStateUntilTimeout+0x32>
        and slave for their respective CRC calculation */
        
        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
        
        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800392c:	68a2      	ldr	r2, [r4, #8]
 800392e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003932:	d002      	beq.n	800393a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003934:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003938:	d103      	bne.n	8003942 <SPI_WaitFifoStateUntilTimeout+0x6a>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003940:	601a      	str	r2, [r3, #0]
        }
        
        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8003942:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003944:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003948:	d107      	bne.n	800395a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          __HAL_SPI_RESET_CRC(hspi);
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003958:	601a      	str	r2, [r3, #0]
        }
        
        hspi->State = HAL_SPI_STATE_READY;
 800395a:	2301      	movs	r3, #1
 800395c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003960:	2300      	movs	r3, #0
 8003962:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8003966:	2003      	movs	r0, #3
 8003968:	e000      	b.n	800396c <SPI_WaitFifoStateUntilTimeout+0x94>
        return HAL_TIMEOUT;
      }
    }
  }
  
  return HAL_OK;      
 800396a:	2000      	movs	r0, #0
}
 800396c:	b002      	add	sp, #8
 800396e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003972 <SPI_EndRxTxTransaction>:
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 8003972:	b538      	push	{r3, r4, r5, lr}
 8003974:	460d      	mov	r5, r1
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8003976:	2200      	movs	r2, #0
 8003978:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800397c:	462b      	mov	r3, r5
  * @brief This function handles the check of the RXTX or TX transaction complete.
  * @param hspi: SPI handle
  * @param Timeout : Timeout duration
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout)
{
 800397e:	4604      	mov	r4, r0
  /* Procedure to check the transaction complete */
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout) != HAL_OK)
 8003980:	f7ff ffaa 	bl	80038d8 <SPI_WaitFifoStateUntilTimeout>
 8003984:	4602      	mov	r2, r0
 8003986:	b968      	cbnz	r0, 80039a4 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout) != HAL_OK)
 8003988:	4620      	mov	r0, r4
 800398a:	2180      	movs	r1, #128	; 0x80
 800398c:	462b      	mov	r3, r5
 800398e:	f7ff ff5e 	bl	800384e <SPI_WaitFlagStateUntilTimeout>
 8003992:	4602      	mov	r2, r0
 8003994:	b930      	cbnz	r0, 80039a4 <SPI_EndRxTxTransaction+0x32>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
    return HAL_TIMEOUT;
  }
  if(SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout) != HAL_OK)
 8003996:	4620      	mov	r0, r4
 8003998:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800399c:	462b      	mov	r3, r5
 800399e:	f7ff ff9b 	bl	80038d8 <SPI_WaitFifoStateUntilTimeout>
 80039a2:	b130      	cbz	r0, 80039b2 <SPI_EndRxTxTransaction+0x40>
  {
    hspi->ErrorCode |= HAL_SPI_ERROR_FLAG;
 80039a4:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 80039a8:	f043 0320 	orr.w	r3, r3, #32
 80039ac:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    return HAL_TIMEOUT;
 80039b0:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 80039b2:	bd38      	pop	{r3, r4, r5, pc}

080039b4 <HAL_SPI_MspInit>:
  * @brief SPI MSP Init
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80039b4:	4770      	bx	lr

080039b6 <HAL_SPI_Init>:
  *         in the SPI_InitTypeDef and create the associated handle.
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039b6:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 80039b8:	4604      	mov	r4, r0
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d04b      	beq.n	8003a56 <HAL_SPI_Init+0xa0>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  
  hspi->State = HAL_SPI_STATE_BUSY;
 80039be:	2302      	movs	r3, #2
 80039c0:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
 80039c4:	f7ff fff6 	bl	80039b4 <HAL_SPI_MspInit>
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039c8:	6823      	ldr	r3, [r4, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ca:	68e1      	ldr	r1, [r4, #12]
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039cc:	681a      	ldr	r2, [r3, #0]
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039ce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  
  /* Init the low level hardware : GPIO, CLOCK, NVIC... */
  HAL_SPI_MspInit(hspi);
  
  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80039d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039d6:	601a      	str	r2, [r3, #0]
 80039d8:	f04f 0000 	mov.w	r0, #0
  
  /* Align by default the rs fifo threshold on the data size */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039dc:	d903      	bls.n	80039e6 <HAL_SPI_Init+0x30>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039de:	4602      	mov	r2, r0
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
 80039e0:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 80039e4:	e001      	b.n	80039ea <HAL_SPI_Init+0x34>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  
  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if(( hspi->Init.DataSize != SPI_DATASIZE_16BIT ) && ( hspi->Init.DataSize != SPI_DATASIZE_8BIT ))
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 80039ea:	bf18      	it	ne
 80039ec:	62a0      	strne	r0, [r4, #40]	; 0x28
  }
  
  /* Align the CRC Length on the data size */
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80039ee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80039f0:	b928      	cbnz	r0, 80039fe <HAL_SPI_Init+0x48>
  {
    /* CRC Lengtht aligned on the data size : value set by default */
    if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80039f6:	bf8c      	ite	hi
 80039f8:	2002      	movhi	r0, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80039fa:	2001      	movls	r0, #1
 80039fc:	6320      	str	r0, [r4, #48]	; 0x30
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 80039fe:	6865      	ldr	r5, [r4, #4]
 8003a00:	68a6      	ldr	r6, [r4, #8]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8003a02:	69a0      	ldr	r0, [r4, #24]
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 8003a04:	432e      	orrs	r6, r5
 8003a06:	6925      	ldr	r5, [r4, #16]
 8003a08:	432e      	orrs	r6, r5
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8003a0a:	6965      	ldr	r5, [r4, #20]
 8003a0c:	432e      	orrs	r6, r5
 8003a0e:	69e5      	ldr	r5, [r4, #28]
 8003a10:	432e      	orrs	r6, r5
 8003a12:	6a25      	ldr	r5, [r4, #32]
 8003a14:	432e      	orrs	r6, r5
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8003a16:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8003a18:	4335      	orrs	r5, r6
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 8003a1a:	f400 7600 	and.w	r6, r0, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8003a1e:	4335      	orrs	r5, r6
  }
  
  /*---------------------------- SPIx CR1 & CR2 Configuration ------------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | 
 8003a20:	601d      	str	r5, [r3, #0]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
  
  if( hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003a22:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8003a24:	2d02      	cmp	r5, #2
 8003a26:	d103      	bne.n	8003a30 <HAL_SPI_Init+0x7a>
  {
    hspi->Instance->CR1|= SPI_CR1_CRCL;
 8003a28:	681d      	ldr	r5, [r3, #0]
 8003a2a:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8003a2e:	601d      	str	r5, [r3, #0]
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8003a30:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8003a32:	4329      	orrs	r1, r5
 8003a34:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8003a36:	0c00      	lsrs	r0, r0, #16
 8003a38:	430d      	orrs	r5, r1
 8003a3a:	f000 0004 	and.w	r0, r0, #4
 8003a3e:	4305      	orrs	r5, r0
                         hspi->Init.DataSize ) | frxth;
 8003a40:	432a      	orrs	r2, r5
    hspi->Instance->CR1|= SPI_CR1_CRCL;
  }
  
  /* Configure : NSS management */
  /* Configure : Rx Fifo Threshold */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
 8003a42:	605a      	str	r2, [r3, #4]
                         hspi->Init.DataSize ) | frxth;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8003a44:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a46:	2000      	movs	r0, #0
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode | hspi->Init.NSSPMode |
                         hspi->Init.DataSize ) | frxth;
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8003a48:	611a      	str	r2, [r3, #16]
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;
 8003a4a:	2301      	movs	r3, #1
  
  /*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a4c:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State= HAL_SPI_STATE_READY;
 8003a50:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  
  return HAL_OK;
 8003a54:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t frxth;
  
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  { 
    return HAL_ERROR;
 8003a56:	2001      	movs	r0, #1
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
  hspi->State= HAL_SPI_STATE_READY;
  
  return HAL_OK;
}
 8003a58:	bd70      	pop	{r4, r5, r6, pc}

08003a5a <HAL_SPI_MspDeInit>:
  * @brief SPI MSP DeInit
  * @param hspi: SPI handle
  * @retval None
  */
 __weak void HAL_SPI_MspDeInit(SPI_HandleTypeDef *hspi)
{
 8003a5a:	4770      	bx	lr

08003a5c <HAL_SPI_DeInit>:
  * @brief  DeInitializes the SPI peripheral 
  * @param  hspi: SPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003a5c:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8003a5e:	4604      	mov	r4, r0
 8003a60:	b188      	cbz	r0, 8003a86 <HAL_SPI_DeInit+0x2a>
  {
     return HAL_ERROR;
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a62:	2302      	movs	r3, #2
 8003a64:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  
  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003a68:	6803      	ldr	r3, [r0, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a70:	601a      	str	r2, [r3, #0]
  
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003a72:	f7ff fff2 	bl	8003a5a <HAL_SPI_MspDeInit>
  
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a76:	2000      	movs	r0, #0
 8003a78:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
  hspi->State = HAL_SPI_STATE_RESET;
 8003a7c:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
  
  __HAL_UNLOCK(hspi);
 8003a80:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
  return HAL_OK;
 8003a84:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
  /* Check the SPI handle allocation */
  if(hspi == NULL)
  {
     return HAL_ERROR;
 8003a86:	2001      	movs	r0, #1
  hspi->State = HAL_SPI_STATE_RESET;
  
  __HAL_UNLOCK(hspi);
    
  return HAL_OK;
}
 8003a88:	bd10      	pop	{r4, pc}

08003a8a <HAL_SPI_TransmitReceive>:
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8003a8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint16_t tmpreg __attribute((unused)) = 0;
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8003a8e:	f890 705d 	ldrb.w	r7, [r0, #93]	; 0x5d
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8003a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 8003a94:	f04f 0b00 	mov.w	fp, #0
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8003a98:	2f01      	cmp	r7, #1
  * @param  Size: amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size, uint32_t Timeout)
{
 8003a9a:	4604      	mov	r4, r0
 8003a9c:	4689      	mov	r9, r1
 8003a9e:	4692      	mov	sl, r2
 8003aa0:	461e      	mov	r6, r3
  __IO uint16_t tmpreg __attribute((unused)) = 0;
 8003aa2:	f8ad b006 	strh.w	fp, [sp, #6]
  uint32_t tickstart = 0;
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
 8003aa6:	d001      	beq.n	8003aac <HAL_SPI_TransmitReceive+0x22>
  {
    return HAL_BUSY;
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	e12d      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x27e>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
 8003aac:	2900      	cmp	r1, #0
 8003aae:	f000 8128 	beq.w	8003d02 <HAL_SPI_TransmitReceive+0x278>
 8003ab2:	2a00      	cmp	r2, #0
 8003ab4:	f000 8125 	beq.w	8003d02 <HAL_SPI_TransmitReceive+0x278>
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 8122 	beq.w	8003d02 <HAL_SPI_TransmitReceive+0x278>
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 8003abe:	f7fe fbb5 	bl	800222c <HAL_GetTick>
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 8003ac2:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8003ac6:	2b01      	cmp	r3, #1
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
  }

  tickstart = HAL_GetTick();
 8003ac8:	4680      	mov	r8, r0
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 8003aca:	d0ed      	beq.n	8003aa8 <HAL_SPI_TransmitReceive+0x1e>
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 8003acc:	2305      	movs	r3, #5
 8003ace:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8003ad2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  }

  tickstart = HAL_GetTick();
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
 8003ad4:	f884 705c 	strb.w	r7, [r4, #92]	; 0x5c
  hspi->pTxBuffPtr  = pTxData;
  hspi->TxXferCount = Size;
  hspi->TxXferSize  = Size; 
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8003ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  
  /* Process Locked */
  __HAL_LOCK(hspi); 
  
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003adc:	f884 b05e 	strb.w	fp, [r4, #94]	; 0x5e
  hspi->pRxBuffPtr  = pRxData;
 8003ae0:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003ae4:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003ae8:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = pTxData;
 8003aec:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003af0:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size; 
 8003af2:	87a6      	strh	r6, [r4, #60]	; 0x3c
 8003af4:	6822      	ldr	r2, [r4, #0]
  
  /* Reset CRC Calculation */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8003af6:	d107      	bne.n	8003b08 <HAL_SPI_TransmitReceive+0x7e>
  {
    __HAL_SPI_RESET_CRC(hspi);
 8003af8:	6813      	ldr	r3, [r2, #0]
 8003afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003afe:	6013      	str	r3, [r2, #0]
 8003b00:	6813      	ldr	r3, [r2, #0]
 8003b02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b06:	6013      	str	r3, [r2, #0]
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8003b08:	68e3      	ldr	r3, [r4, #12]
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b0a:	6851      	ldr	r1, [r2, #4]
  {
    __HAL_SPI_RESET_CRC(hspi);
  }
  
  /* Set the Rx Fido threshold */
  if((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8003b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b10:	d801      	bhi.n	8003b16 <HAL_SPI_TransmitReceive+0x8c>
 8003b12:	2e01      	cmp	r6, #1
 8003b14:	d902      	bls.n	8003b1c <HAL_SPI_TransmitReceive+0x92>
  {
    /* set fiforxthreshold according the reception data lenght: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b16:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8003b1a:	e001      	b.n	8003b20 <HAL_SPI_TransmitReceive+0x96>
  }
  else
  {
    /* set fiforxthreshold according the reception data lenght: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b1c:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8003b20:	6051      	str	r1, [r2, #4]
  }
  
  /* Check if the SPI is already enabled */ 
  if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b22:	6811      	ldr	r1, [r2, #0]
 8003b24:	064f      	lsls	r7, r1, #25
 8003b26:	d403      	bmi.n	8003b30 <HAL_SPI_TransmitReceive+0xa6>
  {
    /* Enable SPI peripheral */    
    __HAL_SPI_ENABLE(hspi);
 8003b28:	6811      	ldr	r1, [r2, #0]
 8003b2a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8003b2e:	6011      	str	r1, [r2, #0]
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b34:	d93f      	bls.n	8003bb6 <HAL_SPI_TransmitReceive+0x12c>
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 8003b36:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
 8003b38:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
 8003b3c:	b368      	cbz	r0, 8003b9a <HAL_SPI_TransmitReceive+0x110>
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 8003b3e:	6823      	ldr	r3, [r4, #0]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	0796      	lsls	r6, r2, #30
 8003b44:	d510      	bpl.n	8003b68 <HAL_SPI_TransmitReceive+0xde>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b46:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->pTxBuffPtr += sizeof(uint16_t);
        hspi->TxXferCount--;
 8003b48:	3801      	subs	r0, #1
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b4a:	f832 6b02 	ldrh.w	r6, [r2], #2
        hspi->pTxBuffPtr += sizeof(uint16_t);
        hspi->TxXferCount--;
 8003b4e:	b280      	uxth	r0, r0
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
    {
      /* Wait until TXE flag */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b50:	60de      	str	r6, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b52:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003b54:	87e0      	strh	r0, [r4, #62]	; 0x3e
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 8003b56:	b938      	cbnz	r0, 8003b68 <HAL_SPI_TransmitReceive+0xde>
 8003b58:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b5a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003b5e:	d103      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0xde>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b66:	601a      	str	r2, [r3, #0]
        } 
      }
      
      /* Wait until RXNE flag */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8003b68:	b169      	cbz	r1, 8003b86 <HAL_SPI_TransmitReceive+0xfc>
 8003b6a:	6823      	ldr	r3, [r4, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	07d2      	lsls	r2, r2, #31
 8003b70:	d509      	bpl.n	8003b86 <HAL_SPI_TransmitReceive+0xfc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003b76:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b7a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8003b7c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003b80:	3b01      	subs	r3, #1
 8003b82:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      }
      if(Timeout != HAL_MAX_DELAY)
 8003b86:	1c6b      	adds	r3, r5, #1
 8003b88:	d0d5      	beq.n	8003b36 <HAL_SPI_TransmitReceive+0xac>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout)) 
 8003b8a:	b315      	cbz	r5, 8003bd2 <HAL_SPI_TransmitReceive+0x148>
 8003b8c:	f7fe fb4e 	bl	800222c <HAL_GetTick>
 8003b90:	ebc8 0000 	rsb	r0, r8, r0
 8003b94:	42a8      	cmp	r0, r5
 8003b96:	d9ce      	bls.n	8003b36 <HAL_SPI_TransmitReceive+0xac>
 8003b98:	e01b      	b.n	8003bd2 <HAL_SPI_TransmitReceive+0x148>
  }
  
  /* Transmit and Receive data in 16 Bit mode */
  if(hspi->Init.DataSize > SPI_DATASIZE_8BIT)
  {  
    while ((hspi->TxXferCount > 0 ) || (hspi->RxXferCount > 0))
 8003b9a:	2900      	cmp	r1, #0
 8003b9c:	d1e4      	bne.n	8003b68 <HAL_SPI_TransmitReceive+0xde>
      }
    }
  }
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
 8003b9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba4:	f040 808d 	bne.w	8003cc2 <HAL_SPI_TransmitReceive+0x238>
 8003ba8:	e05e      	b.n	8003c68 <HAL_SPI_TransmitReceive+0x1de>
          hspi->RxXferCount--;
        }
      }
      if(Timeout != HAL_MAX_DELAY)
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003baa:	f7fe fb3f 	bl	800222c <HAL_GetTick>
 8003bae:	ebc8 0000 	rsb	r0, r8, r0
 8003bb2:	42a8      	cmp	r0, r5
 8003bb4:	d80d      	bhi.n	8003bd2 <HAL_SPI_TransmitReceive+0x148>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 8003bb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d050      	beq.n	8003c5e <HAL_SPI_TransmitReceive+0x1d4>
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
 8003bbc:	6822      	ldr	r2, [r4, #0]
 8003bbe:	6891      	ldr	r1, [r2, #8]
 8003bc0:	078f      	lsls	r7, r1, #30
 8003bc2:	d40d      	bmi.n	8003be0 <HAL_SPI_TransmitReceive+0x156>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8003bc4:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003bc8:	bb3a      	cbnz	r2, 8003c1a <HAL_SPI_TransmitReceive+0x190>
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
          hspi->RxXferCount--;
        }
      }
      if(Timeout != HAL_MAX_DELAY)
 8003bca:	1c68      	adds	r0, r5, #1
 8003bcc:	d0f3      	beq.n	8003bb6 <HAL_SPI_TransmitReceive+0x12c>
      {
        if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8003bce:	2d00      	cmp	r5, #0
 8003bd0:	d1eb      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x120>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8003bde:	e092      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x27c>
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
    {
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003be4:	d905      	bls.n	8003bf2 <HAL_SPI_TransmitReceive+0x168>
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8003be6:	f831 0b02 	ldrh.w	r0, [r1], #2
          hspi->pTxBuffPtr += sizeof(uint16_t);
          hspi->TxXferCount -= 2;
 8003bea:	3b02      	subs	r3, #2
      /* check if TXE flag is set to send data */
      if((hspi->TxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_TXE) == SPI_FLAG_TXE))
      {
        if(hspi->TxXferCount > 2)
        {
          hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8003bec:	60d0      	str	r0, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bee:	63a1      	str	r1, [r4, #56]	; 0x38
 8003bf0:	e005      	b.n	8003bfe <HAL_SPI_TransmitReceive+0x174>
          hspi->TxXferCount -= 2;
        } 
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8003bf2:	1c4b      	adds	r3, r1, #1
 8003bf4:	63a3      	str	r3, [r4, #56]	; 0x38
 8003bf6:	780b      	ldrb	r3, [r1, #0]
 8003bf8:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 8003bfa:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	87e3      	strh	r3, [r4, #62]	; 0x3e
        }
        
        /* Enable CRC Transmission */
        if((hspi->TxXferCount == 0) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED))
 8003c00:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1de      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x13a>
 8003c06:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0c:	d1da      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x13a>
        {
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8003c0e:	6823      	ldr	r3, [r4, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c16:	601a      	str	r2, [r3, #0]
 8003c18:	e7d4      	b.n	8003bc4 <HAL_SPI_TransmitReceive+0x13a>
        }
      }
            
      /* Wait until RXNE flag is reset */
      if((hspi->RxXferCount > 0) && ((hspi->Instance->SR & SPI_FLAG_RXNE) == SPI_FLAG_RXNE))
 8003c1a:	6823      	ldr	r3, [r4, #0]
 8003c1c:	6899      	ldr	r1, [r3, #8]
 8003c1e:	07ce      	lsls	r6, r1, #31
 8003c20:	d5d3      	bpl.n	8003bca <HAL_SPI_TransmitReceive+0x140>
      {
        if(hspi->RxXferCount > 1)
 8003c22:	2a01      	cmp	r2, #1
 8003c24:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c26:	d910      	bls.n	8003c4a <HAL_SPI_TransmitReceive+0x1c0>
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c28:	68d9      	ldr	r1, [r3, #12]
 8003c2a:	f822 1b02 	strh.w	r1, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003c2e:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2;
 8003c30:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8003c34:	3a02      	subs	r2, #2
 8003c36:	b292      	uxth	r2, r2
          if(hspi->RxXferCount <= 1)
 8003c38:	2a01      	cmp	r2, #1
      {
        if(hspi->RxXferCount > 1)
        {
          *((uint16_t*)hspi->pRxBuffPtr) = hspi->Instance->DR;
          hspi->pRxBuffPtr += sizeof(uint16_t);
          hspi->RxXferCount -= 2;
 8003c3a:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if(hspi->RxXferCount <= 1)
 8003c3e:	d8c4      	bhi.n	8003bca <HAL_SPI_TransmitReceive+0x140>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c46:	605a      	str	r2, [r3, #4]
 8003c48:	e7bf      	b.n	8003bca <HAL_SPI_TransmitReceive+0x140>
          }
        }
        else
        {
          (*hspi->pRxBuffPtr++) =  *(__IO uint8_t *)&hspi->Instance->DR;
 8003c4a:	1c51      	adds	r1, r2, #1
 8003c4c:	6421      	str	r1, [r4, #64]	; 0x40
 8003c4e:	7b1b      	ldrb	r3, [r3, #12]
 8003c50:	7013      	strb	r3, [r2, #0]
          hspi->RxXferCount--;
 8003c52:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003c56:	3b01      	subs	r3, #1
 8003c58:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8003c5c:	e7b5      	b.n	8003bca <HAL_SPI_TransmitReceive+0x140>
    }  
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  { 
    while((hspi->TxXferCount > 0) || (hspi->RxXferCount > 0))
 8003c5e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1ae      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x13a>
 8003c66:	e79a      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x114>
  
  /* Read CRC from DR to close CRC calculation process */
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLED)
  {
    /* Wait until TXE flag */
    if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK)
 8003c68:	2102      	movs	r1, #2
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	460a      	mov	r2, r1
 8003c6e:	462b      	mov	r3, r5
 8003c70:	f7ff fded 	bl	800384e <SPI_WaitFlagStateUntilTimeout>
 8003c74:	b128      	cbz	r0, 8003c82 <HAL_SPI_TransmitReceive+0x1f8>
    {  
      /* Erreur on the CRC reception */
      hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 8003c76:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8003c7a:	f043 0302 	orr.w	r3, r3, #2
 8003c7e:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    }
    
    if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c82:	68e3      	ldr	r3, [r4, #12]
 8003c84:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c88:	6823      	ldr	r3, [r4, #0]
 8003c8a:	d102      	bne.n	8003c92 <HAL_SPI_TransmitReceive+0x208>
    {
      tmpreg = hspi->Instance->DR;
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	e015      	b.n	8003cbe <HAL_SPI_TransmitReceive+0x234>
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c92:	7b1b      	ldrb	r3, [r3, #12]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003c94:	6b21      	ldr	r1, [r4, #48]	; 0x30
    {
      tmpreg = hspi->Instance->DR;
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c96:	b2db      	uxtb	r3, r3
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003c98:	2902      	cmp	r1, #2
    {
      tmpreg = hspi->Instance->DR;
    }
    else
    {
      tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8003c9a:	f8ad 3006 	strh.w	r3, [sp, #6]
      if(hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003c9e:	d110      	bne.n	8003cc2 <HAL_SPI_TransmitReceive+0x238>
      {
        if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SPI_FLAG_TXE, Timeout) != HAL_OK) 
 8003ca0:	4620      	mov	r0, r4
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	462b      	mov	r3, r5
 8003ca6:	f7ff fdd2 	bl	800384e <SPI_WaitFlagStateUntilTimeout>
 8003caa:	b128      	cbz	r0, 8003cb8 <HAL_SPI_TransmitReceive+0x22e>
        {  
          /* Erreur on the CRC reception */
          hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 8003cac:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8003cb0:	f043 0302 	orr.w	r3, r3, #2
 8003cb4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
        }    
        tmpreg = *(__IO uint8_t *)&hspi->Instance->DR;
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	7b1b      	ldrb	r3, [r3, #12]
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	f8ad 3006 	strh.w	r3, [sp, #6]
      }
    }
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
 8003cc2:	4620      	mov	r0, r4
 8003cc4:	4629      	mov	r1, r5
 8003cc6:	f7ff fe54 	bl	8003972 <SPI_EndRxTxTransaction>
 8003cca:	b9e0      	cbnz	r0, 8003d06 <HAL_SPI_TransmitReceive+0x27c>
  }

  hspi->State = HAL_SPI_STATE_READY;
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003ccc:	6821      	ldr	r1, [r4, #0]
 8003cce:	688b      	ldr	r3, [r1, #8]
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003cd0:	2201      	movs	r2, #1
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003cd2:	f013 0510 	ands.w	r5, r3, #16
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003cd6:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
 8003cda:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
  
  /* Check if CRC error occurred */
  if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003cde:	d00a      	beq.n	8003cf6 <HAL_SPI_TransmitReceive+0x26c>
  {
    hspi->ErrorCode|= HAL_SPI_ERROR_CRC;
 8003ce0:	f043 0302 	orr.w	r3, r3, #2
 8003ce4:	f884 305e 	strb.w	r3, [r4, #94]	; 0x5e
    /* Clear CRC Flag */
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003ce8:	f06f 0310 	mvn.w	r3, #16
 8003cec:	608b      	str	r3, [r1, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003cee:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
    
    return HAL_ERROR;
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	e008      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x27e>
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 8003cf6:	1c18      	adds	r0, r3, #0
    
    return HAL_ERROR;
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003cf8:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
  
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
  
  if(hspi->State != HAL_SPI_STATE_READY) 
  {
    return HAL_BUSY;
 8003cfc:	bf18      	it	ne
 8003cfe:	2001      	movne	r0, #1
 8003d00:	e002      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x27e>
  }
  
  if((pTxData == NULL) || (pRxData == NULL) || (Size == 0))
  {
    return HAL_ERROR;
 8003d02:	4638      	mov	r0, r7
 8003d04:	e000      	b.n	8003d08 <HAL_SPI_TransmitReceive+0x27e>
  }

  /* Check the end of the transaction */
  if(SPI_EndRxTxTransaction(hspi,Timeout) != HAL_OK)
  {
    return HAL_TIMEOUT;
 8003d06:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_OK;
  }
}
 8003d08:	b003      	add	sp, #12
 8003d0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003d0e <HAL_SPI_GetState>:
  * @retval HAL state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
  return hspi->State;
}
 8003d0e:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
 8003d12:	4770      	bx	lr

08003d14 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8003d14:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8003d16:	b180      	cbz	r0, 8003d3a <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8003d18:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d1c:	b113      	cbz	r3, 8003d24 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8003d24:	b109      	cbz	r1, 8003d2a <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8003d26:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 8003d30:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8003d32:	f000 fc87 	bl	8004644 <USBD_LL_Init>
  
  return USBD_OK; 
 8003d36:	2000      	movs	r0, #0
 8003d38:	bd08      	pop	{r3, pc}
{
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
  {
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
 8003d3a:	2002      	movs	r0, #2
  pdev->id = id;
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
  
  return USBD_OK; 
}
 8003d3c:	bd08      	pop	{r3, pc}

08003d3e <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8003d3e:	b119      	cbz	r1, 8003d48 <USBD_RegisterClass+0xa>
  {
    /* link the class tgo the USB Device handle */
    pdev->pClass = pclass;
 8003d40:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003d44:	2000      	movs	r0, #0
 8003d46:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003d48:	2002      	movs	r0, #2
  }
  
  return status;
}
 8003d4a:	4770      	bx	lr

08003d4c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8003d4c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8003d4e:	f000 fcb7 	bl	80046c0 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003d52:	2000      	movs	r0, #0
 8003d54:	bd08      	pop	{r3, pc}

08003d56 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003d56:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003d58:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d5c:	b90b      	cbnz	r3, 8003d62 <USBD_SetClassConfig+0xc>
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8003d5e:	2002      	movs	r0, #2
 8003d60:	bd08      	pop	{r3, pc}
  
  if(pdev->pClass != NULL)
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4798      	blx	r3
 8003d66:	2800      	cmp	r0, #0
 8003d68:	d1f9      	bne.n	8003d5e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8003d6a:	bd08      	pop	{r3, pc}

08003d6c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003d6c:	b508      	push	{r3, lr}
  /* Clear configuration  and Deinitialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8003d6e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	4798      	blx	r3
  return USBD_OK;
}
 8003d76:	2000      	movs	r0, #0
 8003d78:	bd08      	pop	{r3, pc}

08003d7a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003d7a:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003d7c:	f500 7502 	add.w	r5, r0, #520	; 0x208
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8003d80:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8003d82:	4628      	mov	r0, r5
 8003d84:	f000 f8c9 	bl	8003f1a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003d8e:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
{

  USBD_ParseSetupRequest(&pdev->request, psetup);
  
  pdev->ep0_state = USBD_EP0_SETUP;
  pdev->ep0_data_len = pdev->request.wLength;
 8003d92:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003d96:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  
  switch (pdev->request.bmRequest & 0x1F) 
 8003d9a:	f001 031f 	and.w	r3, r1, #31
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d00c      	beq.n	8003dbc <USBD_LL_SetupStage+0x42>
 8003da2:	d306      	bcc.n	8003db2 <USBD_LL_SetupStage+0x38>
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d10e      	bne.n	8003dc6 <USBD_LL_SetupStage+0x4c>
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
    break;
    
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
 8003da8:	4620      	mov	r0, r4
 8003daa:	4629      	mov	r1, r5
 8003dac:	f000 f9f8 	bl	80041a0 <USBD_StdEPReq>
    break;
 8003db0:	e00e      	b.n	8003dd0 <USBD_LL_SetupStage+0x56>
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
  {
  case USB_REQ_RECIPIENT_DEVICE:   
    USBD_StdDevReq (pdev, &pdev->request);
 8003db2:	4620      	mov	r0, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	f000 f8cf 	bl	8003f58 <USBD_StdDevReq>
    break;
 8003dba:	e009      	b.n	8003dd0 <USBD_LL_SetupStage+0x56>
    
  case USB_REQ_RECIPIENT_INTERFACE:     
    USBD_StdItfReq(pdev, &pdev->request);
 8003dbc:	4620      	mov	r0, r4
 8003dbe:	4629      	mov	r1, r5
 8003dc0:	f000 f9d6 	bl	8004170 <USBD_StdItfReq>
    break;
 8003dc4:	e004      	b.n	8003dd0 <USBD_LL_SetupStage+0x56>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003dc6:	4620      	mov	r0, r4
 8003dc8:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8003dcc:	f000 fc90 	bl	80046f0 <USBD_LL_StallEP>
    break;
  }  
  return USBD_OK;  
}
 8003dd0:	2000      	movs	r0, #0
 8003dd2:	bd38      	pop	{r3, r4, r5, pc}

08003dd4 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8003dd8:	bb09      	cbnz	r1, 8003e1e <USBD_LL_DataOutStage+0x4a>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8003dda:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d126      	bne.n	8003e30 <USBD_LL_DataOutStage+0x5c>
    {
      if(pep->rem_length > pep->maxpacket)
 8003de2:	f8d0 510c 	ldr.w	r5, [r0, #268]	; 0x10c
 8003de6:	f8d0 3110 	ldr.w	r3, [r0, #272]	; 0x110
 8003dea:	429d      	cmp	r5, r3
 8003dec:	d90a      	bls.n	8003e04 <USBD_LL_DataOutStage+0x30>
      {
        pep->rem_length -=  pep->maxpacket;
 8003dee:	1aed      	subs	r5, r5, r3
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8003df0:	429d      	cmp	r5, r3
 8003df2:	bf38      	it	cc
 8003df4:	462b      	movcc	r3, r5
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
       
        USBD_CtlContinueRx (pdev, 
 8003df6:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8003df8:	f8c0 510c 	str.w	r5, [r0, #268]	; 0x10c
       
        USBD_CtlContinueRx (pdev, 
 8003dfc:	b29a      	uxth	r2, r3
 8003dfe:	f000 fa6e 	bl	80042de <USBD_CtlContinueRx>
 8003e02:	e015      	b.n	8003e30 <USBD_LL_DataOutStage+0x5c>
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8003e04:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e08:	691b      	ldr	r3, [r3, #16]
 8003e0a:	b123      	cbz	r3, 8003e16 <USBD_LL_DataOutStage+0x42>
 8003e0c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003e10:	2a03      	cmp	r2, #3
 8003e12:	d100      	bne.n	8003e16 <USBD_LL_DataOutStage+0x42>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
        {
          pdev->pClass->EP0_RxReady(pdev); 
 8003e14:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8003e16:	4620      	mov	r0, r4
 8003e18:	f000 fa6a 	bl	80042f0 <USBD_CtlSendStatus>
 8003e1c:	e008      	b.n	8003e30 <USBD_LL_DataOutStage+0x5c>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL)&&
 8003e1e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	b123      	cbz	r3, 8003e30 <USBD_LL_DataOutStage+0x5c>
 8003e26:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003e2a:	2a03      	cmp	r2, #3
 8003e2c:	d100      	bne.n	8003e30 <USBD_LL_DataOutStage+0x5c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
 8003e2e:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8003e30:	2000      	movs	r0, #0
 8003e32:	bd38      	pop	{r3, r4, r5, pc}

08003e34 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8003e38:	2900      	cmp	r1, #0
 8003e3a:	d135      	bne.n	8003ea8 <USBD_LL_DataInStage+0x74>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003e3c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d129      	bne.n	8003e98 <USBD_LL_DataInStage+0x64>
    {
      if(pep->rem_length > pep->maxpacket)
 8003e44:	69c5      	ldr	r5, [r0, #28]
 8003e46:	6a03      	ldr	r3, [r0, #32]
 8003e48:	429d      	cmp	r5, r3
 8003e4a:	d906      	bls.n	8003e5a <USBD_LL_DataInStage+0x26>
      {
        pep->rem_length -=  pep->maxpacket;
 8003e4c:	1aeb      	subs	r3, r5, r3
        
        USBD_CtlContinueSendData (pdev, 
 8003e4e:	4611      	mov	r1, r2
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
    {
      if(pep->rem_length > pep->maxpacket)
      {
        pep->rem_length -=  pep->maxpacket;
 8003e50:	61c3      	str	r3, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003e52:	b29a      	uxth	r2, r3
 8003e54:	f000 fa2a 	bl	80042ac <USBD_CtlContinueSendData>
 8003e58:	e01e      	b.n	8003e98 <USBD_LL_DataInStage+0x64>
                                  pdata, 
                                  pep->rem_length);
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0) &&
 8003e5a:	6985      	ldr	r5, [r0, #24]
 8003e5c:	fbb5 f6f3 	udiv	r6, r5, r3
 8003e60:	fb03 5616 	mls	r6, r3, r6, r5
 8003e64:	b95e      	cbnz	r6, 8003e7e <USBD_LL_DataInStage+0x4a>
 8003e66:	429d      	cmp	r5, r3
 8003e68:	d309      	bcc.n	8003e7e <USBD_LL_DataInStage+0x4a>
           (pep->total_length >= pep->maxpacket) &&
 8003e6a:	f8d0 31f8 	ldr.w	r3, [r0, #504]	; 0x1f8
 8003e6e:	429d      	cmp	r5, r3
 8003e70:	d205      	bcs.n	8003e7e <USBD_LL_DataInStage+0x4a>
             (pep->total_length < pdev->ep0_data_len ))
        {
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003e72:	4632      	mov	r2, r6
 8003e74:	f000 fa1a 	bl	80042ac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8003e78:	f8c4 61f8 	str.w	r6, [r4, #504]	; 0x1f8
 8003e7c:	e00c      	b.n	8003e98 <USBD_LL_DataInStage+0x64>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003e7e:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	b12b      	cbz	r3, 8003e92 <USBD_LL_DataInStage+0x5e>
 8003e86:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003e8a:	2a03      	cmp	r2, #3
 8003e8c:	d101      	bne.n	8003e92 <USBD_LL_DataInStage+0x5e>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
          {
            pdev->pClass->EP0_TxSent(pdev); 
 8003e8e:	4620      	mov	r0, r4
 8003e90:	4798      	blx	r3
          }          
          USBD_CtlReceiveStatus(pdev);
 8003e92:	4620      	mov	r0, r4
 8003e94:	f000 fa37 	bl	8004306 <USBD_CtlReceiveStatus>
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8003e98:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d10c      	bne.n	8003eba <USBD_LL_DataInStage+0x86>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
 8003ea6:	e008      	b.n	8003eba <USBD_LL_DataInStage+0x86>
    }
  }
  else if((pdev->pClass->DataIn != NULL)&& 
 8003ea8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	b123      	cbz	r3, 8003eba <USBD_LL_DataInStage+0x86>
 8003eb0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003eb4:	2a03      	cmp	r2, #3
 8003eb6:	d100      	bne.n	8003eba <USBD_LL_DataInStage+0x86>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
 8003eb8:	4798      	blx	r3
  }  
  return USBD_OK;
}
 8003eba:	2000      	movs	r0, #0
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}

08003ebe <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003ebe:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003ec0:	2100      	movs	r1, #0
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003ec2:	4604      	mov	r4, r0
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003ec4:	460a      	mov	r2, r1
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003ec6:	2540      	movs	r5, #64	; 0x40
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003ec8:	2340      	movs	r3, #64	; 0x40
 8003eca:	f000 fc00 	bl	80046ce <USBD_LL_OpenEP>
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003ece:	462b      	mov	r3, r5
  USBD_LL_OpenEP(pdev,
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8003ed0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8003ed4:	4620      	mov	r0, r4
 8003ed6:	2180      	movs	r1, #128	; 0x80
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f000 fbf8 	bl	80046ce <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8003ee4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  USBD_LL_OpenEP(pdev,
              0x80,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8003ee8:	6225      	str	r5, [r4, #32]
  /* Upon Reset call usr call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  
  if (pdev->pClassData) 
 8003eea:	b12b      	cbz	r3, 8003ef8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8003eec:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003ef0:	7921      	ldrb	r1, [r4, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4620      	mov	r0, r4
 8003ef6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8003ef8:	2000      	movs	r0, #0
 8003efa:	bd38      	pop	{r3, r4, r5, pc}

08003efc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8003efc:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8003efe:	2000      	movs	r0, #0
 8003f00:	4770      	bx	lr

08003f02 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003f02:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f04:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003f08:	2a03      	cmp	r2, #3
 8003f0a:	d104      	bne.n	8003f16 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003f0c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	b103      	cbz	r3, 8003f16 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003f14:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003f16:	2000      	movs	r0, #0
 8003f18:	bd08      	pop	{r3, pc}

08003f1a <USBD_ParseSetupRequest>:
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003f1a:	780b      	ldrb	r3, [r1, #0]
 8003f1c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003f1e:	784b      	ldrb	r3, [r1, #1]
 8003f20:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003f22:	78ca      	ldrb	r2, [r1, #3]
 8003f24:	788b      	ldrb	r3, [r1, #2]
 8003f26:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f2a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003f2c:	794a      	ldrb	r2, [r1, #5]
 8003f2e:	790b      	ldrb	r3, [r1, #4]
 8003f30:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f34:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003f36:	79ca      	ldrb	r2, [r1, #7]
 8003f38:	798b      	ldrb	r3, [r1, #6]
 8003f3a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003f3e:	80c3      	strh	r3, [r0, #6]
 8003f40:	4770      	bx	lr

08003f42 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8003f42:	b510      	push	{r4, lr}
  USBD_LL_StallEP(pdev , 0x80);
 8003f44:	2180      	movs	r1, #128	; 0x80
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8003f46:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003f48:	f000 fbd2 	bl	80046f0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003f4c:	4620      	mov	r0, r4
 8003f4e:	2100      	movs	r1, #0
}
 8003f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
  USBD_LL_StallEP(pdev , 0);
 8003f54:	f000 bbcc 	b.w	80046f0 <USBD_LL_StallEP>

08003f58 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8003f5a:	784b      	ldrb	r3, [r1, #1]
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8003f5c:	4604      	mov	r4, r0
 8003f5e:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK;  
  
  switch (req->bRequest) 
 8003f60:	2b09      	cmp	r3, #9
 8003f62:	f200 80fc 	bhi.w	800415e <USBD_StdDevReq+0x206>
 8003f66:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003f6a:	00ce      	.short	0x00ce
 8003f6c:	00fa00e5 	.word	0x00fa00e5
 8003f70:	00fa00e1 	.word	0x00fa00e1
 8003f74:	000a0077 	.word	0x000a0077
 8003f78:	00bd00fa 	.word	0x00bd00fa
 8003f7c:	0093      	.short	0x0093
{
  uint16_t len;
  uint8_t *pbuf;
  
    
  switch (req->wValue >> 8)
 8003f7e:	886b      	ldrh	r3, [r5, #2]
 8003f80:	0a1a      	lsrs	r2, r3, #8
 8003f82:	3a01      	subs	r2, #1
 8003f84:	2a06      	cmp	r2, #6
 8003f86:	f200 80ea 	bhi.w	800415e <USBD_StdDevReq+0x206>
 8003f8a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003f8e:	0007      	.short	0x0007
 8003f90:	0018000b 	.word	0x0018000b
 8003f94:	00e800e8 	.word	0x00e800e8
 8003f98:	0049003d 	.word	0x0049003d
  {
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003f9c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	e02c      	b.n	8003ffe <USBD_StdDevReq+0xa6>
    break;
    
  case USB_DESC_TYPE_CONFIGURATION:     
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8003fa4:	7c02      	ldrb	r2, [r0, #16]
 8003fa6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003faa:	b90a      	cbnz	r2, 8003fb0 <USBD_StdDevReq+0x58>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	e000      	b.n	8003fb2 <USBD_StdDevReq+0x5a>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb2:	f10d 0006 	add.w	r0, sp, #6
 8003fb6:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8003fb8:	2302      	movs	r3, #2
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8003fba:	4601      	mov	r1, r0
 8003fbc:	e03c      	b.n	8004038 <USBD_StdDevReq+0xe0>
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
    
  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b05      	cmp	r3, #5
 8003fc2:	f200 80cc 	bhi.w	800415e <USBD_StdDevReq+0x206>
 8003fc6:	e8df f003 	tbb	[pc, r3]
 8003fca:	0703      	.short	0x0703
 8003fcc:	17130f0b 	.word	0x17130f0b
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003fd0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	e012      	b.n	8003ffe <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8003fd8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	e00e      	b.n	8003ffe <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8003fe0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	e00a      	b.n	8003ffe <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8003fe8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	e006      	b.n	8003ffe <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8003ff0:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	e002      	b.n	8003ffe <USBD_StdDevReq+0xa6>
      break;
      
    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8003ff8:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	7c20      	ldrb	r0, [r4, #16]
 8004000:	f10d 0106 	add.w	r1, sp, #6
 8004004:	4798      	blx	r3
 8004006:	e009      	b.n	800401c <USBD_StdDevReq+0xc4>
#endif   
    }
    break;
  case USB_DESC_TYPE_DEVICE_QUALIFIER:                   

    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004008:	7c03      	ldrb	r3, [r0, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	f040 80a7 	bne.w	800415e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004010:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004014:	f10d 0006 	add.w	r0, sp, #6
 8004018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401a:	4798      	blx	r3
 800401c:	4601      	mov	r1, r0
 800401e:	e00c      	b.n	800403a <USBD_StdDevReq+0xe2>
      USBD_CtlError(pdev , req);
      return;
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8004020:	7c03      	ldrb	r3, [r0, #16]
 8004022:	2b00      	cmp	r3, #0
 8004024:	f040 809b 	bne.w	800415e <USBD_StdDevReq+0x206>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004028:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800402c:	f10d 0006 	add.w	r0, sp, #6
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004034:	2307      	movs	r3, #7
    } 

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004036:	4601      	mov	r1, r0
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004038:	704b      	strb	r3, [r1, #1]
  default: 
     USBD_CtlError(pdev , req);
    return;
  }
  
  if((len != 0)&& (req->wLength != 0))
 800403a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800403e:	2b00      	cmp	r3, #0
 8004040:	f000 8091 	beq.w	8004166 <USBD_StdDevReq+0x20e>
 8004044:	88ea      	ldrh	r2, [r5, #6]
 8004046:	2a00      	cmp	r2, #0
 8004048:	f000 808d 	beq.w	8004166 <USBD_StdDevReq+0x20e>
  {
    
    len = MIN(len , req->wLength);
 800404c:	429a      	cmp	r2, r3
 800404e:	bf28      	it	cs
 8004050:	461a      	movcs	r2, r3
 8004052:	f8ad 2006 	strh.w	r2, [sp, #6]
 8004056:	e054      	b.n	8004102 <USBD_StdDevReq+0x1aa>
static void USBD_SetAddress(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8004058:	88ab      	ldrh	r3, [r5, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d17f      	bne.n	800415e <USBD_StdDevReq+0x206>
 800405e:	88eb      	ldrh	r3, [r5, #6]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d17c      	bne.n	800415e <USBD_StdDevReq+0x206>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004064:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8004068:	78ae      	ldrb	r6, [r5, #2]
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800406a:	2b03      	cmp	r3, #3
{
  uint8_t  dev_addr; 
  
  if ((req->wIndex == 0) && (req->wLength == 0)) 
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800406c:	f006 067f 	and.w	r6, r6, #127	; 0x7f
    
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8004070:	d075      	beq.n	800415e <USBD_StdDevReq+0x206>
    {
      USBD_CtlError(pdev , req);
    } 
    else 
    {
      pdev->dev_address = dev_addr;
 8004072:	f880 61fe 	strb.w	r6, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8004076:	4631      	mov	r1, r6
 8004078:	f000 fb5b 	bl	8004732 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800407c:	4620      	mov	r0, r4
 800407e:	f000 f937 	bl	80042f0 <USBD_CtlSendStatus>
      
      if (dev_addr != 0) 
 8004082:	b10e      	cbz	r6, 8004088 <USBD_StdDevReq+0x130>
      {
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8004084:	2302      	movs	r3, #2
 8004086:	e000      	b.n	800408a <USBD_StdDevReq+0x132>
      } 
      else 
      {
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8004088:	2301      	movs	r3, #1
 800408a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
 800408e:	e06a      	b.n	8004166 <USBD_StdDevReq+0x20e>
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004090:	78a9      	ldrb	r1, [r5, #2]
 8004092:	4e36      	ldr	r6, [pc, #216]	; (800416c <USBD_StdDevReq+0x214>)
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004094:	2901      	cmp	r1, #1
                           USBD_SetupReqTypedef *req)
{
  
  static uint8_t  cfgidx;
  
  cfgidx = (uint8_t)(req->wValue);                 
 8004096:	7031      	strb	r1, [r6, #0]
  
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8004098:	d861      	bhi.n	800415e <USBD_StdDevReq+0x206>
  {            
     USBD_CtlError(pdev , req);                              
  } 
  else 
  {
    switch (pdev->dev_state) 
 800409a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d002      	beq.n	80040a8 <USBD_StdDevReq+0x150>
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d008      	beq.n	80040b8 <USBD_StdDevReq+0x160>
 80040a6:	e05a      	b.n	800415e <USBD_StdDevReq+0x206>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
 80040a8:	2900      	cmp	r1, #0
 80040aa:	d054      	beq.n	8004156 <USBD_StdDevReq+0x1fe>
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80040ac:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80040ae:	2303      	movs	r3, #3
    switch (pdev->dev_state) 
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx) 
      {                                			   							   							   				
        pdev->dev_config = cfgidx;
 80040b0:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80040b2:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
 80040b6:	e00f      	b.n	80040d8 <USBD_StdDevReq+0x180>
         USBD_CtlSendStatus(pdev);
      }
      break;
      
    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0) 
 80040b8:	b931      	cbnz	r1, 80040c8 <USBD_StdDevReq+0x170>
      {                           
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80040ba:	2302      	movs	r3, #2
 80040bc:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 80040c0:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 80040c2:	f7ff fe53 	bl	8003d6c <USBD_ClrClassConfig>
 80040c6:	e046      	b.n	8004156 <USBD_StdDevReq+0x1fe>
        USBD_CtlSendStatus(pdev);
        
      } 
      else  if (cfgidx != pdev->dev_config) 
 80040c8:	6841      	ldr	r1, [r0, #4]
 80040ca:	2901      	cmp	r1, #1
 80040cc:	d043      	beq.n	8004156 <USBD_StdDevReq+0x1fe>
      {
        /* Clear old configuration */
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80040ce:	b2c9      	uxtb	r1, r1
 80040d0:	f7ff fe4c 	bl	8003d6c <USBD_ClrClassConfig>
        
        /* set new configuration */
        pdev->dev_config = cfgidx;
 80040d4:	7831      	ldrb	r1, [r6, #0]
 80040d6:	6061      	str	r1, [r4, #4]
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 80040d8:	4620      	mov	r0, r4
 80040da:	f7ff fe3c 	bl	8003d56 <USBD_SetClassConfig>
 80040de:	2802      	cmp	r0, #2
 80040e0:	d139      	bne.n	8004156 <USBD_StdDevReq+0x1fe>
 80040e2:	e03c      	b.n	800415e <USBD_StdDevReq+0x206>
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{

  if (req->wLength != 1) 
 80040e4:	88ea      	ldrh	r2, [r5, #6]
 80040e6:	2a01      	cmp	r2, #1
 80040e8:	d139      	bne.n	800415e <USBD_StdDevReq+0x206>
  {                   
     USBD_CtlError(pdev , req);
  }
  else 
  {
    switch (pdev->dev_state )  
 80040ea:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d003      	beq.n	80040fa <USBD_StdDevReq+0x1a2>
 80040f2:	2b03      	cmp	r3, #3
 80040f4:	d133      	bne.n	800415e <USBD_StdDevReq+0x206>
                        1);
      break;
      
    case USBD_STATE_CONFIGURED:   
      
      USBD_CtlSendData (pdev, 
 80040f6:	1d01      	adds	r1, r0, #4
 80040f8:	e015      	b.n	8004126 <USBD_StdDevReq+0x1ce>
  else 
  {
    switch (pdev->dev_state )  
    {
    case USBD_STATE_ADDRESSED:                     
      pdev->dev_default_config = 0;
 80040fa:	4601      	mov	r1, r0
 80040fc:	2300      	movs	r3, #0
 80040fe:	f841 3f08 	str.w	r3, [r1, #8]!
      USBD_CtlSendData (pdev, 
 8004102:	4620      	mov	r0, r4
 8004104:	e00f      	b.n	8004126 <USBD_StdDevReq+0x1ce>
static void USBD_GetStatus(USBD_HandleTypeDef *pdev , 
                           USBD_SetupReqTypedef *req)
{
  
    
  switch (pdev->dev_state) 
 8004106:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800410a:	3b02      	subs	r3, #2
 800410c:	2b01      	cmp	r3, #1
 800410e:	d826      	bhi.n	800415e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    
#if ( USBD_SELF_POWERED == 1)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8004110:	2301      	movs	r3, #1
 8004112:	60c3      	str	r3, [r0, #12]
#else
    pdev->dev_config_status = 0;                                   
#endif
                      
    if (pdev->dev_remote_wakeup) 
 8004114:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8004118:	b10b      	cbz	r3, 800411e <USBD_StdDevReq+0x1c6>
    {
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800411a:	2303      	movs	r3, #3
 800411c:	60c3      	str	r3, [r0, #12]
    }
    
    USBD_CtlSendData (pdev, 
 800411e:	4620      	mov	r0, r4
 8004120:	f104 010c 	add.w	r1, r4, #12
 8004124:	2202      	movs	r2, #2
 8004126:	f000 f8b3 	bl	8004290 <USBD_CtlSendData>
 800412a:	e01c      	b.n	8004166 <USBD_StdDevReq+0x20e>
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800412c:	886b      	ldrh	r3, [r5, #2]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d119      	bne.n	8004166 <USBD_StdDevReq+0x20e>
 8004132:	e008      	b.n	8004146 <USBD_StdDevReq+0x1ee>
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev , 
                            USBD_SetupReqTypedef *req)
{
  switch (pdev->dev_state)
 8004134:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004138:	3b02      	subs	r3, #2
 800413a:	2b01      	cmp	r3, #1
 800413c:	d80f      	bhi.n	800415e <USBD_StdDevReq+0x206>
  {
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800413e:	886b      	ldrh	r3, [r5, #2]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d110      	bne.n	8004166 <USBD_StdDevReq+0x20e>
    {
      pdev->dev_remote_wakeup = 0; 
 8004144:	2300      	movs	r3, #0
 8004146:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 800414a:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800414e:	4620      	mov	r0, r4
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4629      	mov	r1, r5
 8004154:	4798      	blx	r3
      USBD_CtlSendStatus(pdev);
 8004156:	4620      	mov	r0, r4
 8004158:	f000 f8ca 	bl	80042f0 <USBD_CtlSendStatus>
 800415c:	e003      	b.n	8004166 <USBD_StdDevReq+0x20e>
  case USB_REQ_CLEAR_FEATURE:                                   
    USBD_ClrFeature (pdev , req);
    break;
    
  default:  
    USBD_CtlError(pdev , req);
 800415e:	4620      	mov	r0, r4
 8004160:	4629      	mov	r1, r5
 8004162:	f7ff feee 	bl	8003f42 <USBD_CtlError>
    break;
  }
  
  return ret;
}
 8004166:	2000      	movs	r0, #0
 8004168:	b002      	add	sp, #8
 800416a:	bd70      	pop	{r4, r5, r6, pc}
 800416c:	20000b94 	.word	0x20000b94

08004170 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004170:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 8004172:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8004176:	2b03      	cmp	r3, #3
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8004178:	4604      	mov	r4, r0
 800417a:	460d      	mov	r5, r1
  USBD_StatusTypeDef ret = USBD_OK; 
  
  switch (pdev->dev_state) 
 800417c:	d10c      	bne.n	8004198 <USBD_StdItfReq+0x28>
  {
  case USBD_STATE_CONFIGURED:
    
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800417e:	790b      	ldrb	r3, [r1, #4]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d809      	bhi.n	8004198 <USBD_StdItfReq+0x28>
    {
      pdev->pClass->Setup (pdev, req); 
 8004184:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	4798      	blx	r3
      
      if((req->wLength == 0)&& (ret == USBD_OK))
 800418c:	88eb      	ldrh	r3, [r5, #6]
 800418e:	b92b      	cbnz	r3, 800419c <USBD_StdItfReq+0x2c>
      {
         USBD_CtlSendStatus(pdev);
 8004190:	4620      	mov	r0, r4
 8004192:	f000 f8ad 	bl	80042f0 <USBD_CtlSendStatus>
 8004196:	e001      	b.n	800419c <USBD_StdItfReq+0x2c>
       USBD_CtlError(pdev , req);
    }
    break;
    
  default:
     USBD_CtlError(pdev , req);
 8004198:	f7ff fed3 	bl	8003f42 <USBD_CtlError>
    break;
  }
  return USBD_OK;
}
 800419c:	2000      	movs	r0, #0
 800419e:	bd38      	pop	{r3, r4, r5, pc}

080041a0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80041a0:	b570      	push	{r4, r5, r6, lr}
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
  
  switch (req->bRequest) 
 80041a2:	784e      	ldrb	r6, [r1, #1]
{
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80041a4:	888a      	ldrh	r2, [r1, #4]
  
  switch (req->bRequest) 
 80041a6:	2e01      	cmp	r6, #1
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80041a8:	4604      	mov	r4, r0
 80041aa:	460d      	mov	r5, r1
  
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK; 
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);   
 80041ac:	b2d3      	uxtb	r3, r2
  
  switch (req->bRequest) 
 80041ae:	d010      	beq.n	80041d2 <USBD_StdEPReq+0x32>
 80041b0:	d327      	bcc.n	8004202 <USBD_StdEPReq+0x62>
 80041b2:	2e03      	cmp	r6, #3
 80041b4:	d14c      	bne.n	8004250 <USBD_StdEPReq+0xb0>
  {
    
  case USB_REQ_SET_FEATURE :
    
    switch (pdev->dev_state) 
 80041b6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80041ba:	2a02      	cmp	r2, #2
 80041bc:	d028      	beq.n	8004210 <USBD_StdEPReq+0x70>
 80041be:	2a03      	cmp	r2, #3
 80041c0:	d144      	bne.n	800424c <USBD_StdEPReq+0xac>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80041c2:	884a      	ldrh	r2, [r1, #2]
 80041c4:	b99a      	cbnz	r2, 80041ee <USBD_StdEPReq+0x4e>
      {
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 80041c6:	065e      	lsls	r6, r3, #25
 80041c8:	d011      	beq.n	80041ee <USBD_StdEPReq+0x4e>
        { 
          USBD_LL_StallEP(pdev , ep_addr);
 80041ca:	4619      	mov	r1, r3
 80041cc:	f000 fa90 	bl	80046f0 <USBD_LL_StallEP>
 80041d0:	e00d      	b.n	80041ee <USBD_StdEPReq+0x4e>
    }
    break;
    
  case USB_REQ_CLEAR_FEATURE :
    
    switch (pdev->dev_state) 
 80041d2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80041d6:	2a02      	cmp	r2, #2
 80041d8:	d01a      	beq.n	8004210 <USBD_StdEPReq+0x70>
 80041da:	2a03      	cmp	r2, #3
 80041dc:	d136      	bne.n	800424c <USBD_StdEPReq+0xac>
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:   
      if (req->wValue == USB_FEATURE_EP_HALT)
 80041de:	884a      	ldrh	r2, [r1, #2]
 80041e0:	2a00      	cmp	r2, #0
 80041e2:	d135      	bne.n	8004250 <USBD_StdEPReq+0xb0>
      {
        if ((ep_addr & 0x7F) != 0x00) 
 80041e4:	0659      	lsls	r1, r3, #25
 80041e6:	d008      	beq.n	80041fa <USBD_StdEPReq+0x5a>
        {        
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80041e8:	4619      	mov	r1, r3
 80041ea:	f000 fa88 	bl	80046fe <USBD_LL_ClearStallEP>
          pdev->pClass->Setup (pdev, req);
 80041ee:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80041f2:	4620      	mov	r0, r4
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	4629      	mov	r1, r5
 80041f8:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80041fa:	4620      	mov	r0, r4
 80041fc:	f000 f878 	bl	80042f0 <USBD_CtlSendStatus>
 8004200:	e026      	b.n	8004250 <USBD_StdEPReq+0xb0>
      break;    
    }
    break;
    
  case USB_REQ_GET_STATUS:                  
    switch (pdev->dev_state) 
 8004202:	f890 51fc 	ldrb.w	r5, [r0, #508]	; 0x1fc
 8004206:	2d02      	cmp	r5, #2
 8004208:	d002      	beq.n	8004210 <USBD_StdEPReq+0x70>
 800420a:	2d03      	cmp	r5, #3
 800420c:	d006      	beq.n	800421c <USBD_StdEPReq+0x7c>
 800420e:	e01d      	b.n	800424c <USBD_StdEPReq+0xac>
    {
    case USBD_STATE_ADDRESSED:          
      if ((ep_addr & 0x7F) != 0x00) 
 8004210:	065a      	lsls	r2, r3, #25
 8004212:	d01d      	beq.n	8004250 <USBD_StdEPReq+0xb0>
      {
        USBD_LL_StallEP(pdev , ep_addr);
 8004214:	4619      	mov	r1, r3
 8004216:	f000 fa6b 	bl	80046f0 <USBD_LL_StallEP>
 800421a:	e019      	b.n	8004250 <USBD_StdEPReq+0xb0>
 800421c:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8004220:	f012 0f80 	tst.w	r2, #128	; 0x80
 8004224:	eb00 1505 	add.w	r5, r0, r5, lsl #4
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004228:	4619      	mov	r1, r3
        USBD_LL_StallEP(pdev , ep_addr);
      }
      break;	
      
    case USBD_STATE_CONFIGURED:
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800422a:	bf14      	ite	ne
 800422c:	3514      	addne	r5, #20
 800422e:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
                                         &pdev->ep_out[ep_addr & 0x7F];
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8004232:	f000 fa6b 	bl	800470c <USBD_LL_IsStallEP>
 8004236:	b110      	cbz	r0, 800423e <USBD_StdEPReq+0x9e>
      {
        pep->status = 0x0001;     
 8004238:	2301      	movs	r3, #1
 800423a:	602b      	str	r3, [r5, #0]
 800423c:	e000      	b.n	8004240 <USBD_StdEPReq+0xa0>
      }
      else
      {
        pep->status = 0x0000;  
 800423e:	6028      	str	r0, [r5, #0]
      }
      
      USBD_CtlSendData (pdev,
 8004240:	4620      	mov	r0, r4
 8004242:	4629      	mov	r1, r5
 8004244:	2202      	movs	r2, #2
 8004246:	f000 f823 	bl	8004290 <USBD_CtlSendData>
                        (uint8_t *)&pep->status,
                        2);
      break;
 800424a:	e001      	b.n	8004250 <USBD_StdEPReq+0xb0>
      
    default:                         
      USBD_CtlError(pdev , req);
 800424c:	f7ff fe79 	bl	8003f42 <USBD_CtlError>
    
  default:
    break;
  }
  return ret;
}
 8004250:	2000      	movs	r0, #0
 8004252:	bd70      	pop	{r4, r5, r6, pc}

08004254 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8004254:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 8004256:	b1d0      	cbz	r0, 800428e <USBD_GetString+0x3a>
 8004258:	2300      	movs	r3, #0
 800425a:	b2dc      	uxtb	r4, r3
 800425c:	3301      	adds	r3, #1
 800425e:	18c5      	adds	r5, r0, r3
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8004260:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004264:	2d00      	cmp	r5, #0
 8004266:	d1f8      	bne.n	800425a <USBD_GetString+0x6>
{
  uint8_t idx = 0;
  
  if (desc != NULL) 
  {
    *len =  USBD_GetLen(desc) * 2 + 2;    
 8004268:	1c63      	adds	r3, r4, #1
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 800426e:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8004270:	2303      	movs	r3, #3
 8004272:	704b      	strb	r3, [r1, #1]
 8004274:	3801      	subs	r0, #1
 8004276:	2302      	movs	r3, #2
    
    while (*desc != '\0') 
 8004278:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800427c:	b13a      	cbz	r2, 800428e <USBD_GetString+0x3a>
    {
      unicode[idx++] = *desc++;
 800427e:	1c5c      	adds	r4, r3, #1
 8004280:	b2e4      	uxtb	r4, r4
 8004282:	54ca      	strb	r2, [r1, r3]
      unicode[idx++] =  0x00;
 8004284:	3302      	adds	r3, #2
 8004286:	2200      	movs	r2, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	550a      	strb	r2, [r1, r4]
 800428c:	e7f4      	b.n	8004278 <USBD_GetString+0x24>
 800428e:	bd30      	pop	{r4, r5, pc}

08004290 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8004290:	b538      	push	{r3, r4, r5, lr}
 8004292:	4613      	mov	r3, r2
 8004294:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8004296:	2202      	movs	r2, #2
 8004298:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800429c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 800429e:	61c3      	str	r3, [r0, #28]
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80042a0:	2100      	movs	r1, #0
 80042a2:	462a      	mov	r2, r5
 80042a4:	f000 fa4c 	bl	8004740 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80042a8:	2000      	movs	r0, #0
 80042aa:	bd38      	pop	{r3, r4, r5, pc}

080042ac <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80042ac:	b510      	push	{r4, lr}
 80042ae:	460c      	mov	r4, r1
 80042b0:	4613      	mov	r3, r2
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80042b2:	2100      	movs	r1, #0
 80042b4:	4622      	mov	r2, r4
 80042b6:	f000 fa43 	bl	8004740 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80042ba:	2000      	movs	r0, #0
 80042bc:	bd10      	pop	{r4, pc}

080042be <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80042be:	b538      	push	{r3, r4, r5, lr}
 80042c0:	4613      	mov	r3, r2
 80042c2:	460d      	mov	r5, r1
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80042c4:	2203      	movs	r2, #3
 80042c6:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80042ca:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
 80042ce:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80042d2:	2100      	movs	r1, #0
 80042d4:	462a      	mov	r2, r5
 80042d6:	f000 fa3a 	bl	800474e <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80042da:	2000      	movs	r0, #0
 80042dc:	bd38      	pop	{r3, r4, r5, pc}

080042de <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80042de:	b510      	push	{r4, lr}
 80042e0:	460c      	mov	r4, r1
 80042e2:	4613      	mov	r3, r2

  USBD_LL_PrepareReceive (pdev,
 80042e4:	2100      	movs	r1, #0
 80042e6:	4622      	mov	r2, r4
 80042e8:	f000 fa31 	bl	800474e <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80042ec:	2000      	movs	r0, #0
 80042ee:	bd10      	pop	{r4, pc}

080042f0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80042f0:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80042f2:	2100      	movs	r1, #0
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80042f4:	2304      	movs	r3, #4
 80042f6:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80042fa:	460a      	mov	r2, r1
 80042fc:	460b      	mov	r3, r1
 80042fe:	f000 fa1f 	bl	8004740 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8004302:	2000      	movs	r0, #0
 8004304:	bd08      	pop	{r3, pc}

08004306 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8004306:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004308:	2100      	movs	r1, #0
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 800430a:	2305      	movs	r3, #5
 800430c:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8004310:	460a      	mov	r2, r1
 8004312:	460b      	mov	r3, r1
 8004314:	f000 fa1b 	bl	800474e <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8004318:	2000      	movs	r0, #0
 800431a:	bd08      	pop	{r3, pc}

0800431c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800431c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004320:	b11b      	cbz	r3, 800432a <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8004322:	2000      	movs	r0, #0
 8004324:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8004328:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800432a:	2002      	movs	r0, #2
  }
}
 800432c:	4770      	bx	lr

0800432e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800432e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
 8004332:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004334:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8004338:	b15b      	cbz	r3, 8004352 <USBD_CDC_EP0_RxReady+0x24>
 800433a:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 800433e:	28ff      	cmp	r0, #255	; 0xff
 8004340:	d007      	beq.n	8004352 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8004348:	4621      	mov	r1, r4
 800434a:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 800434c:	23ff      	movs	r3, #255	; 0xff
 800434e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8004352:	2000      	movs	r0, #0
 8004354:	bd10      	pop	{r4, pc}
	...

08004358 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8004358:	2343      	movs	r3, #67	; 0x43
 800435a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 800435c:	4800      	ldr	r0, [pc, #0]	; (8004360 <USBD_CDC_GetFSCfgDesc+0x8>)
 800435e:	4770      	bx	lr
 8004360:	20000018 	.word	0x20000018

08004364 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8004364:	2343      	movs	r3, #67	; 0x43
 8004366:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8004368:	4800      	ldr	r0, [pc, #0]	; (800436c <USBD_CDC_GetHSCfgDesc+0x8>)
 800436a:	4770      	bx	lr
 800436c:	200000e4 	.word	0x200000e4

08004370 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8004370:	2343      	movs	r3, #67	; 0x43
 8004372:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8004374:	4800      	ldr	r0, [pc, #0]	; (8004378 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8004376:	4770      	bx	lr
 8004378:	200000a0 	.word	0x200000a0

0800437c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800437c:	230a      	movs	r3, #10
 800437e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8004380:	4800      	ldr	r0, [pc, #0]	; (8004384 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8004382:	4770      	bx	lr
 8004384:	20000094 	.word	0x20000094

08004388 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8004388:	b538      	push	{r3, r4, r5, lr}
 800438a:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 800438c:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004390:	f000 f9e4 	bl	800475c <USBD_LL_GetRxDataSize>
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8004394:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8004398:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  
  /* USB data will be immediately processed, this allow next USB traffic being 
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800439c:	b14b      	cbz	r3, 80043b2 <USBD_CDC_DataOut+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800439e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 80043a2:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 80043ac:	4798      	blx	r3

    return USBD_OK;
 80043ae:	2000      	movs	r0, #0
 80043b0:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    return USBD_FAIL;
 80043b2:	2002      	movs	r0, #2
  }
}
 80043b4:	bd38      	pop	{r3, r4, r5, pc}

080043b6 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80043b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043b8:	460c      	mov	r4, r1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043ba:	7809      	ldrb	r1, [r1, #0]
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80043bc:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043c0:	f001 0360 	and.w	r3, r1, #96	; 0x60
 80043c4:	2b20      	cmp	r3, #32
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev, 
                                USBD_SetupReqTypedef *req)
{
 80043c6:	4606      	mov	r6, r0
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80043c8:	d120      	bne.n	800440c <USBD_CDC_Setup+0x56>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80043ca:	88e2      	ldrh	r2, [r4, #6]
 80043cc:	7863      	ldrb	r3, [r4, #1]
 80043ce:	b1ba      	cbz	r2, 8004400 <USBD_CDC_Setup+0x4a>
    {
      if (req->bmRequest & 0x80)
 80043d0:	0609      	lsls	r1, r1, #24
 80043d2:	d50b      	bpl.n	80043ec <USBD_CDC_Setup+0x36>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80043d4:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 80043d8:	4618      	mov	r0, r3
 80043da:	688f      	ldr	r7, [r1, #8]
 80043dc:	4629      	mov	r1, r5
 80043de:	47b8      	blx	r7
                                                          (uint8_t *)hcdc->data,
                                                          req->wLength);
          USBD_CtlSendData (pdev, 
 80043e0:	4630      	mov	r0, r6
 80043e2:	4629      	mov	r1, r5
 80043e4:	88e2      	ldrh	r2, [r4, #6]
 80043e6:	f7ff ff53 	bl	8004290 <USBD_CtlSendData>
 80043ea:	e00f      	b.n	800440c <USBD_CDC_Setup+0x56>
                            (uint8_t *)hcdc->data,
                            req->wLength);
      }
      else
      {
        hcdc->CmdOpCode = req->bRequest;
 80043ec:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 80043f0:	88e3      	ldrh	r3, [r4, #6]
 80043f2:	f885 3201 	strb.w	r3, [r5, #513]	; 0x201
        
        USBD_CtlPrepareRx (pdev, 
 80043f6:	4629      	mov	r1, r5
 80043f8:	88e2      	ldrh	r2, [r4, #6]
 80043fa:	f7ff ff60 	bl	80042be <USBD_CtlPrepareRx>
 80043fe:	e005      	b.n	800440c <USBD_CDC_Setup+0x56>
      }
      
    }
    else
    {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004400:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8004404:	4618      	mov	r0, r3
 8004406:	688c      	ldr	r4, [r1, #8]
 8004408:	4611      	mov	r1, r2
 800440a:	47a0      	blx	r4
 
  default: 
    break;
  }
  return USBD_OK;
}
 800440c:	2000      	movs	r0, #0
 800440e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004410 <USBD_CDC_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004410:	b510      	push	{r4, lr}
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004412:	2181      	movs	r1, #129	; 0x81
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, 
                                 uint8_t cfgidx)
{
 8004414:	4604      	mov	r4, r0
  uint8_t ret = 0;
  
  /* Open EP IN */
  USBD_LL_CloseEP(pdev,
 8004416:	f000 f964 	bl	80046e2 <USBD_LL_CloseEP>
              CDC_IN_EP);
  
  /* Open EP OUT */
  USBD_LL_CloseEP(pdev,
 800441a:	2101      	movs	r1, #1
 800441c:	4620      	mov	r0, r4
 800441e:	f000 f960 	bl	80046e2 <USBD_LL_CloseEP>
              CDC_OUT_EP);
  
  /* Open Command IN EP */
  USBD_LL_CloseEP(pdev,
 8004422:	4620      	mov	r0, r4
 8004424:	2182      	movs	r1, #130	; 0x82
 8004426:	f000 f95c 	bl	80046e2 <USBD_LL_CloseEP>
              CDC_CMD_EP);
  
  
  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800442a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 800442e:	b153      	cbz	r3, 8004446 <USBD_CDC_DeInit+0x36>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004430:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8004438:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 800443c:	f000 f998 	bl	8004770 <USBD_static_free>
    pdev->pClassData = NULL;
 8004440:	2300      	movs	r3, #0
 8004442:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
  }
  
  return ret;
}
 8004446:	2000      	movs	r0, #0
 8004448:	bd10      	pop	{r4, pc}

0800444a <USBD_CDC_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800444a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800444c:	7c03      	ldrb	r3, [r0, #16]
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
 800444e:	4604      	mov	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004450:	2181      	movs	r1, #129	; 0x81
 8004452:	2202      	movs	r2, #2
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
  USBD_CDC_HandleTypeDef   *hcdc;
  
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004454:	b94b      	cbnz	r3, 800446a <USBD_CDC_Init+0x20>
  {  
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 8004456:	f44f 7300 	mov.w	r3, #512	; 0x200
 800445a:	f000 f938 	bl	80046ce <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_HS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 800445e:	4620      	mov	r0, r4
 8004460:	2101      	movs	r1, #1
 8004462:	2202      	movs	r2, #2
 8004464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004468:	e006      	b.n	8004478 <USBD_CDC_Init+0x2e>
    
  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev,
 800446a:	2340      	movs	r3, #64	; 0x40
 800446c:	f000 f92f 	bl	80046ce <USBD_LL_OpenEP>
                   CDC_IN_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_IN_PACKET_SIZE);
    
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev,
 8004470:	4620      	mov	r0, r4
 8004472:	2101      	movs	r1, #1
 8004474:	2202      	movs	r2, #2
 8004476:	2340      	movs	r3, #64	; 0x40
 8004478:	f000 f929 	bl	80046ce <USBD_LL_OpenEP>
                   CDC_OUT_EP,
                   USBD_EP_TYPE_BULK,
                   CDC_DATA_FS_OUT_PACKET_SIZE);
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev,
 800447c:	2182      	movs	r1, #130	; 0x82
 800447e:	2203      	movs	r2, #3
 8004480:	2308      	movs	r3, #8
 8004482:	4620      	mov	r0, r4
 8004484:	f000 f923 	bl	80046ce <USBD_LL_OpenEP>
                 CDC_CMD_EP,
                 USBD_EP_TYPE_INTR,
                 CDC_CMD_PACKET_SIZE);
  
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8004488:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800448c:	f000 f96c 	bl	8004768 <USBD_static_malloc>
 8004490:	4605      	mov	r5, r0
 8004492:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  
  if(pdev->pClassData == NULL)
 8004496:	b1c8      	cbz	r0, 80044cc <USBD_CDC_Init+0x82>
  else
  {
    hcdc = pdev->pClassData;
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004498:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4798      	blx	r3
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80044a0:	7c27      	ldrb	r7, [r4, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80044a2:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
    
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
 80044a6:	2600      	movs	r6, #0
 80044a8:	f8c5 6214 	str.w	r6, [r5, #532]	; 0x214
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80044ac:	4620      	mov	r0, r4
    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
 80044ae:	f8c5 6218 	str.w	r6, [r5, #536]	; 0x218
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80044b2:	2101      	movs	r1, #1
    
    /* Init Xfer states */
    hcdc->TxState =0;
    hcdc->RxState =0;
       
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80044b4:	b92f      	cbnz	r7, 80044c2 <USBD_CDC_Init+0x78>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80044b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044ba:	f000 f948 	bl	800474e <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80044be:	4638      	mov	r0, r7
 80044c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80044c2:	2340      	movs	r3, #64	; 0x40
 80044c4:	f000 f943 	bl	800474e <USBD_LL_PrepareReceive>
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, 
                               uint8_t cfgidx)
{
  uint8_t ret = 0;
 80044c8:	4630      	mov	r0, r6
 80044ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
  
  if(pdev->pClassData == NULL)
  {
    ret = 1; 
 80044cc:	2001      	movs	r0, #1
    }
    
    
  }
  return ret;
}
 80044ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080044d0 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 80044d0:	b119      	cbz	r1, 80044da <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 80044d2:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 80044d6:	2000      	movs	r0, #0
 80044d8:	4770      	bx	lr
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
 80044da:	2002      	movs	r0, #2
    pdev->pUserData= fops;
    ret = USBD_OK;    
  }
  
  return ret;
}
 80044dc:	4770      	bx	lr

080044de <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80044de:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 80044e2:	2000      	movs	r0, #0
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->TxBuffer = pbuff;
 80044e4:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 80044e8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  
  return USBD_OK;  
}
 80044ec:	4770      	bx	lr

080044ee <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80044ee:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 80044f2:	2000      	movs	r0, #0
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 80044f4:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
  
  return USBD_OK;
}
 80044f8:	4770      	bx	lr

080044fa <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
 80044fa:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 80044fc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8004500:	b174      	cbz	r4, 8004520 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8004502:	f8d4 5214 	ldr.w	r5, [r4, #532]	; 0x214
 8004506:	b96d      	cbnz	r5, 8004524 <USBD_CDC_TransmitPacket+0x2a>
    {
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8004508:	f8b4 3210 	ldrh.w	r3, [r4, #528]	; 0x210
 800450c:	f8d4 2208 	ldr.w	r2, [r4, #520]	; 0x208
 8004510:	2181      	movs	r1, #129	; 0x81
 8004512:	f000 f915 	bl	8004740 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8004516:	2301      	movs	r3, #1
 8004518:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
      return USBD_OK;
 800451c:	4628      	mov	r0, r5
 800451e:	bd38      	pop	{r3, r4, r5, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 8004520:	2002      	movs	r0, #2
 8004522:	bd38      	pop	{r3, r4, r5, pc}
      hcdc->TxState = 1;
      return USBD_OK;
    }
    else
    {
      return USBD_BUSY;
 8004524:	2001      	movs	r0, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 8004526:	bd38      	pop	{r3, r4, r5, pc}

08004528 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
 8004528:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
 800452c:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800452e:	b163      	cbz	r3, 800454a <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004530:	7c04      	ldrb	r4, [r0, #16]
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004532:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004536:	2101      	movs	r1, #1
  USBD_CDC_HandleTypeDef   *hcdc = pdev->pClassData;
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8004538:	b914      	cbnz	r4, 8004540 <USBD_CDC_ReceivePacket+0x18>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800453a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800453e:	e000      	b.n	8004542 <USBD_CDC_ReceivePacket+0x1a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004540:	2340      	movs	r3, #64	; 0x40
 8004542:	f000 f904 	bl	800474e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004546:	2000      	movs	r0, #0
 8004548:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USBD_FAIL;
 800454a:	2002      	movs	r0, #2
  }
}
 800454c:	bd10      	pop	{r4, pc}
	...

08004550 <HAL_PCD_MspInit>:
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004550:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
 8004554:	4c24      	ldr	r4, [pc, #144]	; (80045e8 <HAL_PCD_MspInit+0x98>)
 8004556:	6963      	ldr	r3, [r4, #20]
 8004558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800455c:	6163      	str	r3, [r4, #20]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 800455e:	6963      	ldr	r3, [r4, #20]
  * @brief  Initializes the PCD MSP.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef *hpcd)
{
 8004560:	b086      	sub	sp, #24
  
  /* Enable the GPIOA clock for USB DataLines */
  __GPIOA_CLK_ENABLE();
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();
 8004562:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004566:	6163      	str	r3, [r4, #20]

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 8004568:	f44f 56c0 	mov.w	r6, #6144	; 0x1800
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800456c:	2311      	movs	r3, #17
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800456e:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004570:	f04f 0803 	mov.w	r8, #3
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004574:	270e      	movs	r7, #14
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004576:	a901      	add	r1, sp, #4
 8004578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800457c:	9302      	str	r3, [sp, #8]
  
  /* Enable the GPIOB clock for USB external Pull-Up */
  __GPIOB_CLK_ENABLE();

  /* Create a USB Disconnect signal for 1ms */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 800457e:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004580:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004582:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8004586:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8004588:	f7fd feca 	bl	8002320 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
 800458c:	4631      	mov	r1, r6
 800458e:	462a      	mov	r2, r5
 8004590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004594:	f7fd ff82 	bl	800249c <HAL_GPIO_WritePin>
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBD_LL_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8004598:	2001      	movs	r0, #1
 800459a:	f7fd fe4d 	bl	8002238 <HAL_Delay>
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 

  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),0);
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);
 800459e:	4631      	mov	r1, r6
 80045a0:	2201      	movs	r2, #1
 80045a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045a6:	f7fd ff79 	bl	800249c <HAL_GPIO_WritePin>

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80045ac:	a901      	add	r1, sp, #4
 80045ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045b2:	9302      	str	r3, [sp, #8]
  USBD_LL_Delay(1);
  HAL_GPIO_WritePin(GPIOA,(GPIO_PIN_11 | GPIO_PIN_12),1);

  
  /* Configure USB DM and DP pins */
  GPIO_InitStruct.Pin = (GPIO_PIN_11 | GPIO_PIN_12);
 80045b4:	9601      	str	r6, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b6:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 80045b8:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80045bc:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 80045be:	f7fd feaf 	bl	8002320 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
  HAL_GPIO_Init(USB_DISCONNECT_PORT, &GPIO_InitStruct); 
#endif  

  /* Enable USB FS Clock */
  __USB_CLK_ENABLE();
 80045c2:	69e3      	ldr	r3, [r4, #28]
 80045c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80045c8:	61e3      	str	r3, [r4, #28]
  
  /* Enable SYSCFG Clock */
  __SYSCFG_CLK_ENABLE();
 80045ca:	69a3      	ldr	r3, [r4, #24]
 80045cc:	f043 0301 	orr.w	r3, r3, #1
 80045d0:	61a3      	str	r3, [r4, #24]
#endif
  
#if defined (USE_USB_INTERRUPT_DEFAULT)
  
  /* Set USB Default FS Interrupt priority */
  HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 5, 0);
 80045d2:	2105      	movs	r1, #5
 80045d4:	462a      	mov	r2, r5
 80045d6:	2014      	movs	r0, #20
 80045d8:	f7fd fe4e 	bl	8002278 <HAL_NVIC_SetPriority>
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn); 
 80045dc:	2014      	movs	r0, #20
 80045de:	f7fd fe7d 	bl	80022dc <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USB_LP_IRQn, 5, 0);
  
  /* Enable USB FS Interrupt */
  HAL_NVIC_EnableIRQ(USB_LP_IRQn); 
#endif
}
 80045e2:	b006      	add	sp, #24
 80045e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80045e8:	40021000 	.word	0x40021000

080045ec <HAL_PCD_SetupStageCallback>:
  * @brief  SetupStage callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
 80045ec:	4601      	mov	r1, r0
  USBD_LL_SetupStage(hpcd->pData, (uint8_t *)hpcd->Setup);
 80045ee:	f501 71a2 	add.w	r1, r1, #324	; 0x144
 80045f2:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 80045f6:	f7ff bbc0 	b.w	8003d7a <USBD_LL_SetupStage>

080045fa <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage(hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80045fa:	231c      	movs	r3, #28
 80045fc:	fb03 0301 	mla	r3, r3, r1, r0
 8004600:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004604:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 8004608:	f7ff bbe4 	b.w	8003dd4 <USBD_LL_DataOutStage>

0800460c <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage(hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800460c:	231c      	movs	r3, #28
 800460e:	fb03 0301 	mla	r3, r3, r1, r0
 8004612:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004616:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004618:	f7ff bc0c 	b.w	8003e34 <USBD_LL_DataInStage>

0800461c <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF(hpcd->pData);
 800461c:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 8004620:	f7ff bc6f 	b.w	8003f02 <USBD_LL_SOF>

08004624 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
 8004624:	b510      	push	{r4, lr}
 8004626:	4604      	mov	r4, r0
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
 8004628:	2101      	movs	r1, #1
 800462a:	f8d0 0174 	ldr.w	r0, [r0, #372]	; 0x174
 800462e:	f7ff fc65 	bl	8003efc <USBD_LL_SetSpeed>
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 8004632:	f8d4 0174 	ldr.w	r0, [r4, #372]	; 0x174
}
 8004636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{   
  USBD_LL_SetSpeed(hpcd->pData, USBD_SPEED_FULL);
  /* Reset Device */
  USBD_LL_Reset(hpcd->pData);
 800463a:	f7ff bc40 	b.w	8003ebe <USBD_LL_Reset>

0800463e <HAL_PCD_SuspendCallback>:
  * @brief  Suspend callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 800463e:	4770      	bx	lr

08004640 <HAL_PCD_ResumeCallback>:
  * @brief  Resume callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
 8004640:	4770      	bx	lr
	...

08004644 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004644:	b538      	push	{r3, r4, r5, lr}
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004646:	4a1c      	ldr	r2, [pc, #112]	; (80046b8 <USBD_LL_Init+0x74>)
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
 8004648:	4605      	mov	r5, r0
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
 800464a:	481c      	ldr	r0, [pc, #112]	; (80046bc <USBD_LL_Init+0x78>)
  hpcd.Init.dev_endpoints = 8;
 800464c:	2308      	movs	r3, #8
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800464e:	2400      	movs	r4, #0
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
 8004650:	e880 000c 	stmia.w	r0, {r2, r3}
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
  hpcd.Init.speed = PCD_SPEED_FULL;
  /* Link The driver to the stack */
  hpcd.pData = pdev;
  pdev->pData = &hpcd;
 8004654:	f8c5 0220 	str.w	r0, [r5, #544]	; 0x220
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004658:	2202      	movs	r2, #2
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{    
  /* Set LL Driver parameters */
  hpcd.Instance = USB;
  hpcd.Init.dev_endpoints = 8;
  hpcd.Init.ep0_mps = PCD_EP0MPS_64;
 800465a:	60c4      	str	r4, [r0, #12]
  hpcd.Init.phy_itface = PCD_PHY_EMBEDDED;
 800465c:	6102      	str	r2, [r0, #16]
  hpcd.Init.speed = PCD_SPEED_FULL;
 800465e:	6082      	str	r2, [r0, #8]
  /* Link The driver to the stack */
  hpcd.pData = pdev;
 8004660:	f8c0 5174 	str.w	r5, [r0, #372]	; 0x174
  pdev->pData = &hpcd;
  /* Initialize LL Driver */
  HAL_PCD_Init(pdev->pData);
 8004664:	f7fd ff23 	bl	80024ae <HAL_PCD_Init>
  
  HAL_PCDEx_PMAConfig(pdev->pData , 0x00 , PCD_SNG_BUF, 0x40);
 8004668:	4621      	mov	r1, r4
 800466a:	4622      	mov	r2, r4
 800466c:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8004670:	2340      	movs	r3, #64	; 0x40
 8004672:	f7fe fdfe 	bl	8003272 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , 0x80 , PCD_SNG_BUF, 0x80);
 8004676:	2180      	movs	r1, #128	; 0x80
 8004678:	4622      	mov	r2, r4
 800467a:	460b      	mov	r3, r1
 800467c:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8004680:	f7fe fdf7 	bl	8003272 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_IN_EP , PCD_SNG_BUF, 0xC0);  
 8004684:	4622      	mov	r2, r4
 8004686:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 800468a:	2181      	movs	r1, #129	; 0x81
 800468c:	23c0      	movs	r3, #192	; 0xc0
 800468e:	f7fe fdf0 	bl	8003272 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_OUT_EP , PCD_SNG_BUF, 0x110);
 8004692:	4622      	mov	r2, r4
 8004694:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 8004698:	2101      	movs	r1, #1
 800469a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800469e:	f7fe fde8 	bl	8003272 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig(pdev->pData , CDC_CMD_EP , PCD_SNG_BUF, 0x100); 
 80046a2:	f8d5 0220 	ldr.w	r0, [r5, #544]	; 0x220
 80046a6:	2182      	movs	r1, #130	; 0x82
 80046a8:	4622      	mov	r2, r4
 80046aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046ae:	f7fe fde0 	bl	8003272 <HAL_PCDEx_PMAConfig>
    
  return USBD_OK;
}
 80046b2:	4620      	mov	r0, r4
 80046b4:	bd38      	pop	{r3, r4, r5, pc}
 80046b6:	bf00      	nop
 80046b8:	40005c00 	.word	0x40005c00
 80046bc:	200065d4 	.word	0x200065d4

080046c0 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80046c0:	b508      	push	{r3, lr}
  HAL_PCD_Start(pdev->pData);
 80046c2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80046c6:	f7fd ff38 	bl	800253a <HAL_PCD_Start>
  return USBD_OK;
}
 80046ca:	2000      	movs	r0, #0
 80046cc:	bd08      	pop	{r3, pc}

080046ce <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev,
                                  uint8_t ep_addr,
                                  uint8_t ep_type,
                                  uint16_t ep_mps)
{
 80046ce:	b510      	push	{r4, lr}
 80046d0:	4614      	mov	r4, r2
  HAL_PCD_EP_Open(pdev->pData,
 80046d2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80046d6:	461a      	mov	r2, r3
 80046d8:	4623      	mov	r3, r4
 80046da:	f7fd ff4a 	bl	8002572 <HAL_PCD_EP_Open>
                  ep_addr,
                  ep_mps,
                  ep_type);
  
  return USBD_OK;
}
 80046de:	2000      	movs	r0, #0
 80046e0:	bd10      	pop	{r4, pc}

080046e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80046e2:	b508      	push	{r3, lr}
  HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80046e4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80046e8:	f7fe f8e6 	bl	80028b8 <HAL_PCD_EP_Close>
  return USBD_OK;
}
 80046ec:	2000      	movs	r0, #0
 80046ee:	bd08      	pop	{r3, pc}

080046f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80046f0:	b508      	push	{r3, lr}
  HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80046f2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80046f6:	f7fe fd07 	bl	8003108 <HAL_PCD_EP_SetStall>
  return USBD_OK;
}
 80046fa:	2000      	movs	r0, #0
 80046fc:	bd08      	pop	{r3, pc}

080046fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80046fe:	b508      	push	{r3, lr}
  HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8004700:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004704:	f7fe fd51 	bl	80031aa <HAL_PCD_EP_ClrStall>
  return USBD_OK; 
}
 8004708:	2000      	movs	r0, #0
 800470a:	bd08      	pop	{r3, pc}

0800470c <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 800470c:	f011 0f80 	tst.w	r1, #128	; 0x80
  * @param  ep_addr: Endpoint Number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004710:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 8004714:	f04f 021c 	mov.w	r2, #28
  
  if((ep_addr & 0x80) == 0x80)
 8004718:	d006      	beq.n	8004728 <USBD_LL_IsStallEP+0x1c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800471a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800471e:	fb02 3301 	mla	r3, r2, r1, r3
 8004722:	f893 002a 	ldrb.w	r0, [r3, #42]	; 0x2a
 8004726:	4770      	bx	lr
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8004728:	fb02 3101 	mla	r1, r2, r1, r3
 800472c:	f891 00b6 	ldrb.w	r0, [r1, #182]	; 0xb6
  }
}
 8004730:	4770      	bx	lr

08004732 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8004732:	b508      	push	{r3, lr}
  HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004734:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004738:	f7fd ff05 	bl	8002546 <HAL_PCD_SetAddress>
  return USBD_OK; 
}
 800473c:	2000      	movs	r0, #0
 800473e:	bd08      	pop	{r3, pc}

08004740 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, 
                                    uint8_t ep_addr,
                                    uint8_t *pbuf,
                                    uint16_t size)
{
 8004740:	b508      	push	{r3, lr}
  HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004742:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004746:	f7fe fa02 	bl	8002b4e <HAL_PCD_EP_Transmit>
  return USBD_OK;
}
 800474a:	2000      	movs	r0, #0
 800474c:	bd08      	pop	{r3, pc}

0800474e <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                          uint8_t ep_addr,
                                          uint8_t *pbuf,
                                          uint16_t size)
{
 800474e:	b508      	push	{r3, lr}
  HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8004750:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004754:	f7fe f98b 	bl	8002a6e <HAL_PCD_EP_Receive>
  return USBD_OK;
}
 8004758:	2000      	movs	r0, #0
 800475a:	bd08      	pop	{r3, pc}

0800475c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800475c:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount(pdev->pData, ep_addr);
 800475e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004762:	f7fe f9ec 	bl	8002b3e <HAL_PCD_EP_GetRxCount>
}
 8004766:	bd08      	pop	{r3, pc}

08004768 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[MAX_STATIC_ALLOC_SIZE];
  return mem;
}
 8004768:	4800      	ldr	r0, [pc, #0]	; (800476c <USBD_static_malloc+0x4>)
 800476a:	4770      	bx	lr
 800476c:	20000b98 	.word	0x20000b98

08004770 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8004770:	4770      	bx	lr
	...

08004774 <USBD_VCP_DeviceDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(hUSBDDeviceDesc);
 8004774:	2312      	movs	r3, #18
 8004776:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)hUSBDDeviceDesc;
}
 8004778:	4800      	ldr	r0, [pc, #0]	; (800477c <USBD_VCP_DeviceDescriptor+0x8>)
 800477a:	4770      	bx	lr
 800477c:	08017906 	.word	0x08017906

08004780 <USBD_VCP_LangIDStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);  
 8004780:	2304      	movs	r3, #4
 8004782:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_LangIDDesc;
}
 8004784:	4800      	ldr	r0, [pc, #0]	; (8004788 <USBD_VCP_LangIDStrDescriptor+0x8>)
 8004786:	4770      	bx	lr
 8004788:	080178b5 	.word	0x080178b5

0800478c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
 800478c:	b510      	push	{r4, lr}
 800478e:	3101      	adds	r1, #1
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 8004790:	2300      	movs	r3, #0
 8004792:	4293      	cmp	r3, r2
 8004794:	d00d      	beq.n	80047b2 <IntToUnicode+0x26>
  {
    if( ((value >> 28)) < 0xA )
 8004796:	0f04      	lsrs	r4, r0, #28
 8004798:	2c09      	cmp	r4, #9
    {
      pbuf[ 2* idx] = (value >> 28) + '0';
 800479a:	bf94      	ite	ls
 800479c:	3430      	addls	r4, #48	; 0x30
    }
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
 800479e:	3437      	addhi	r4, #55	; 0x37
 80047a0:	f801 4c01 	strb.w	r4, [r1, #-1]
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80047a4:	3301      	adds	r3, #1
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
 80047a6:	2400      	movs	r4, #0
    else
    {
      pbuf[2* idx] = (value >> 28) + 'A' - 10; 
    }
    
    value = value << 4;
 80047a8:	0100      	lsls	r0, r0, #4
    
    pbuf[ 2* idx + 1] = 0;
 80047aa:	f801 4b02 	strb.w	r4, [r1], #2
  */
static void IntToUnicode (uint32_t value , uint8_t *pbuf , uint8_t len)
{
  uint8_t idx = 0;
  
  for( idx = 0 ; idx < len ; idx ++)
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	e7ef      	b.n	8004792 <IntToUnicode+0x6>
    
    value = value << 4;
    
    pbuf[ 2* idx + 1] = 0;
  }
}
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <USBD_VCP_SerialStrDescriptor>:
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = USB_SIZ_STRING_SERIAL;
 80047b4:	231a      	movs	r3, #26
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80047b6:	b510      	push	{r4, lr}
  *length = USB_SIZ_STRING_SERIAL;
 80047b8:	800b      	strh	r3, [r1, #0]
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;
  
  deviceserial0 = *(uint32_t*)DEVICE_ID1;
 80047ba:	4b09      	ldr	r3, [pc, #36]	; (80047e0 <USBD_VCP_SerialStrDescriptor+0x2c>)
  deviceserial1 = *(uint32_t*)DEVICE_ID2;
 80047bc:	e893 0014 	ldmia.w	r3, {r2, r4}
  deviceserial2 = *(uint32_t*)DEVICE_ID3;
 80047c0:	3308      	adds	r3, #8
  
  deviceserial0 += deviceserial2;
 80047c2:	681b      	ldr	r3, [r3, #0]
  
  if (deviceserial0 != 0)
 80047c4:	18d0      	adds	r0, r2, r3
 80047c6:	d008      	beq.n	80047da <USBD_VCP_SerialStrDescriptor+0x26>
  {
    IntToUnicode (deviceserial0, &USBD_StringSerial[2] ,8);
 80047c8:	4906      	ldr	r1, [pc, #24]	; (80047e4 <USBD_VCP_SerialStrDescriptor+0x30>)
 80047ca:	2208      	movs	r2, #8
 80047cc:	f7ff ffde 	bl	800478c <IntToUnicode>
    IntToUnicode (deviceserial1, &USBD_StringSerial[18] ,4);
 80047d0:	4620      	mov	r0, r4
 80047d2:	4905      	ldr	r1, [pc, #20]	; (80047e8 <USBD_VCP_SerialStrDescriptor+0x34>)
 80047d4:	2204      	movs	r2, #4
 80047d6:	f7ff ffd9 	bl	800478c <IntToUnicode>
  
  /* Update the serial number string descriptor with the data from the unique ID*/
  Get_SerialNum();
  
  return USBD_StringSerial;
}
 80047da:	4804      	ldr	r0, [pc, #16]	; (80047ec <USBD_VCP_SerialStrDescriptor+0x38>)
 80047dc:	bd10      	pop	{r4, pc}
 80047de:	bf00      	nop
 80047e0:	1ffff7ac 	.word	0x1ffff7ac
 80047e4:	20000146 	.word	0x20000146
 80047e8:	20000156 	.word	0x20000156
 80047ec:	20000144 	.word	0x20000144

080047f0 <USBD_VCP_ProductStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80047f0:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80047f2:	4c04      	ldr	r4, [pc, #16]	; (8004804 <USBD_VCP_ProductStrDescriptor+0x14>)
 80047f4:	4804      	ldr	r0, [pc, #16]	; (8004808 <USBD_VCP_ProductStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80047f6:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_PRODUCT_FS_STRING, USBD_StrDesc, length);    
 80047f8:	4621      	mov	r1, r4
 80047fa:	f7ff fd2b 	bl	8004254 <USBD_GetString>
  return USBD_StrDesc;
}
 80047fe:	4620      	mov	r0, r4
 8004800:	bd10      	pop	{r4, pc}
 8004802:	bf00      	nop
 8004804:	2000674c 	.word	0x2000674c
 8004808:	080178b9 	.word	0x080178b9

0800480c <USBD_VCP_ManufacturerStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800480c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800480e:	4c04      	ldr	r4, [pc, #16]	; (8004820 <USBD_VCP_ManufacturerStrDescriptor+0x14>)
 8004810:	4804      	ldr	r0, [pc, #16]	; (8004824 <USBD_VCP_ManufacturerStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004812:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8004814:	4621      	mov	r1, r4
 8004816:	f7ff fd1d 	bl	8004254 <USBD_GetString>
  return USBD_StrDesc;
}
 800481a:	4620      	mov	r0, r4
 800481c:	bd10      	pop	{r4, pc}
 800481e:	bf00      	nop
 8004820:	2000674c 	.word	0x2000674c
 8004824:	080178da 	.word	0x080178da

08004828 <USBD_VCP_ConfigStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004828:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 800482a:	4c04      	ldr	r4, [pc, #16]	; (800483c <USBD_VCP_ConfigStrDescriptor+0x14>)
 800482c:	4804      	ldr	r0, [pc, #16]	; (8004840 <USBD_VCP_ConfigStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800482e:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_CONFIGURATION_FS_STRING, USBD_StrDesc, length); 
 8004830:	4621      	mov	r1, r4
 8004832:	f7ff fd0f 	bl	8004254 <USBD_GetString>
  return USBD_StrDesc;  
}
 8004836:	4620      	mov	r0, r4
 8004838:	bd10      	pop	{r4, pc}
 800483a:	bf00      	nop
 800483c:	2000674c 	.word	0x2000674c
 8004840:	080178ed 	.word	0x080178ed

08004844 <USBD_VCP_InterfaceStrDescriptor>:
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8004844:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 8004846:	4c04      	ldr	r4, [pc, #16]	; (8004858 <USBD_VCP_InterfaceStrDescriptor+0x14>)
 8004848:	4804      	ldr	r0, [pc, #16]	; (800485c <USBD_VCP_InterfaceStrDescriptor+0x18>)
  * @param  speed: Current device speed
  * @param  length: Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t *USBD_VCP_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800484a:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_INTERFACE_FS_STRING, USBD_StrDesc, length);
 800484c:	4621      	mov	r1, r4
 800484e:	f7ff fd01 	bl	8004254 <USBD_GetString>
  return USBD_StrDesc;  
}
 8004852:	4620      	mov	r0, r4
 8004854:	bd10      	pop	{r4, pc}
 8004856:	bf00      	nop
 8004858:	2000674c 	.word	0x2000674c
 800485c:	080178f8 	.word	0x080178f8

08004860 <CDC_Itf_DeInit>:
  */
static int8_t CDC_Itf_DeInit(void)
{

  return (USBD_OK);
}
 8004860:	2000      	movs	r0, #0
 8004862:	4770      	bx	lr

08004864 <CDC_Itf_Receive>:
  * @param  Buf: Buffer of data to be transmitted
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Receive(uint8_t* Buf, uint32_t *Len)
{
 8004864:	b508      	push	{r3, lr}
 8004866:	460b      	mov	r3, r1
 8004868:	4602      	mov	r2, r0
  /* Write data into Terminal Rx buffer */
  TerminalInputBufferWrite(INDEX_USB, (char *)Buf, *Len);
 800486a:	4611      	mov	r1, r2
 800486c:	2000      	movs	r0, #0
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	f7fc f9e6 	bl	8000c40 <TerminalInputBufferWrite>
  USBD_CDC_ReceivePacket(&hUSBDDevice);  /* Reset for next packet */
 8004874:	4802      	ldr	r0, [pc, #8]	; (8004880 <CDC_Itf_Receive+0x1c>)
 8004876:	f7ff fe57 	bl	8004528 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
}
 800487a:	2000      	movs	r0, #0
 800487c:	bd08      	pop	{r3, pc}
 800487e:	bf00      	nop
 8004880:	20000f3c 	.word	0x20000f3c

08004884 <CDC_Itf_Init>:
  *         Initializes the CDC media low layer
  * @param  None
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Init(void)
{
 8004884:	b508      	push	{r3, lr}
  //  USBD_CDC_SetTxBuffer(&hUSBDDevice, NULL, 0);
  USBD_CDC_SetRxBuffer(&hUSBDDevice, UserRxBuffer);
 8004886:	4903      	ldr	r1, [pc, #12]	; (8004894 <CDC_Itf_Init+0x10>)
 8004888:	4803      	ldr	r0, [pc, #12]	; (8004898 <CDC_Itf_Init+0x14>)
 800488a:	f7ff fe30 	bl	80044ee <USBD_CDC_SetRxBuffer>


  return (USBD_OK);
}
 800488e:	2000      	movs	r0, #0
 8004890:	bd08      	pop	{r3, pc}
 8004892:	bf00      	nop
 8004894:	200068bc 	.word	0x200068bc
 8004898:	20000f3c 	.word	0x20000f3c

0800489c <CDC_Itf_Control>:
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the opeartion: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Itf_Control (uint8_t cmd, uint8_t* pbuf, uint16_t length)
{ 
  switch (cmd)
 800489c:	2820      	cmp	r0, #32
 800489e:	d012      	beq.n	80048c6 <CDC_Itf_Control+0x2a>
 80048a0:	2821      	cmp	r0, #33	; 0x21
 80048a2:	d122      	bne.n	80048ea <CDC_Itf_Control+0x4e>
    /* Set the new configuration */

    break;

  case CDC_GET_LINE_CODING:
    pbuf[0] = (uint8_t)(LineCoding.bitrate);
 80048a4:	4b12      	ldr	r3, [pc, #72]	; (80048f0 <CDC_Itf_Control+0x54>)
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	700a      	strb	r2, [r1, #0]
    pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	0a12      	lsrs	r2, r2, #8
 80048ae:	704a      	strb	r2, [r1, #1]
    pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 80048b0:	885a      	ldrh	r2, [r3, #2]
 80048b2:	708a      	strb	r2, [r1, #2]
    pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 80048b4:	78da      	ldrb	r2, [r3, #3]
 80048b6:	70ca      	strb	r2, [r1, #3]
    pbuf[4] = LineCoding.format;
 80048b8:	791a      	ldrb	r2, [r3, #4]
 80048ba:	710a      	strb	r2, [r1, #4]
    pbuf[5] = LineCoding.paritytype;
 80048bc:	795a      	ldrb	r2, [r3, #5]
 80048be:	714a      	strb	r2, [r1, #5]
    pbuf[6] = LineCoding.datatype;     
 80048c0:	799b      	ldrb	r3, [r3, #6]
 80048c2:	718b      	strb	r3, [r1, #6]
    
    /* Add your code here */
    break;
 80048c4:	e011      	b.n	80048ea <CDC_Itf_Control+0x4e>
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80048c6:	788a      	ldrb	r2, [r1, #2]
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80048c8:	7848      	ldrb	r0, [r1, #1]
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <CDC_Itf_Control+0x54>)
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80048cc:	0412      	lsls	r2, r2, #16
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80048ce:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80048d2:	7808      	ldrb	r0, [r1, #0]
 80048d4:	4302      	orrs	r2, r0
                            (pbuf[2] << 16) | (pbuf[3] << 24));
 80048d6:	78c8      	ldrb	r0, [r1, #3]
 80048d8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
  case CDC_CLEAR_COMM_FEATURE:
    /* Add your code here */
    break;

  case CDC_SET_LINE_CODING:
    LineCoding.bitrate    = (uint32_t)(pbuf[0] | (pbuf[1] << 8) |\
 80048dc:	601a      	str	r2, [r3, #0]
                            (pbuf[2] << 16) | (pbuf[3] << 24));
    LineCoding.format     = pbuf[4];
 80048de:	790a      	ldrb	r2, [r1, #4]
 80048e0:	711a      	strb	r2, [r3, #4]
    LineCoding.paritytype = pbuf[5];
 80048e2:	794a      	ldrb	r2, [r1, #5]
 80048e4:	715a      	strb	r2, [r3, #5]
    LineCoding.datatype   = pbuf[6];
 80048e6:	798a      	ldrb	r2, [r1, #6]
 80048e8:	719a      	strb	r2, [r3, #6]
  default:
    break;
  }
  
  return (USBD_OK);
}
 80048ea:	2000      	movs	r0, #0
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20000160 	.word	0x20000160

080048f4 <SPIx_Init>:
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 80048f4:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80048f6:	4c1c      	ldr	r4, [pc, #112]	; (8004968 <SPIx_Init+0x74>)
  * @brief SPIx Bus initialization
  * @param None
  * @retval None
  */
static void SPIx_Init(void)
{
 80048f8:	b086      	sub	sp, #24
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80048fa:	4620      	mov	r0, r4
 80048fc:	f7ff fa07 	bl	8003d0e <HAL_SPI_GetState>
 8004900:	2800      	cmp	r0, #0
 8004902:	d12e      	bne.n	8004962 <SPIx_Init+0x6e>
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004904:	4b19      	ldr	r3, [pc, #100]	; (800496c <SPIx_Init+0x78>)
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
 8004906:	60a0      	str	r0, [r4, #8]
static void SPIx_Init(void)
{
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
  {
    /* SPI Config */
    SpiHandle.Instance = DISCOVERY_SPIx;
 8004908:	6023      	str	r3, [r4, #0]
      to verify these constraints:
      ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800490a:	2318      	movs	r3, #24
 800490c:	61e3      	str	r3, [r4, #28]
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial = 7;
 800490e:	2307      	movs	r3, #7
 8004910:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8004912:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004916:	60e3      	str	r3, [r4, #12]
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8004918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800491c:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;
 800491e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004922:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004924:	4b12      	ldr	r3, [pc, #72]	; (8004970 <SPIx_Init+0x7c>)
      l3gd20 SPI interface max baudrate is 10MHz for write/read
      PCLK2 frequency is set to 90 MHz 
  */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
    SpiHandle.Init.Direction = SPI_DIRECTION_2LINES; 
    SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004926:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004928:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800492a:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.CRCPolynomial = 7;
    SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800492c:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800492e:	6260      	str	r0, [r4, #36]	; 0x24
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI1 clock  */
  DISCOVERY_SPIx_CLK_ENABLE();
 8004930:	699a      	ldr	r2, [r3, #24]
 8004932:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004936:	619a      	str	r2, [r3, #24]

  /* enable SPI1 gpio clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8004938:	695a      	ldr	r2, [r3, #20]
 800493a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800493e:	615a      	str	r2, [r3, #20]

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8004940:	23e0      	movs	r3, #224	; 0xe0
 8004942:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004944:	2302      	movs	r3, #2
 8004946:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004948:	2303      	movs	r3, #3
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();

  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
 800494a:	9003      	str	r0, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 800494c:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 800494e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004952:	2305      	movs	r3, #5
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004954:	a901      	add	r1, sp, #4
  /* configure SPI1 SCK, MOSI and MISO */
  GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL; /* or GPIO_PULLDOWN */
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8004956:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);      
 8004958:	f7fd fce2 	bl	8002320 <HAL_GPIO_Init>
    SpiHandle.Init.NSS = SPI_NSS_SOFT;
    SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode = SPI_MODE_MASTER;

    SPIx_MspInit(&SpiHandle);
    HAL_SPI_Init(&SpiHandle);
 800495c:	4620      	mov	r0, r4
 800495e:	f7ff f82a 	bl	80039b6 <HAL_SPI_Init>
  }
}
 8004962:	b006      	add	sp, #24
 8004964:	bd10      	pop	{r4, pc}
 8004966:	bf00      	nop
 8004968:	20000dc8 	.word	0x20000dc8
 800496c:	40013000 	.word	0x40013000
 8004970:	40021000 	.word	0x40021000

08004974 <SPIx_WriteRead>:
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8004974:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  uint8_t receivedbyte = 0;
 8004976:	2300      	movs	r3, #0
 8004978:	f88d 3017 	strb.w	r3, [sp, #23]
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 800497c:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <SPIx_WriteRead+0x38>)
  *         from the SPI bus.
  * @param  Byte : Byte send.
  * @retval The received byte value
  */
static uint8_t SPIx_WriteRead(uint8_t Byte)
{
 800497e:	f88d 000f 	strb.w	r0, [sp, #15]

  uint8_t receivedbyte = 0;
  
  /* Send a Byte through the SPI peripheral */
  /* Read byte from the SPI bus */
  if(HAL_SPI_TransmitReceive(&SpiHandle, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, SpixTimeout) != HAL_OK)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	480a      	ldr	r0, [pc, #40]	; (80049b0 <SPIx_WriteRead+0x3c>)
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	f10d 010f 	add.w	r1, sp, #15
 800498c:	f10d 0217 	add.w	r2, sp, #23
 8004990:	2301      	movs	r3, #1
 8004992:	f7ff f87a 	bl	8003a8a <HAL_SPI_TransmitReceive>
 8004996:	b120      	cbz	r0, 80049a2 <SPIx_WriteRead+0x2e>
  * @retval None
  */
static void SPIx_Error (void)
{
  /* De-initialize the SPI comunication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8004998:	4805      	ldr	r0, [pc, #20]	; (80049b0 <SPIx_WriteRead+0x3c>)
 800499a:	f7ff f85f 	bl	8003a5c <HAL_SPI_DeInit>
  
  /* Re- Initiaize the SPI comunication BUS */
  SPIx_Init();
 800499e:	f7ff ffa9 	bl	80048f4 <SPIx_Init>
  {
    SPIx_Error();
  }
  
  return receivedbyte;
}
 80049a2:	f89d 0017 	ldrb.w	r0, [sp, #23]
 80049a6:	b007      	add	sp, #28
 80049a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80049ac:	20000178 	.word	0x20000178
 80049b0:	20000dc8 	.word	0x20000dc8

080049b4 <I2Cx_Init>:
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 80049b4:	b530      	push	{r4, r5, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80049b6:	4c16      	ldr	r4, [pc, #88]	; (8004a10 <I2Cx_Init+0x5c>)
  * @brief Discovery I2Cx Bus initialization
  * @param None
  * @retval None
  */
static void I2Cx_Init(void)
{
 80049b8:	b087      	sub	sp, #28
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80049ba:	4620      	mov	r0, r4
 80049bc:	f7fe ff44 	bl	8003848 <HAL_I2C_GetState>
 80049c0:	bb18      	cbnz	r0, 8004a0a <I2Cx_Init+0x56>
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80049c2:	4b14      	ldr	r3, [pc, #80]	; (8004a14 <I2Cx_Init+0x60>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80049c4:	4d14      	ldr	r5, [pc, #80]	; (8004a18 <I2Cx_Init+0x64>)
  */
static void I2Cx_Init(void)
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
 80049c6:	6023      	str	r3, [r4, #0]
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
 80049c8:	2332      	movs	r3, #50	; 0x32
 80049ca:	60a3      	str	r3, [r4, #8]
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049cc:	2301      	movs	r3, #1
    I2cHandle.Init.DualAddressMode = I2C_DUALADDRESS_DISABLED;
 80049ce:	6120      	str	r0, [r4, #16]
    I2cHandle.Init.OwnAddress2 = 0;
 80049d0:	6160      	str	r0, [r4, #20]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
 80049d2:	61e0      	str	r0, [r4, #28]
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	
 80049d4:	6220      	str	r0, [r4, #32]
{
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
  {
    I2cHandle.Instance = DISCOVERY_I2Cx;
    I2cHandle.Init.OwnAddress1 =  ACCELERO_I2C_ADDRESS;
    I2cHandle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80049d6:	60e3      	str	r3, [r4, #12]
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80049d8:	696b      	ldr	r3, [r5, #20]
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80049da:	4810      	ldr	r0, [pc, #64]	; (8004a1c <I2Cx_Init+0x68>)
{

  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable SCK and SDA GPIO clocks */
  DISCOVERY_I2Cx_GPIO_CLK_ENABLE();
 80049dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049e0:	616b      	str	r3, [r5, #20]

  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
 80049e2:	23c0      	movs	r3, #192	; 0xc0
 80049e4:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 80049e6:	2302      	movs	r3, #2
 80049e8:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 80049ea:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80049ec:	2303      	movs	r3, #3
 80049ee:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80049f0:	2304      	movs	r3, #4
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80049f2:	eb0d 0103 	add.w	r1, sp, r3
  /* I2Cx SD1 & SCK pin configuration */
  GPIO_InitStructure.Pin = (DISCOVERY_I2Cx_SDA_PIN | DISCOVERY_I2Cx_SCL_PIN);
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Alternate = DISCOVERY_I2Cx_AF;
 80049f6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(DISCOVERY_I2Cx_GPIO_PORT, &GPIO_InitStructure);
 80049f8:	f7fd fc92 	bl	8002320 <HAL_GPIO_Init>

  /* Enable the I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80049fc:	69eb      	ldr	r3, [r5, #28]
 80049fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a02:	61eb      	str	r3, [r5, #28]
    I2cHandle.Init.GeneralCallMode = I2C_GENERALCALL_DISABLED;
    I2cHandle.Init.NoStretchMode = I2C_NOSTRETCH_DISABLED;	

    /* Init the I2C */
    I2Cx_MspInit(&I2cHandle);
    HAL_I2C_Init(&I2cHandle);
 8004a04:	4620      	mov	r0, r4
 8004a06:	f7fe fdbd 	bl	8003584 <HAL_I2C_Init>
  }
}
 8004a0a:	b007      	add	sp, #28
 8004a0c:	bd30      	pop	{r4, r5, pc}
 8004a0e:	bf00      	nop
 8004a10:	20000e28 	.word	0x20000e28
 8004a14:	40005400 	.word	0x40005400
 8004a18:	40021000 	.word	0x40021000
 8004a1c:	48000400 	.word	0x48000400

08004a20 <BSP_LED_Init>:
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004a20:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004a22:	4604      	mov	r4, r0
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004a24:	b086      	sub	sp, #24
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004a26:	b168      	cbz	r0, 8004a44 <BSP_LED_Init+0x24>
 8004a28:	2801      	cmp	r0, #1
 8004a2a:	d00b      	beq.n	8004a44 <BSP_LED_Init+0x24>
 8004a2c:	2802      	cmp	r0, #2
 8004a2e:	d009      	beq.n	8004a44 <BSP_LED_Init+0x24>
 8004a30:	2803      	cmp	r0, #3
 8004a32:	d007      	beq.n	8004a44 <BSP_LED_Init+0x24>
 8004a34:	2804      	cmp	r0, #4
 8004a36:	d005      	beq.n	8004a44 <BSP_LED_Init+0x24>
 8004a38:	2805      	cmp	r0, #5
 8004a3a:	d003      	beq.n	8004a44 <BSP_LED_Init+0x24>
 8004a3c:	2806      	cmp	r0, #6
 8004a3e:	d001      	beq.n	8004a44 <BSP_LED_Init+0x24>
 8004a40:	2807      	cmp	r0, #7
 8004a42:	d104      	bne.n	8004a4e <BSP_LED_Init+0x2e>
 8004a44:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <BSP_LED_Init+0x5c>)
 8004a46:	695a      	ldr	r2, [r3, #20]
 8004a48:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004a4c:	615a      	str	r2, [r3, #20]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004a4e:	4b0c      	ldr	r3, [pc, #48]	; (8004a80 <BSP_LED_Init+0x60>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004a50:	4e0c      	ldr	r6, [pc, #48]	; (8004a84 <BSP_LED_Init+0x64>)
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004a52:	f833 5014 	ldrh.w	r5, [r3, r4, lsl #1]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004a56:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8004a5a:	9501      	str	r5, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a60:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004a62:	a901      	add	r1, sp, #4

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004a64:	2303      	movs	r3, #3
 8004a66:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8004a68:	f7fd fc5a 	bl	8002320 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8004a6c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004a70:	4629      	mov	r1, r5
 8004a72:	2200      	movs	r2, #0
 8004a74:	f7fd fd12 	bl	800249c <HAL_GPIO_WritePin>
}
 8004a78:	b006      	add	sp, #24
 8004a7a:	bd70      	pop	{r4, r5, r6, pc}
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	08017918 	.word	0x08017918
 8004a84:	20000184 	.word	0x20000184

08004a88 <BSP_LED_On>:
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8004a88:	4a04      	ldr	r2, [pc, #16]	; (8004a9c <BSP_LED_On+0x14>)
  *     @arg LED9
  *     @arg LED10
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004a8a:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 8004a8c:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004a90:	4a03      	ldr	r2, [pc, #12]	; (8004aa0 <BSP_LED_On+0x18>)
 8004a92:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f7fd bd00 	b.w	800249c <HAL_GPIO_WritePin>
 8004a9c:	20000184 	.word	0x20000184
 8004aa0:	08017918 	.word	0x08017918

08004aa4 <BSP_LED_Off>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004aa4:	4a04      	ldr	r2, [pc, #16]	; (8004ab8 <BSP_LED_Off+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004aa6:	4603      	mov	r3, r0
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8004aa8:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004aac:	4a03      	ldr	r2, [pc, #12]	; (8004abc <BSP_LED_Off+0x18>)
 8004aae:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f7fd bcf2 	b.w	800249c <HAL_GPIO_WritePin>
 8004ab8:	20000184 	.word	0x20000184
 8004abc:	08017918 	.word	0x08017918

08004ac0 <BSP_LED_Toggle>:
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004ac0:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <BSP_LED_Toggle+0x14>)
  *     @arg LED_BLUE2
  *     @arg LED_RED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8004ac2:	4603      	mov	r3, r0
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8004ac4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8004ac8:	4a03      	ldr	r2, [pc, #12]	; (8004ad8 <BSP_LED_Toggle+0x18>)
 8004aca:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8004ace:	f7fd bcea 	b.w	80024a6 <HAL_GPIO_TogglePin>
 8004ad2:	bf00      	nop
 8004ad4:	20000184 	.word	0x20000184
 8004ad8:	08017918 	.word	0x08017918

08004adc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004adc:	b510      	push	{r4, lr}
 8004ade:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <BSP_PB_Init+0x68>)
 8004ae0:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004ae2:	b918      	cbnz	r0, 8004aec <BSP_PB_Init+0x10>
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004aea:	615a      	str	r2, [r3, #20]
  __SYSCFG_CLK_ENABLE();
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	f042 0201 	orr.w	r2, r2, #1
 8004af2:	619a      	str	r2, [r3, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 8004af4:	b969      	cbnz	r1, 8004b12 <BSP_PB_Init+0x36>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8004af6:	2301      	movs	r3, #1
 8004af8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004afa:	2302      	movs	r3, #2
 8004afc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004afe:	2303      	movs	r3, #3
 8004b00:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004b02:	4b11      	ldr	r3, [pc, #68]	; (8004b48 <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_GPIO)
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b04:	9102      	str	r1, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004b06:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004b0a:	a901      	add	r1, sp, #4
 8004b0c:	f7fd fc08 	bl	8002320 <HAL_GPIO_Init>
 8004b10:	e016      	b.n	8004b40 <BSP_PB_Init+0x64>
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
 8004b12:	2901      	cmp	r1, #1
 8004b14:	d114      	bne.n	8004b40 <BSP_PB_Init+0x64>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8004b16:	2303      	movs	r3, #3
 8004b18:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <BSP_PB_Init+0x70>)
  }

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8004b1c:	9101      	str	r1, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
 8004b1e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004b20:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <BSP_PB_Init+0x6c>)

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b22:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004b24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

  if (ButtonMode == BUTTON_MODE_EXTI)
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b28:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING; 
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8004b2a:	a901      	add	r1, sp, #4
 8004b2c:	f7fd fbf8 	bl	8002320 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004b30:	2006      	movs	r0, #6
 8004b32:	210f      	movs	r1, #15
 8004b34:	4622      	mov	r2, r4
 8004b36:	f7fd fb9f 	bl	8002278 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004b3a:	2006      	movs	r0, #6
 8004b3c:	f7fd fbce 	bl	80022dc <HAL_NVIC_EnableIRQ>
  }
}
 8004b40:	b006      	add	sp, #24
 8004b42:	bd10      	pop	{r4, pc}
 8004b44:	40021000 	.word	0x40021000
 8004b48:	2000017c 	.word	0x2000017c
 8004b4c:	10110000 	.word	0x10110000

08004b50 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8004b50:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8004b52:	4b03      	ldr	r3, [pc, #12]	; (8004b60 <BSP_PB_GetState+0x10>)
 8004b54:	2101      	movs	r1, #1
 8004b56:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004b5a:	f7fd fc99 	bl	8002490 <HAL_GPIO_ReadPin>
}
 8004b5e:	bd08      	pop	{r3, pc}
 8004b60:	2000017c 	.word	0x2000017c

08004b64 <GYRO_IO_Init>:
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8004b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004b68:	4c16      	ldr	r4, [pc, #88]	; (8004bc4 <GYRO_IO_Init+0x60>)
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004b6a:	4d17      	ldr	r5, [pc, #92]	; (8004bc8 <GYRO_IO_Init+0x64>)
{
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004b6c:	6963      	ldr	r3, [r4, #20]
  * @brief  Configures the GYROSCOPE SPI interface.
  * @param  None
  * @retval None
  */
void GYRO_IO_Init(void)
{
 8004b6e:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
 8004b70:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b74:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004b76:	2600      	movs	r6, #0
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004b78:	f04f 0908 	mov.w	r9, #8
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004b7c:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004b80:	2703      	movs	r7, #3
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004b82:	4628      	mov	r0, r5
 8004b84:	a901      	add	r1, sp, #4
    GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Configure the Gyroscope Control pins ------------------------------------------*/
  /* Enable CS GPIO clock and  Configure GPIO PIN for Gyroscope Chip select */  
  GYRO_CS_GPIO_CLK_ENABLE();  
  GPIO_InitStructure.Pin = GYRO_CS_PIN;
 8004b86:	f8cd 9004 	str.w	r9, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8004b8a:	f8cd 8008 	str.w	r8, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004b8e:	9603      	str	r6, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004b90:	9704      	str	r7, [sp, #16]
  HAL_GPIO_Init(GYRO_CS_GPIO_PORT, &GPIO_InitStructure);
 8004b92:	f7fd fbc5 	bl	8002320 <HAL_GPIO_Init>

  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();
 8004b96:	4642      	mov	r2, r8
 8004b98:	4628      	mov	r0, r5
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	f7fd fc7e 	bl	800249c <HAL_GPIO_WritePin>

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
 8004ba0:	6963      	ldr	r3, [r4, #20]
 8004ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ba6:	6163      	str	r3, [r4, #20]
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004ba8:	4628      	mov	r0, r5
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004baa:	2306      	movs	r3, #6
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull= GPIO_NOPULL;
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004bac:	a901      	add	r1, sp, #4
  /* Deselect : Chip Select high */
  GYRO_CS_HIGH();

  /* Enable INT1, INT2 GPIO clock and Configure GPIO PINs to detect Interrupts */
  GYRO_INT_GPIO_CLK_ENABLE();
  GPIO_InitStructure.Pin = GYRO_INT1_PIN | GYRO_INT2_PIN;
 8004bae:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004bb0:	9602      	str	r6, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004bb2:	9704      	str	r7, [sp, #16]
  GPIO_InitStructure.Pull= GPIO_NOPULL;
 8004bb4:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(GYRO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004bb6:	f7fd fbb3 	bl	8002320 <HAL_GPIO_Init>
  
  SPIx_Init();
 8004bba:	f7ff fe9b 	bl	80048f4 <SPIx_Init>
}
 8004bbe:	b007      	add	sp, #28
 8004bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	48001000 	.word	0x48001000

08004bcc <GYRO_IO_Write>:
{
  /* Configure the MS bit: 
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
 8004bcc:	2a01      	cmp	r2, #1
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004bce:	b570      	push	{r4, r5, r6, lr}
 8004bd0:	460d      	mov	r5, r1
 8004bd2:	4606      	mov	r6, r0
       - When 0, the address will remain unchanged in multiple read/write commands.
       - When 1, the address will be auto incremented in multiple read/write commands.
  */
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
 8004bd4:	bf88      	it	hi
 8004bd6:	f041 0540 	orrhi.w	r5, r1, #64	; 0x40
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004bda:	480c      	ldr	r0, [pc, #48]	; (8004c0c <GYRO_IO_Write+0x40>)
  * @param  WriteAddr : GYROSCOPE's internal address to write to.
  * @param  NumByteToWrite: Number of bytes to write.
  * @retval None
  */
void GYRO_IO_Write(uint8_t* pBuffer, uint8_t WriteAddr, uint16_t NumByteToWrite)
{
 8004bdc:	4614      	mov	r4, r2
  if(NumByteToWrite > 0x01)
  {
    WriteAddr |= (uint8_t)MULTIPLEBYTE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004bde:	2108      	movs	r1, #8
 8004be0:	2200      	movs	r2, #0
 8004be2:	f7fd fc5b 	bl	800249c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(WriteAddr);
 8004be6:	4628      	mov	r0, r5
 8004be8:	f7ff fec4 	bl	8004974 <SPIx_WriteRead>
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
 8004bec:	b134      	cbz	r4, 8004bfc <GYRO_IO_Write+0x30>
  {
    SPIx_WriteRead(*pBuffer);
 8004bee:	f816 0b01 	ldrb.w	r0, [r6], #1
    NumByteToWrite--;
 8004bf2:	3c01      	subs	r4, #1
  SPIx_WriteRead(WriteAddr);
  
  /* Send the data that will be written into the device (MSB First) */
  while(NumByteToWrite >= 0x01)
  {
    SPIx_WriteRead(*pBuffer);
 8004bf4:	f7ff febe 	bl	8004974 <SPIx_WriteRead>
    NumByteToWrite--;
 8004bf8:	b2a4      	uxth	r4, r4
 8004bfa:	e7f7      	b.n	8004bec <GYRO_IO_Write+0x20>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004bfc:	4803      	ldr	r0, [pc, #12]	; (8004c0c <GYRO_IO_Write+0x40>)
 8004bfe:	2108      	movs	r1, #8
 8004c00:	2201      	movs	r2, #1
}
 8004c02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToWrite--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004c06:	f7fd bc49 	b.w	800249c <HAL_GPIO_WritePin>
 8004c0a:	bf00      	nop
 8004c0c:	48001000 	.word	0x48001000

08004c10 <GYRO_IO_Read>:
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
  if(NumByteToRead > 0x01)
 8004c10:	2a01      	cmp	r2, #1
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004c12:	b570      	push	{r4, r5, r6, lr}
  if(NumByteToRead > 0x01)
  {
    ReadAddr |= (uint8_t)(READWRITE_CMD | MULTIPLEBYTE_CMD);
 8004c14:	bf8c      	ite	hi
 8004c16:	f041 06c0 	orrhi.w	r6, r1, #192	; 0xc0
  }
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
 8004c1a:	f041 0680 	orrls.w	r6, r1, #128	; 0x80
  * @param  ReadAddr : GYROSCOPE's internal address to read from.
  * @param  NumByteToRead : number of bytes to read from the GYROSCOPE.
  * @retval None
  */
void GYRO_IO_Read(uint8_t* pBuffer, uint8_t ReadAddr, uint16_t NumByteToRead)
{  
 8004c1e:	4605      	mov	r5, r0
 8004c20:	4614      	mov	r4, r2
  else
  {
    ReadAddr |= (uint8_t)READWRITE_CMD;
  }
  /* Set chip select Low at the start of the transmission */
  GYRO_CS_LOW();
 8004c22:	480c      	ldr	r0, [pc, #48]	; (8004c54 <GYRO_IO_Read+0x44>)
 8004c24:	2108      	movs	r1, #8
 8004c26:	2200      	movs	r2, #0
 8004c28:	f7fd fc38 	bl	800249c <HAL_GPIO_WritePin>
  
  /* Send the Address of the indexed register */
  SPIx_WriteRead(ReadAddr);
 8004c2c:	4630      	mov	r0, r6
 8004c2e:	f7ff fea1 	bl	8004974 <SPIx_WriteRead>
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
 8004c32:	b13c      	cbz	r4, 8004c44 <GYRO_IO_Read+0x34>
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8004c34:	2000      	movs	r0, #0
 8004c36:	f7ff fe9d 	bl	8004974 <SPIx_WriteRead>
    NumByteToRead--;
 8004c3a:	3c01      	subs	r4, #1
  
  /* Receive the data that will be read from the device (MSB First) */
  while(NumByteToRead > 0x00)
  {
    /* Send dummy byte (0x00) to generate the SPI clock to GYROSCOPE (Slave device) */
    *pBuffer = SPIx_WriteRead(DUMMY_BYTE);
 8004c3c:	f805 0b01 	strb.w	r0, [r5], #1
    NumByteToRead--;
 8004c40:	b2a4      	uxth	r4, r4
 8004c42:	e7f6      	b.n	8004c32 <GYRO_IO_Read+0x22>
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004c44:	4803      	ldr	r0, [pc, #12]	; (8004c54 <GYRO_IO_Read+0x44>)
 8004c46:	2108      	movs	r1, #8
 8004c48:	2201      	movs	r2, #1
}  
 8004c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    NumByteToRead--;
    pBuffer++;
  }
  
  /* Set chip select High at the end of the transmission */ 
  GYRO_CS_HIGH();
 8004c4e:	f7fd bc25 	b.w	800249c <HAL_GPIO_WritePin>
 8004c52:	bf00      	nop
 8004c54:	48001000 	.word	0x48001000

08004c58 <COMPASSACCELERO_IO_Init>:
void COMPASSACCELERO_IO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8004c58:	4b16      	ldr	r3, [pc, #88]	; (8004cb4 <COMPASSACCELERO_IO_Init+0x5c>)
 8004c5a:	695a      	ldr	r2, [r3, #20]
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8004c5c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
 8004c5e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004c62:	615a      	str	r2, [r3, #20]
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8004c64:	695a      	ldr	r2, [r3, #20]
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8004c66:	4d14      	ldr	r5, [pc, #80]	; (8004cb8 <COMPASSACCELERO_IO_Init+0x60>)
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8004c68:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
  * @brief  Configures COMPASS / ACCELEROMETER I2C interface.
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_Init(void)
{
 8004c6c:	b086      	sub	sp, #24
  
  /* Enable DRDY clock */
  ACCELERO_DRDY_GPIO_CLK_ENABLE();
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8004c6e:	615a      	str	r2, [r3, #20]
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8004c70:	2304      	movs	r3, #4
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004c72:	2400      	movs	r4, #0
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8004c74:	eb0d 0103 	add.w	r1, sp, r3
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004c78:	2603      	movs	r6, #3
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8004c7a:	4628      	mov	r0, r5
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Mems DRDY pin configuration */
  GPIO_InitStructure.Pin = ACCELERO_DRDY_PIN;
 8004c7c:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004c7e:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004c80:	9403      	str	r4, [sp, #12]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004c82:	9604      	str	r6, [sp, #16]
  HAL_GPIO_Init(ACCELERO_DRDY_GPIO_PORT, &GPIO_InitStructure);
 8004c84:	f7fd fb4c 	bl	8002320 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
 8004c88:	4622      	mov	r2, r4
 8004c8a:	4621      	mov	r1, r4
 8004c8c:	2008      	movs	r0, #8
 8004c8e:	f7fd faf3 	bl	8002278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
 8004c92:	2008      	movs	r0, #8
 8004c94:	f7fd fb22 	bl	80022dc <HAL_NVIC_EnableIRQ>
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8004c98:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	a901      	add	r1, sp, #4
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_DRDY_EXTI_IRQn, 0x00, 0x00);
  HAL_NVIC_EnableIRQ(ACCELERO_DRDY_EXTI_IRQn);
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8004c9e:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_INPUT;
 8004ca0:	9402      	str	r4, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004ca2:	9604      	str	r6, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004ca4:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004ca6:	f7fd fb3b 	bl	8002320 <HAL_GPIO_Init>
  
  I2Cx_Init();
 8004caa:	f7ff fe83 	bl	80049b4 <I2Cx_Init>
}
 8004cae:	b006      	add	sp, #24
 8004cb0:	bd70      	pop	{r4, r5, r6, pc}
 8004cb2:	bf00      	nop
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	48001000 	.word	0x48001000

08004cbc <COMPASSACCELERO_IO_ITConfig>:
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8004cbc:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8004cbe:	4b0e      	ldr	r3, [pc, #56]	; (8004cf8 <COMPASSACCELERO_IO_ITConfig+0x3c>)
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004cc0:	480e      	ldr	r0, [pc, #56]	; (8004cfc <COMPASSACCELERO_IO_ITConfig+0x40>)
void COMPASSACCELERO_IO_ITConfig(void)
{
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8004cc2:	695a      	ldr	r2, [r3, #20]
  * @brief  Configures COMPASS / ACCELERO click IT
  * @param  None
  * @retval None
  */
void COMPASSACCELERO_IO_ITConfig(void)
{
 8004cc4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStructure;
  
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
 8004cc6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8004cca:	615a      	str	r2, [r3, #20]
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
 8004ccc:	2330      	movs	r3, #48	; 0x30
 8004cce:	9301      	str	r3, [sp, #4]
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <COMPASSACCELERO_IO_ITConfig+0x44>)
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004cd2:	2400      	movs	r4, #0
  /* Enable INT1 & INT2 GPIO clock */
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
 8004cd4:	9302      	str	r3, [sp, #8]
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004cd6:	a901      	add	r1, sp, #4
  ACCELERO_INT_GPIO_CLK_ENABLE();
  
  /* Configure GPIO PINs to detect Interrupts */
  GPIO_InitStructure.Pin = ACCELERO_INT1_PIN | ACCELERO_INT2_PIN;
  GPIO_InitStructure.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 8004cdc:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(ACCELERO_INT_GPIO_PORT, &GPIO_InitStructure);
 8004cde:	f7fd fb1f 	bl	8002320 <HAL_GPIO_Init>
  
  /* Enable and set Button EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority(ACCELERO_INT1_EXTI_IRQn, 0x00, 0x00);
 8004ce2:	4621      	mov	r1, r4
 8004ce4:	4622      	mov	r2, r4
 8004ce6:	200a      	movs	r0, #10
 8004ce8:	f7fd fac6 	bl	8002278 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ACCELERO_INT1_EXTI_IRQn);
 8004cec:	200a      	movs	r0, #10
 8004cee:	f7fd faf5 	bl	80022dc <HAL_NVIC_EnableIRQ>
  
}
 8004cf2:	b006      	add	sp, #24
 8004cf4:	bd10      	pop	{r4, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	48001000 	.word	0x48001000
 8004d00:	10110000 	.word	0x10110000

08004d04 <COMPASSACCELERO_IO_Write>:
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8004d04:	b570      	push	{r4, r5, r6, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	ab06      	add	r3, sp, #24
 8004d0a:	4606      	mov	r6, r0
 8004d0c:	f803 2d01 	strb.w	r2, [r3, #-1]!
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8004d10:	4a09      	ldr	r2, [pc, #36]	; (8004d38 <COMPASSACCELERO_IO_Write+0x34>)
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	2301      	movs	r3, #1
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	6814      	ldr	r4, [r2, #0]
 8004d1a:	4808      	ldr	r0, [pc, #32]	; (8004d3c <COMPASSACCELERO_IO_Write+0x38>)
 8004d1c:	9402      	str	r4, [sp, #8]
  * @param  RegisterAddr specifies the COMPASS / ACCELEROMETER register to be written.
  * @param  Value : Data to be written
  * @retval   None
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
 8004d1e:	460d      	mov	r5, r1
  */
static void I2Cx_WriteData(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout);
 8004d20:	462a      	mov	r2, r5
 8004d22:	4631      	mov	r1, r6
 8004d24:	f7fe fc8e 	bl	8003644 <HAL_I2C_Mem_Write>
  
  /* Check the communication status */
  if(status != HAL_OK)
 8004d28:	b120      	cbz	r0, 8004d34 <COMPASSACCELERO_IO_Write+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8004d2a:	4804      	ldr	r0, [pc, #16]	; (8004d3c <COMPASSACCELERO_IO_Write+0x38>)
 8004d2c:	f7fe fc73 	bl	8003616 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8004d30:	f7ff fe40 	bl	80049b4 <I2Cx_Init>
 */
void COMPASSACCELERO_IO_Write(uint16_t DeviceAddr, uint8_t RegisterAddr, uint8_t Value)
{
  /* call I2Cx Read data bus function */
  I2Cx_WriteData(DeviceAddr, RegisterAddr, Value);
}
 8004d34:	b006      	add	sp, #24
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	20000180 	.word	0x20000180
 8004d3c:	20000e28 	.word	0x20000e28

08004d40 <COMPASSACCELERO_IO_Read>:
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8004d40:	b530      	push	{r4, r5, lr}
 8004d42:	b087      	sub	sp, #28
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 8004d44:	ab06      	add	r3, sp, #24
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8004d46:	460a      	mov	r2, r1
  * @retval Data read at register @
  */
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
 8004d48:	2100      	movs	r1, #0
 8004d4a:	f803 1d01 	strb.w	r1, [r3, #-1]!
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8004d4e:	490a      	ldr	r1, [pc, #40]	; (8004d78 <COMPASSACCELERO_IO_Read+0x38>)
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	2301      	movs	r3, #1
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	680c      	ldr	r4, [r1, #0]
  * @param  DeviceAddr : specifies the slave address to be programmed(ACC_I2C_ADDRESS or MAG_I2C_ADDRESS).
  * @param  RegisterAddr : specifies the COMPASS / ACCELEROMETER internal address register to read from
  * @retval ACCELEROMETER register value
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
 8004d58:	4605      	mov	r5, r0
static uint8_t I2Cx_ReadData(uint16_t Addr, uint8_t Reg)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint8_t value = 0;
  
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8004d5a:	9402      	str	r4, [sp, #8]
 8004d5c:	4807      	ldr	r0, [pc, #28]	; (8004d7c <COMPASSACCELERO_IO_Read+0x3c>)
 8004d5e:	4629      	mov	r1, r5
 8004d60:	f7fe fcee 	bl	8003740 <HAL_I2C_Mem_Read>
 
  /* Check the communication status */
  if(status != HAL_OK)
 8004d64:	b120      	cbz	r0, 8004d70 <COMPASSACCELERO_IO_Read+0x30>
  * @retval None
  */
static void I2Cx_Error (void)
{
  /* De-initialize the I2C comunication BUS */
  HAL_I2C_DeInit(&I2cHandle);
 8004d66:	4805      	ldr	r0, [pc, #20]	; (8004d7c <COMPASSACCELERO_IO_Read+0x3c>)
 8004d68:	f7fe fc55 	bl	8003616 <HAL_I2C_DeInit>
  
  /* Re- Initiaize the I2C comunication BUS */
  I2Cx_Init();
 8004d6c:	f7ff fe22 	bl	80049b4 <I2Cx_Init>
  */ 
uint8_t COMPASSACCELERO_IO_Read(uint16_t DeviceAddr, uint8_t RegisterAddr)
{
  /* call I2Cx Read data bus function */   
  return I2Cx_ReadData(DeviceAddr, RegisterAddr);
}
 8004d70:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8004d74:	b007      	add	sp, #28
 8004d76:	bd30      	pop	{r4, r5, pc}
 8004d78:	20000180 	.word	0x20000180
 8004d7c:	20000e28 	.word	0x20000e28

08004d80 <BSP_ACCELERO_Init>:
  * @brief  Set ACCELEROMETER Initialization.
  * @param  None
  * @retval ACCELERO_OK if no problem during initialization
  */
uint8_t BSP_ACCELERO_Init(void)
{  
 8004d80:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = ACCELERO_ERROR;
  uint16_t ctrl = 0x0000;
  ACCELERO_InitTypeDef LSM303DLHC_InitStructure;
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
 8004d82:	4c09      	ldr	r4, [pc, #36]	; (8004da8 <BSP_ACCELERO_Init+0x28>)
 8004d84:	6863      	ldr	r3, [r4, #4]
 8004d86:	4798      	blx	r3
 8004d88:	2833      	cmp	r0, #51	; 0x33
 8004d8a:	d10b      	bne.n	8004da4 <BSP_ACCELERO_Init+0x24>
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8004d8c:	4d07      	ldr	r5, [pc, #28]	; (8004dac <BSP_ACCELERO_Init+0x2c>)
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004d8e:	6823      	ldr	r3, [r4, #0]
  ACCELERO_FilterConfigTypeDef LSM303DLHC_FilterStructure;
 
  if(Lsm303dlhcDrv.ReadID() == I_AM_LMS303DLHC)
  {
    /* Initialize the gyroscope driver structure */
    AccelerometerDrv = &Lsm303dlhcDrv;
 8004d90:	602c      	str	r4, [r5, #0]
    
    ctrl |= ((LSM303DLHC_InitStructure.BlockData_Update | LSM303DLHC_InitStructure.Endianness | \
                      LSM303DLHC_InitStructure.AccFull_Scale | LSM303DLHC_InitStructure.High_Resolution) << 8);
    
  /* Configure the accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8004d92:	f640 0047 	movw	r0, #2119	; 0x847
 8004d96:	4798      	blx	r3
                      LSM303DLHC_FilterStructure.HighPassFilter_CutOff_Frequency|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI1|\
                      LSM303DLHC_FilterStructure.HighPassFilter_AOI2);

  /* Configure the accelerometer LPF main parameters */
    AccelerometerDrv->FilterConfig(ctrl);
 8004d98:	682b      	ldr	r3, [r5, #0]
 8004d9a:	2090      	movs	r0, #144	; 0x90
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	4798      	blx	r3

    ret = ACCELERO_OK;
 8004da0:	2000      	movs	r0, #0
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
  }  
  else
  {
    ret = ACCELERO_ERROR;
 8004da4:	2001      	movs	r0, #1
  }

  return ret;
}
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	200001a4 	.word	0x200001a4
 8004dac:	20000e60 	.word	0x20000e60

08004db0 <BSP_ACCELERO_GetXYZ>:
  * @param pDataXYZ Pointeur on 3 angular accelerations 
  *                 pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
* @retval None
*/
void BSP_ACCELERO_GetXYZ(int16_t *pDataXYZ)
{
 8004db0:	b508      	push	{r3, lr}
  if(AccelerometerDrv->GetXYZ!= NULL)
 8004db2:	4b03      	ldr	r3, [pc, #12]	; (8004dc0 <BSP_ACCELERO_GetXYZ+0x10>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	b103      	cbz	r3, 8004dbc <BSP_ACCELERO_GetXYZ+0xc>
  {   
    AccelerometerDrv->GetXYZ(pDataXYZ);
 8004dba:	4798      	blx	r3
 8004dbc:	bd08      	pop	{r3, pc}
 8004dbe:	bf00      	nop
 8004dc0:	20000e60 	.word	0x20000e60

08004dc4 <BSP_GYRO_Init>:
  * @brief  Set GYROSCOPE Initialization.
  * @param  None
  * @retval GYRO_OK if no problem during initialization
  */
uint8_t BSP_GYRO_Init(void)
{  
 8004dc4:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8004dc6:	4c0e      	ldr	r4, [pc, #56]	; (8004e00 <BSP_GYRO_Init+0x3c>)
 8004dc8:	6863      	ldr	r3, [r4, #4]
 8004dca:	4798      	blx	r3
 8004dcc:	28d4      	cmp	r0, #212	; 0xd4
 8004dce:	4625      	mov	r5, r4
 8004dd0:	d10f      	bne.n	8004df2 <BSP_GYRO_Init+0x2e>
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8004dd2:	4c0c      	ldr	r4, [pc, #48]	; (8004e04 <BSP_GYRO_Init+0x40>)
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 8004dd4:	682b      	ldr	r3, [r5, #0]
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &L3gd20Drv;
 8004dd6:	6025      	str	r5, [r4, #0]
	
    ctrl |= (uint16_t) ((L3GD20_InitStructure.BlockData_Update | L3GD20_InitStructure.Endianness | \
                        L3GD20_InitStructure.Full_Scale) << 8);

    /* L3gd20 Init */	 
    GyroscopeDrv->Init(ctrl);
 8004dd8:	f241 003f 	movw	r0, #4159	; 0x103f
 8004ddc:	4798      	blx	r3
    L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency = L3GD20_HPFCF_0;
	
    ctrl = (uint8_t) ((L3GD20_FilterStructure.HighPassFilter_Mode_Selection |\
                       L3GD20_FilterStructure.HighPassFilter_CutOff_Frequency));		
	
    GyroscopeDrv->FilterConfig(ctrl) ;
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	2000      	movs	r0, #0
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	4798      	blx	r3
  
    GyroscopeDrv->FilterCmd(L3GD20_HIGHPASSFILTER_ENABLE);
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	2010      	movs	r0, #16
 8004dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dec:	4798      	blx	r3
	
    ret = GYRO_OK;
 8004dee:	2000      	movs	r0, #0
 8004df0:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = GYRO_ERROR;
  uint16_t ctrl = 0x0000;
  GYRO_InitTypeDef L3GD20_InitStructure;
  GYRO_FilterConfigTypeDef L3GD20_FilterStructure;

  if((L3gd20Drv.ReadID() == I_AM_L3GD20) || (L3gd20Drv.ReadID() == I_AM_L3GD20_TR))
 8004df2:	6863      	ldr	r3, [r4, #4]
 8004df4:	4798      	blx	r3
 8004df6:	28d5      	cmp	r0, #213	; 0xd5
 8004df8:	d0eb      	beq.n	8004dd2 <BSP_GYRO_Init+0xe>
	
    ret = GYRO_OK;
  }
  else
  {
    ret = GYRO_ERROR;
 8004dfa:	2001      	movs	r0, #1
  }
  
  return ret;
}
 8004dfc:	bd38      	pop	{r3, r4, r5, pc}
 8004dfe:	bf00      	nop
 8004e00:	200001d0 	.word	0x200001d0
 8004e04:	20000e64 	.word	0x20000e64

08004e08 <BSP_GYRO_GetXYZ>:
  * @brief  Get XYZ angular acceleration
  * @param pfData: pointer on floating array         
  * @retval None
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8004e08:	b508      	push	{r3, lr}
  if(GyroscopeDrv->GetXYZ!= NULL)
 8004e0a:	4b03      	ldr	r3, [pc, #12]	; (8004e18 <BSP_GYRO_GetXYZ+0x10>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	b103      	cbz	r3, 8004e14 <BSP_GYRO_GetXYZ+0xc>
  {
	GyroscopeDrv->GetXYZ(pfData);
 8004e12:	4798      	blx	r3
 8004e14:	bd08      	pop	{r3, pc}
 8004e16:	bf00      	nop
 8004e18:	20000e64 	.word	0x20000e64

08004e1c <LSM303DLHC_AccInit>:
  * @brief    Set LSM303DLHC Initialization.
  * @param  InitStruct: init parameters
  * @retval   None
  */
void LSM303DLHC_AccInit(uint16_t InitStruct)
{  
 8004e1c:	b510      	push	{r4, lr}
 8004e1e:	4604      	mov	r4, r0
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8004e20:	f7ff ff1a 	bl	8004c58 <COMPASSACCELERO_IO_Init>
  
  /* Write value to ACC MEMS CTRL_REG1 register */
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
 8004e24:	b2e2      	uxtb	r2, r4
 8004e26:	2032      	movs	r0, #50	; 0x32
 8004e28:	2120      	movs	r1, #32
 8004e2a:	f7ff ff6b 	bl	8004d04 <COMPASSACCELERO_IO_Write>
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8004e2e:	2032      	movs	r0, #50	; 0x32
 8004e30:	2123      	movs	r1, #35	; 0x23
 8004e32:	2200      	movs	r2, #0
}
 8004e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ctrl = (uint8_t) InitStruct;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG1_A, ctrl);
  
  /* Write value to ACC MEMS CTRL_REG4 register */
  ctrl = (uint8_t) (InitStruct << 8);
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A, ctrl);
 8004e38:	f7ff bf64 	b.w	8004d04 <COMPASSACCELERO_IO_Write>

08004e3c <LSM303DLHC_AccReadID>:
/**
  * @brief     Read LSM303DLHC ID.
  * @retval   ID 
  */
uint8_t LSM303DLHC_AccReadID(void)
{  
 8004e3c:	b508      	push	{r3, lr}
  uint8_t ctrl = 0x00;
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
 8004e3e:	f7ff ff0b 	bl	8004c58 <COMPASSACCELERO_IO_Init>
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8004e42:	2032      	movs	r0, #50	; 0x32
 8004e44:	210f      	movs	r1, #15

  return ctrl;
}
 8004e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /*  Low level init */
  COMPASSACCELERO_IO_Init();
  
  /* Read value at Who am I register address*/
  ctrl = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_WHO_AM_I_ADDR);
 8004e4a:	f7ff bf79 	b.w	8004d40 <COMPASSACCELERO_IO_Read>

08004e4e <LSM303DLHC_AccRebootCmd>:
/**
  * @brief     Reboot memory content of LSM303DLHC
  * @retval   None
  */
void LSM303DLHC_AccRebootCmd(void)
{
 8004e4e:	b508      	push	{r3, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8004e50:	2124      	movs	r1, #36	; 0x24
 8004e52:	2032      	movs	r0, #50	; 0x32
 8004e54:	f7ff ff74 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
 8004e58:	f060 027f 	orn	r2, r0, #127	; 0x7f
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8004e5c:	2124      	movs	r1, #36	; 0x24
 8004e5e:	2032      	movs	r0, #50	; 0x32
 8004e60:	b2d2      	uxtb	r2, r2
}
 8004e62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable or Disable the reboot memory */
  tmpreg |= LSM303DLHC_BOOT_REBOOTMEMORY;
  
  /* Write value to ACC MEMS CTRL_REG5 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A, tmpreg);
 8004e66:	f7ff bf4d 	b.w	8004d04 <COMPASSACCELERO_IO_Write>

08004e6a <LSM303DLHC_AccFilterConfig>:
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8004e6a:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004e6c:	2121      	movs	r1, #33	; 0x21
  * @brief     Set High Pass Filter Modality
  * @param  FilterStruct: contains data for filter config
  * @retval   None
  */
void LSM303DLHC_AccFilterConfig(uint8_t FilterStruct) 
{
 8004e6e:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004e70:	2032      	movs	r0, #50	; 0x32
 8004e72:	f7ff ff65 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  
  tmpreg &= 0x0C;
 8004e76:	f000 020c 	and.w	r2, r0, #12
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004e7a:	4322      	orrs	r2, r4
 8004e7c:	2032      	movs	r0, #50	; 0x32
 8004e7e:	2121      	movs	r1, #33	; 0x21
}
 8004e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  tmpreg &= 0x0C;
  tmpreg |= FilterStruct;
  
  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004e84:	f7ff bf3e 	b.w	8004d04 <COMPASSACCELERO_IO_Write>

08004e88 <LSM303DLHC_AccFilterCmd>:
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 8004e88:	b510      	push	{r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004e8a:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HighPassFilter_DISABLE 
  *         @arg: LSM303DLHC_HighPassFilter_ENABLE          
  * @retval None
  */
void LSM303DLHC_AccFilterCmd(uint8_t HighPassFilterState)
 {
 8004e8c:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004e8e:	2032      	movs	r0, #50	; 0x32
 8004e90:	f7ff ff56 	bl	8004d40 <COMPASSACCELERO_IO_Read>
                  
  tmpreg &= 0xF7;
 8004e94:	f000 02f7 	and.w	r2, r0, #247	; 0xf7

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004e98:	4322      	orrs	r2, r4
 8004e9a:	2032      	movs	r0, #50	; 0x32
 8004e9c:	2121      	movs	r1, #33	; 0x21
}
 8004e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= 0xF7;

  tmpreg |= HighPassFilterState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004ea2:	f7ff bf2f 	b.w	8004d04 <COMPASSACCELERO_IO_Write>

08004ea6 <LSM303DLHC_AccReadXYZ>:
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8004ea6:	b5f0      	push	{r4, r5, r6, r7, lr}
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8004ea8:	2123      	movs	r1, #35	; 0x23
  * @brief  Read X, Y & Z Accelration values 
* @param  pfData : Data out pointer
  * @retval None
  */
void LSM303DLHC_AccReadXYZ(int16_t* pData)
{
 8004eaa:	b085      	sub	sp, #20
 8004eac:	4604      	mov	r4, r0
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8004eae:	2032      	movs	r0, #50	; 0x32
 8004eb0:	f7ff ff46 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8004eb4:	2124      	movs	r1, #36	; 0x24
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
 8004eb6:	4605      	mov	r5, r0
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);
 8004eb8:	2032      	movs	r0, #50	; 0x32
 8004eba:	f7ff ff41 	bl	8004d40 <COMPASSACCELERO_IO_Read>

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8004ebe:	2128      	movs	r1, #40	; 0x28
 8004ec0:	2032      	movs	r0, #50	; 0x32
 8004ec2:	f7ff ff3d 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8004ec6:	2129      	movs	r1, #41	; 0x29
  /* Read the acceleration control register content */
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
 8004ec8:	f88d 0008 	strb.w	r0, [sp, #8]
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8004ecc:	2032      	movs	r0, #50	; 0x32
 8004ece:	f7ff ff37 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004ed2:	212a      	movs	r1, #42	; 0x2a
  ctrlx[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG4_A);
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
 8004ed4:	f88d 0009 	strb.w	r0, [sp, #9]
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004ed8:	2032      	movs	r0, #50	; 0x32
 8004eda:	f7ff ff31 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004ede:	212b      	movs	r1, #43	; 0x2b
  ctrlx[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG5_A);

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
 8004ee0:	f88d 000a 	strb.w	r0, [sp, #10]
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004ee4:	2032      	movs	r0, #50	; 0x32
 8004ee6:	f7ff ff2b 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004eea:	212c      	movs	r1, #44	; 0x2c

  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
 8004eec:	f88d 000b 	strb.w	r0, [sp, #11]
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004ef0:	2032      	movs	r0, #50	; 0x32
 8004ef2:	f7ff ff25 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8004ef6:	212d      	movs	r1, #45	; 0x2d
  /* Read output register X, Y & Z acceleration */
  buffer[0] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_L_A); 
  buffer[1] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_X_H_A);
  buffer[2] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_L_A);
  buffer[3] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Y_H_A);
  buffer[4] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_L_A);
 8004ef8:	f88d 000c 	strb.w	r0, [sp, #12]
  buffer[5] = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_OUT_Z_H_A);
 8004efc:	2032      	movs	r0, #50	; 0x32
 8004efe:	f7ff ff1f 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  
  /* check in the control register4 the data alignment*/
  if(!(ctrlx[0] & LSM303DLHC_BLE_MSB)) 
 8004f02:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f06:	f99d 1009 	ldrsb.w	r1, [sp, #9]
 8004f0a:	f99d 6008 	ldrsb.w	r6, [sp, #8]
 8004f0e:	f99d 300b 	ldrsb.w	r3, [sp, #11]
 8004f12:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8004f16:	f99d 700c 	ldrsb.w	r7, [sp, #12]
 8004f1a:	b240      	sxtb	r0, r0
 8004f1c:	d119      	bne.n	8004f52 <LSM303DLHC_AccReadXYZ+0xac>
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i+1] << 8) + buffer[2*i]);
 8004f1e:	b289      	uxth	r1, r1
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	b280      	uxth	r0, r0
 8004f24:	eb06 2601 	add.w	r6, r6, r1, lsl #8
 8004f28:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 8004f2c:	eb07 2700 	add.w	r7, r7, r0, lsl #8
 8004f30:	f8ad 6000 	strh.w	r6, [sp]
 8004f34:	f8ad 2002 	strh.w	r2, [sp, #2]
 8004f38:	f8ad 7004 	strh.w	r7, [sp, #4]
    }
  }

  /* normal mode */
  /* switch the sensitivity value set in the CRTL4*/
  switch(ctrlx[0] & LSM303DLHC_FULLSCALE_16G)
 8004f3c:	f005 0330 	and.w	r3, r5, #48	; 0x30
 8004f40:	2b20      	cmp	r3, #32
 8004f42:	d016      	beq.n	8004f72 <LSM303DLHC_AccReadXYZ+0xcc>
 8004f44:	2b30      	cmp	r3, #48	; 0x30
 8004f46:	d016      	beq.n	8004f76 <LSM303DLHC_AccReadXYZ+0xd0>
{
  int16_t pnRawData[3];
  uint8_t ctrlx[2]={0,0};
  int8_t buffer[6];
  uint8_t i = 0;
  uint8_t sensitivity = LSM303DLHC_ACC_SENSITIVITY_2G;
 8004f48:	2b10      	cmp	r3, #16
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2302      	moveq	r3, #2
 8004f4e:	2301      	movne	r3, #1
 8004f50:	e012      	b.n	8004f78 <LSM303DLHC_AccReadXYZ+0xd2>
  }
  else /* Big Endian Mode */
  {
    for(i=0; i<3; i++)
    {
      pnRawData[i]=((int16_t)((uint16_t)buffer[2*i] << 8) + buffer[2*i+1]);
 8004f52:	b2b6      	uxth	r6, r6
 8004f54:	b292      	uxth	r2, r2
 8004f56:	b2bf      	uxth	r7, r7
 8004f58:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 8004f5c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8004f60:	eb00 2007 	add.w	r0, r0, r7, lsl #8
 8004f64:	f8ad 1000 	strh.w	r1, [sp]
 8004f68:	f8ad 3002 	strh.w	r3, [sp, #2]
 8004f6c:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004f70:	e7e4      	b.n	8004f3c <LSM303DLHC_AccReadXYZ+0x96>
    break;
  case LSM303DLHC_FULLSCALE_4G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_4G;
    break;
  case LSM303DLHC_FULLSCALE_8G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_8G;
 8004f72:	2304      	movs	r3, #4
    break;
 8004f74:	e000      	b.n	8004f78 <LSM303DLHC_AccReadXYZ+0xd2>
  case LSM303DLHC_FULLSCALE_16G:
    sensitivity = LSM303DLHC_ACC_SENSITIVITY_16G;
 8004f76:	230c      	movs	r3, #12
  }

  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
  {
    pData[i]=(pnRawData[i] * sensitivity);
 8004f78:	f8bd 2000 	ldrh.w	r2, [sp]
 8004f7c:	435a      	muls	r2, r3
 8004f7e:	8022      	strh	r2, [r4, #0]
 8004f80:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004f84:	435a      	muls	r2, r3
 8004f86:	8062      	strh	r2, [r4, #2]
 8004f88:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004f8c:	4353      	muls	r3, r2
 8004f8e:	80a3      	strh	r3, [r4, #4]
  }

}
 8004f90:	b005      	add	sp, #20
 8004f92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f94 <LSM303DLHC_AccFilterClickCmd>:
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8004f94:	b510      	push	{r4, lr}
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004f96:	2121      	movs	r1, #33	; 0x21
  *         @arg: LSM303DLHC_HPF_CLICK_DISABLE 
  *         @arg: LSM303DLHC_HPF_CLICK_ENABLE
  * @retval None
  */
void LSM303DLHC_AccFilterClickCmd(uint8_t HighPassFilterClickState)
 {
 8004f98:	4604      	mov	r4, r0
  uint8_t tmpreg = 0x00;
  
  /* Read CTRL_REG2 register */
  tmpreg = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A);
 8004f9a:	2032      	movs	r0, #50	; 0x32
 8004f9c:	f7ff fed0 	bl	8004d40 <COMPASSACCELERO_IO_Read>

  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);
 8004fa0:	f000 02fb 	and.w	r2, r0, #251	; 0xfb

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004fa4:	4322      	orrs	r2, r4
 8004fa6:	2032      	movs	r0, #50	; 0x32
 8004fa8:	2121      	movs	r1, #33	; 0x21
}
 8004faa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tmpreg &= ~(LSM303DLHC_HPF_CLICK_ENABLE);

  tmpreg |= HighPassFilterClickState;

  /* Write value to ACC MEMS CTRL_REG2 regsister */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG2_A, tmpreg);
 8004fae:	f7ff bea9 	b.w	8004d04 <COMPASSACCELERO_IO_Write>

08004fb2 <LSM303DLHC_AccIT1Enable>:
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8004fb2:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8004fb4:	2122      	movs	r1, #34	; 0x22
  *         @arg   LSM303DLHC_IT1_WTM
  *         @arg   LSM303DLHC_IT1_OVERRUN              
  * @retval None
  */
void LSM303DLHC_AccIT1Enable(uint8_t LSM303DLHC_IT)
{
 8004fb6:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CTRL_REG3 register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A);
 8004fb8:	2032      	movs	r0, #50	; 0x32
 8004fba:	f7ff fec1 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
 8004fbe:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8004fc2:	2122      	movs	r1, #34	; 0x22
 8004fc4:	2032      	movs	r0, #50	; 0x32
 8004fc6:	b2d2      	uxtb	r2, r2
}
 8004fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  
  /* Enable IT1 */
  tmpval |= LSM303DLHC_IT;
  
  /* Write value to MEMS CTRL_REG3 register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CTRL_REG3_A, tmpval);
 8004fcc:	f7ff be9a 	b.w	8004d04 <COMPASSACCELERO_IO_Write>

08004fd0 <LSM303DLHC_AccClickITEnable>:
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8004fd0:	b510      	push	{r4, lr}
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8004fd2:	2138      	movs	r1, #56	; 0x38
  * @param  ITCombination: Or or And combination
  *         ITAxes: axes to be enabled 
  * @retval None
  */
void LSM303DLHC_AccClickITEnable(uint8_t ITClick)
{  
 8004fd4:	4604      	mov	r4, r0
  uint8_t tmpval = 0x00;
  
  /* Read CLICK_CFR register */
  tmpval = COMPASSACCELERO_IO_Read(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A);
 8004fd6:	2032      	movs	r0, #50	; 0x32
 8004fd8:	f7ff feb2 	bl	8004d40 <COMPASSACCELERO_IO_Read>
  
  /* Enable the selected interrupt */
  tmpval |= ITClick;
 8004fdc:	ea40 0204 	orr.w	r2, r0, r4
  
  /* Write value to MEMS CLICK CFG register */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_CFG_A, tmpval);
 8004fe0:	2138      	movs	r1, #56	; 0x38
 8004fe2:	2032      	movs	r0, #50	; 0x32
 8004fe4:	b2d2      	uxtb	r2, r2
 8004fe6:	f7ff fe8d 	bl	8004d04 <COMPASSACCELERO_IO_Write>

  /* Configure Click Threshold on Z axis */
  tmpval = 0x0A;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_CLICK_THS_A, tmpval);
 8004fea:	2032      	movs	r0, #50	; 0x32
 8004fec:	213a      	movs	r1, #58	; 0x3a
 8004fee:	220a      	movs	r2, #10
 8004ff0:	f7ff fe88 	bl	8004d04 <COMPASSACCELERO_IO_Write>

  /* Configure Time Limit */
  tmpval = 0x05;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LIMIT_A, tmpval);
 8004ff4:	2032      	movs	r0, #50	; 0x32
 8004ff6:	213b      	movs	r1, #59	; 0x3b
 8004ff8:	2205      	movs	r2, #5
 8004ffa:	f7ff fe83 	bl	8004d04 <COMPASSACCELERO_IO_Write>

  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);
 8004ffe:	2032      	movs	r0, #50	; 0x32
 8005000:	213c      	movs	r1, #60	; 0x3c
 8005002:	2205      	movs	r2, #5
 8005004:	f7ff fe7e 	bl	8004d04 <COMPASSACCELERO_IO_Write>

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8005008:	2032      	movs	r0, #50	; 0x32
 800500a:	213d      	movs	r1, #61	; 0x3d
 800500c:	4602      	mov	r2, r0

}
 800500e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  /* Configure Latency */
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_LATENCY_A, tmpval);

  /* Configure Click Window */
  tmpval = 0x32;
  COMPASSACCELERO_IO_Write(ACC_I2C_ADDRESS, LSM303DLHC_TIME_WINDOW_A, tmpval);
 8005012:	f7ff be77 	b.w	8004d04 <COMPASSACCELERO_IO_Write>

08005016 <LSM303DLHC_AccZClickITConfig>:
  * @brief  click on Z axis interrupt config
  * @param  None
  * @retval None
  */
void LSM303DLHC_AccZClickITConfig(void)
{  
 8005016:	b508      	push	{r3, lr}
  /* configure low level IT config */
  COMPASSACCELERO_IO_ITConfig();
 8005018:	f7ff fe50 	bl	8004cbc <COMPASSACCELERO_IO_ITConfig>
  
  /* select click IT as INT1 interrupt */
  LSM303DLHC_AccIT1Enable(LSM303DLHC_IT1_CLICK);
 800501c:	2080      	movs	r0, #128	; 0x80
 800501e:	f7ff ffc8 	bl	8004fb2 <LSM303DLHC_AccIT1Enable>
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
 8005022:	2004      	movs	r0, #4
 8005024:	f7ff ffb6 	bl	8004f94 <LSM303DLHC_AccFilterClickCmd>
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 8005028:	2010      	movs	r0, #16
  
}
 800502a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  
  /* Enable High pass filter for click IT */
  LSM303DLHC_AccFilterClickCmd(LSM303DLHC_HPF_CLICK_ENABLE);
  
  /* Enable simple click IT on Z axis, */
  LSM303DLHC_AccClickITEnable(LSM303DLHC_Z_SINGLE_CLICK);
 800502e:	f7ff bfcf 	b.w	8004fd0 <LSM303DLHC_AccClickITEnable>

08005032 <L3GD20_Init>:
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8005032:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 8005034:	ac02      	add	r4, sp, #8
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
  uint8_t ctrl = 0x00;
 8005036:	2300      	movs	r3, #0
  * @param  L3GD20_InitStruct: pointer to a L3GD20_InitTypeDef structure 
  *         that contains the configuration setting for the L3GD20.
  * @retval None
  */
void L3GD20_Init(uint16_t InitStruct)
{  
 8005038:	4605      	mov	r5, r0
  uint8_t ctrl = 0x00;
 800503a:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 800503e:	f7ff fd91 	bl	8004b64 <GYRO_IO_Init>

  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
 8005042:	f804 5d01 	strb.w	r5, [r4, #-1]!
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
 8005046:	2120      	movs	r1, #32
 8005048:	4620      	mov	r0, r4
 800504a:	2201      	movs	r2, #1
 800504c:	f7ff fdbe 	bl	8004bcc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8005050:	0a2d      	lsrs	r5, r5, #8
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 8005052:	4620      	mov	r0, r4
 8005054:	2123      	movs	r1, #35	; 0x23
 8005056:	2201      	movs	r2, #1
  /* Write value to MEMS CTRL_REG1 regsister */
  ctrl = (uint8_t) InitStruct;
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG1_ADDR, 1);
  
  /* Write value to MEMS CTRL_REG4 regsister */  
  ctrl = (uint8_t) (InitStruct >> 8);
 8005058:	f88d 5007 	strb.w	r5, [sp, #7]
  GYRO_IO_Write(&ctrl, L3GD20_CTRL_REG4_ADDR, 1);
 800505c:	f7ff fdb6 	bl	8004bcc <GYRO_IO_Write>
}
 8005060:	b003      	add	sp, #12
 8005062:	bd30      	pop	{r4, r5, pc}

08005064 <L3GD20_ReadID>:
  * @brief  Read ID address of L3GD20
  * @param  Device ID address
  * @retval ID name
  */
uint8_t L3GD20_ReadID(void)
{
 8005064:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmp;

  /* Configure the low level interface ---------------------------------------*/
  GYRO_IO_Init();
 8005066:	f7ff fd7d 	bl	8004b64 <GYRO_IO_Init>
  
  /* Read WHO I AM register */
  GYRO_IO_Read(&tmp, L3GD20_WHO_AM_I_ADDR, 1);
 800506a:	f10d 0007 	add.w	r0, sp, #7
 800506e:	210f      	movs	r1, #15
 8005070:	2201      	movs	r2, #1
 8005072:	f7ff fdcd 	bl	8004c10 <GYRO_IO_Read>

  /* Return the ID */
  return (uint8_t)tmp;
}
 8005076:	f89d 0007 	ldrb.w	r0, [sp, #7]
 800507a:	b003      	add	sp, #12
 800507c:	f85d fb04 	ldr.w	pc, [sp], #4

08005080 <L3GD20_RebootCmd>:
  * @brief  Reboot memory content of L3GD20
  * @param  None
  * @retval None
  */
void L3GD20_RebootCmd(void)
{
 8005080:	b507      	push	{r0, r1, r2, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005082:	2124      	movs	r1, #36	; 0x24
 8005084:	f10d 0007 	add.w	r0, sp, #7
 8005088:	2201      	movs	r2, #1
 800508a:	f7ff fdc1 	bl	8004c10 <GYRO_IO_Read>
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800508e:	f89d 3007 	ldrb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 8005092:	f10d 0007 	add.w	r0, sp, #7
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 8005096:	f063 037f 	orn	r3, r3, #127	; 0x7f
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 800509a:	2124      	movs	r1, #36	; 0x24
 800509c:	2201      	movs	r2, #1
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  /* Enable or Disable the reboot memory */
  tmpreg |= L3GD20_BOOT_REBOOTMEMORY;
 800509e:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80050a2:	f7ff fd93 	bl	8004bcc <GYRO_IO_Write>
}
 80050a6:	b003      	add	sp, #12
 80050a8:	f85d fb04 	ldr.w	pc, [sp], #4

080050ac <L3GD20_INT1InterruptConfig>:
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80050ac:	b513      	push	{r0, r1, r4, lr}
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80050ae:	2300      	movs	r3, #0
  * @param  L3GD20_InterruptConfig_TypeDef: pointer to a L3GD20_InterruptConfig_TypeDef 
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
 80050b0:	4604      	mov	r4, r0
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80050b2:	2130      	movs	r1, #48	; 0x30
 80050b4:	f10d 0006 	add.w	r0, sp, #6
 80050b8:	2201      	movs	r2, #1
  *         structure that contains the configuration setting for the L3GD20 Interrupt.
  * @retval None
  */
void L3GD20_INT1InterruptConfig(uint16_t Int1Config)
{
  uint8_t ctrl_cfr = 0x00, ctrl3 = 0x00;
 80050ba:	f88d 3006 	strb.w	r3, [sp, #6]
 80050be:	f88d 3007 	strb.w	r3, [sp, #7]
  
  /* Read INT1_CFG register */
  GYRO_IO_Read(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80050c2:	f7ff fda5 	bl	8004c10 <GYRO_IO_Read>
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80050c6:	f10d 0007 	add.w	r0, sp, #7
 80050ca:	2122      	movs	r1, #34	; 0x22
 80050cc:	2201      	movs	r2, #1
 80050ce:	f7ff fd9f 	bl	8004c10 <GYRO_IO_Read>
  
  ctrl_cfr &= 0x80;
 80050d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80050d6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
 80050da:	f88d 3006 	strb.w	r3, [sp, #6]
  
  ctrl3 &= 0xDF;
 80050de:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80050e2:	f023 0320 	bic.w	r3, r3, #32
  ctrl3 |= ((uint8_t) Int1Config);
 80050e6:	431c      	orrs	r4, r3
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80050e8:	f10d 0006 	add.w	r0, sp, #6
 80050ec:	2130      	movs	r1, #48	; 0x30
 80050ee:	2201      	movs	r2, #1
  
  ctrl_cfr &= 0x80;
  ctrl_cfr |= ((uint8_t) Int1Config >> 8);
  
  ctrl3 &= 0xDF;
  ctrl3 |= ((uint8_t) Int1Config);
 80050f0:	f88d 4007 	strb.w	r4, [sp, #7]
                   L3GD20_IntConfigStruct->Interrupt_Axes);
                   
  ctrl3 |= (uint8_t)(L3GD20_IntConfigStruct->Interrupt_ActiveEdge);
*/  
  /* Write value to MEMS INT1_CFG register */
  GYRO_IO_Write(&ctrl_cfr, L3GD20_INT1_CFG_ADDR, 1);
 80050f4:	f7ff fd6a 	bl	8004bcc <GYRO_IO_Write>
  
  /* Write value to MEMS CTRL_REG3 register */
  GYRO_IO_Write(&ctrl3, L3GD20_CTRL_REG3_ADDR, 1);
 80050f8:	f10d 0007 	add.w	r0, sp, #7
 80050fc:	2122      	movs	r1, #34	; 0x22
 80050fe:	2201      	movs	r2, #1
 8005100:	f7ff fd64 	bl	8004bcc <GYRO_IO_Write>
}
 8005104:	b002      	add	sp, #8
 8005106:	bd10      	pop	{r4, pc}

08005108 <L3GD20_EnableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 8005108:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800510a:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_EnableIT(uint8_t IntSel)
{  
 800510c:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800510e:	2122      	movs	r1, #34	; 0x22
 8005110:	f10d 0007 	add.w	r0, sp, #7
 8005114:	f7ff fd7c 	bl	8004c10 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005118:	b924      	cbnz	r4, 8005124 <L3GD20_EnableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 800511a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT1INTERRUPT_ENABLE;
 800511e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005122:	e007      	b.n	8005134 <L3GD20_EnableIT+0x2c>
  }
  else if(IntSel == L3GD20_INT2)
 8005124:	2c01      	cmp	r4, #1
 8005126:	d107      	bne.n	8005138 <L3GD20_EnableIT+0x30>
  {
    tmpreg &= 0xF7;
 8005128:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800512c:	f023 0308 	bic.w	r3, r3, #8
    tmpreg |= L3GD20_INT2INTERRUPT_ENABLE;
 8005130:	f043 0308 	orr.w	r3, r3, #8
 8005134:	f88d 3007 	strb.w	r3, [sp, #7]
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005138:	f10d 0007 	add.w	r0, sp, #7
 800513c:	2122      	movs	r1, #34	; 0x22
 800513e:	2201      	movs	r2, #1
 8005140:	f7ff fd44 	bl	8004bcc <GYRO_IO_Write>
}
 8005144:	b002      	add	sp, #8
 8005146:	bd10      	pop	{r4, pc}

08005148 <L3GD20_DisableIT>:
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 8005148:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800514a:	2201      	movs	r2, #1
  *        @arg L3GD20_INT1
  *        @arg L3GD20_INT2   
  * @retval None
  */
void L3GD20_DisableIT(uint8_t IntSel)
{  
 800514c:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG3 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 800514e:	2122      	movs	r1, #34	; 0x22
 8005150:	f10d 0007 	add.w	r0, sp, #7
 8005154:	f7ff fd5c 	bl	8004c10 <GYRO_IO_Read>
  
  if(IntSel == L3GD20_INT1)
 8005158:	b924      	cbnz	r4, 8005164 <L3GD20_DisableIT+0x1c>
  {
    tmpreg &= 0x7F;	
 800515a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800515e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005162:	e005      	b.n	8005170 <L3GD20_DisableIT+0x28>
    tmpreg |= L3GD20_INT1INTERRUPT_DISABLE;
  }
  else if(IntSel == L3GD20_INT2)
 8005164:	2c01      	cmp	r4, #1
 8005166:	d105      	bne.n	8005174 <L3GD20_DisableIT+0x2c>
  {
    tmpreg &= 0xF7;
 8005168:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800516c:	f023 0308 	bic.w	r3, r3, #8
 8005170:	f88d 3007 	strb.w	r3, [sp, #7]
    tmpreg |= L3GD20_INT2INTERRUPT_DISABLE;
  }
  
  /* Write value to MEMS CTRL_REG3 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG3_ADDR, 1);
 8005174:	f10d 0007 	add.w	r0, sp, #7
 8005178:	2122      	movs	r1, #34	; 0x22
 800517a:	2201      	movs	r2, #1
 800517c:	f7ff fd26 	bl	8004bcc <GYRO_IO_Write>
}
 8005180:	b002      	add	sp, #8
 8005182:	bd10      	pop	{r4, pc}

08005184 <L3GD20_FilterConfig>:
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005184:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 8005186:	2201      	movs	r2, #1
  * @brief  Set High Pass Filter Modality
  * @param  FilterStruct: contains the configuration setting for the L3GD20.        
  * @retval None
  */
void L3GD20_FilterConfig(uint8_t FilterStruct) 
{
 8005188:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG2 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800518a:	2121      	movs	r1, #33	; 0x21
 800518c:	f10d 0007 	add.w	r0, sp, #7
 8005190:	f7ff fd3e 	bl	8004c10 <GYRO_IO_Read>
  
  tmpreg &= 0xC0;
 8005194:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005198:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 800519c:	431c      	orrs	r4, r3

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 800519e:	f10d 0007 	add.w	r0, sp, #7
 80051a2:	2121      	movs	r1, #33	; 0x21
 80051a4:	2201      	movs	r2, #1
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
  
  tmpreg &= 0xC0;
  
  /* Configure MEMS: mode and cutoff frquency */
  tmpreg |= FilterStruct;
 80051a6:	f88d 4007 	strb.w	r4, [sp, #7]

  /* Write value to MEMS CTRL_REG2 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG2_ADDR, 1);
 80051aa:	f7ff fd0f 	bl	8004bcc <GYRO_IO_Write>
}
 80051ae:	b002      	add	sp, #8
 80051b0:	bd10      	pop	{r4, pc}

080051b2 <L3GD20_FilterCmd>:
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80051b2:	b513      	push	{r0, r1, r4, lr}
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80051b4:	2201      	movs	r2, #1
  *         @arg: L3GD20_HIGHPASSFILTER_DISABLE 
  *         @arg: L3GD20_HIGHPASSFILTER_ENABLE          
  * @retval None
  */
void L3GD20_FilterCmd(uint8_t HighPassFilterState)
{
 80051b6:	4604      	mov	r4, r0
  uint8_t tmpreg;
  
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80051b8:	2124      	movs	r1, #36	; 0x24
 80051ba:	f10d 0007 	add.w	r0, sp, #7
 80051be:	f7ff fd27 	bl	8004c10 <GYRO_IO_Read>
  
  tmpreg &= 0xEF;
 80051c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051c6:	f023 0310 	bic.w	r3, r3, #16
  
  tmpreg |= HighPassFilterState;
 80051ca:	431c      	orrs	r4, r3
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80051cc:	f10d 0007 	add.w	r0, sp, #7
 80051d0:	2124      	movs	r1, #36	; 0x24
 80051d2:	2201      	movs	r2, #1
  /* Read CTRL_REG5 register */
  GYRO_IO_Read(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
  
  tmpreg &= 0xEF;
  
  tmpreg |= HighPassFilterState;
 80051d4:	f88d 4007 	strb.w	r4, [sp, #7]
  
  /* Write value to MEMS CTRL_REG5 regsister */
  GYRO_IO_Write(&tmpreg, L3GD20_CTRL_REG5_ADDR, 1);
 80051d8:	f7ff fcf8 	bl	8004bcc <GYRO_IO_Write>
}
 80051dc:	b002      	add	sp, #8
 80051de:	bd10      	pop	{r4, pc}

080051e0 <L3GD20_ReadXYZAngRate>:
* @brief  Calculate the L3GD20 angular data.
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
 80051e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e4:	b086      	sub	sp, #24
 80051e6:	4680      	mov	r8, r0
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 80051e8:	a806      	add	r0, sp, #24
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 80051ea:	2300      	movs	r3, #0
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
 80051ec:	f800 3d11 	strb.w	r3, [r0, #-17]!
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 80051f0:	2123      	movs	r1, #35	; 0x23
 80051f2:	2201      	movs	r2, #1
* @param  pfData : Data out pointer
* @retval None
*/
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
 80051f4:	9302      	str	r3, [sp, #8]
 80051f6:	f8ad 300c 	strh.w	r3, [sp, #12]
  int16_t RawData[3] = {0};
 80051fa:	9304      	str	r3, [sp, #16]
 80051fc:	f8ad 3014 	strh.w	r3, [sp, #20]
  uint8_t tmpreg = 0;
  float sensitivity = 0;
  int i =0;
  
  GYRO_IO_Read(&tmpreg,L3GD20_CTRL_REG4_ADDR,1);
 8005200:	f7ff fd06 	bl	8004c10 <GYRO_IO_Read>
  
  GYRO_IO_Read(tmpbuffer,L3GD20_OUT_X_L_ADDR,6);
 8005204:	2128      	movs	r1, #40	; 0x28
 8005206:	2206      	movs	r2, #6
 8005208:	a802      	add	r0, sp, #8
 800520a:	f7ff fd01 	bl	8004c10 <GYRO_IO_Read>
  
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
 800520e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005212:	f89d 6009 	ldrb.w	r6, [sp, #9]
 8005216:	f89d 7008 	ldrb.w	r7, [sp, #8]
 800521a:	f89d 400b 	ldrb.w	r4, [sp, #11]
 800521e:	f89d 500a 	ldrb.w	r5, [sp, #10]
 8005222:	f89d 200d 	ldrb.w	r2, [sp, #13]
 8005226:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800522a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800522e:	d11a      	bne.n	8005266 <L3GD20_ReadXYZAngRate+0x86>
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 8005230:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8005234:	eb05 2404 	add.w	r4, r5, r4, lsl #8
 8005238:	f8ad 6010 	strh.w	r6, [sp, #16]
 800523c:	f8ad 4012 	strh.w	r4, [sp, #18]
 8005240:	eb01 2202 	add.w	r2, r1, r2, lsl #8
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 8005244:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005248:	2b10      	cmp	r3, #16
  /* check in the control register 4 the data alignment (Big Endian or Little Endian)*/
  if(!(tmpreg & L3GD20_BLE_MSB))
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i+1] << 8) + tmpbuffer[2*i]);
 800524a:	f8ad 2014 	strh.w	r2, [sp, #20]
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
    }
  }
  
  /* Switch the sensitivity value set in the CRTL4 */
  switch(tmpreg & L3GD20_FULLSCALE_SELECTION)
 800524e:	d015      	beq.n	800527c <L3GD20_ReadXYZAngRate+0x9c>
 8005250:	2b20      	cmp	r3, #32
 8005252:	d016      	beq.n	8005282 <L3GD20_ReadXYZAngRate+0xa2>
void L3GD20_ReadXYZAngRate(float* pfData)
{
  uint8_t tmpbuffer[6] ={0};
  int16_t RawData[3] = {0};
  uint8_t tmpreg = 0;
  float sensitivity = 0;
 8005254:	eddf 7a15 	vldr	s15, [pc, #84]	; 80052ac <L3GD20_ReadXYZAngRate+0xcc>
 8005258:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80052b0 <L3GD20_ReadXYZAngRate+0xd0>
 800525c:	2b00      	cmp	r3, #0
 800525e:	bf08      	it	eq
 8005260:	eef0 7a47 	vmoveq.f32	s15, s14
 8005264:	e00f      	b.n	8005286 <L3GD20_ReadXYZAngRate+0xa6>
  }
  else
  {
    for(i=0; i<3; i++)
    {
      RawData[i]=(int16_t)(((uint16_t)tmpbuffer[2*i] << 8) + tmpbuffer[2*i+1]);
 8005266:	eb06 2607 	add.w	r6, r6, r7, lsl #8
 800526a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 800526e:	f8ad 6010 	strh.w	r6, [sp, #16]
 8005272:	f8ad 4012 	strh.w	r4, [sp, #18]
 8005276:	eb02 2201 	add.w	r2, r2, r1, lsl #8
 800527a:	e7e3      	b.n	8005244 <L3GD20_ReadXYZAngRate+0x64>
  case L3GD20_FULLSCALE_250:
    sensitivity=L3GD20_SENSITIVITY_250DPS;
    break;
    
  case L3GD20_FULLSCALE_500:
    sensitivity=L3GD20_SENSITIVITY_500DPS;
 800527c:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80052b4 <L3GD20_ReadXYZAngRate+0xd4>
    break;
 8005280:	e001      	b.n	8005286 <L3GD20_ReadXYZAngRate+0xa6>
    
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
 8005282:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80052b8 <L3GD20_ReadXYZAngRate+0xd8>
 8005286:	4640      	mov	r0, r8
 8005288:	2300      	movs	r3, #0
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800528a:	aa04      	add	r2, sp, #16
 800528c:	5e9a      	ldrsh	r2, [r3, r2]
 800528e:	ee07 2a10 	vmov	s14, r2
 8005292:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005296:	3302      	adds	r3, #2
 8005298:	ee27 7a27 	vmul.f32	s14, s14, s15
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 800529c:	2b06      	cmp	r3, #6
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
 800529e:	eca0 7a01 	vstmia	r0!, {s14}
  case L3GD20_FULLSCALE_2000:
    sensitivity=L3GD20_SENSITIVITY_2000DPS;
    break;
  }
  /* divide by sensitivity */
  for(i=0; i<3; i++)
 80052a2:	d1f2      	bne.n	800528a <L3GD20_ReadXYZAngRate+0xaa>
  {
    pfData[i]=(float)(RawData[i] * sensitivity);
  }
}
 80052a4:	b006      	add	sp, #24
 80052a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052aa:	bf00      	nop
 80052ac:	00000000 	.word	0x00000000
 80052b0:	410c0000 	.word	0x410c0000
 80052b4:	418c0000 	.word	0x418c0000
 80052b8:	428c0000 	.word	0x428c0000

080052bc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80052bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80052f4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80052c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80052c2:	e003      	b.n	80052cc <LoopCopyDataInit>

080052c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80052c4:	4b0c      	ldr	r3, [pc, #48]	; (80052f8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80052c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80052c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80052ca:	3104      	adds	r1, #4

080052cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80052cc:	480b      	ldr	r0, [pc, #44]	; (80052fc <LoopForever+0xa>)
	ldr	r3, =_edata
 80052ce:	4b0c      	ldr	r3, [pc, #48]	; (8005300 <LoopForever+0xe>)
	adds	r2, r0, r1
 80052d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80052d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80052d4:	d3f6      	bcc.n	80052c4 <CopyDataInit>
	ldr	r2, =_sbss
 80052d6:	4a0b      	ldr	r2, [pc, #44]	; (8005304 <LoopForever+0x12>)
	b	LoopFillZerobss
 80052d8:	e002      	b.n	80052e0 <LoopFillZerobss>

080052da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80052da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80052dc:	f842 3b04 	str.w	r3, [r2], #4

080052e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80052e0:	4b09      	ldr	r3, [pc, #36]	; (8005308 <LoopForever+0x16>)
	cmp	r2, r3
 80052e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80052e4:	d3f9      	bcc.n	80052da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80052e6:	f7fc fa4d 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80052ea:	f000 f837 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80052ee:	f7fb f8ef 	bl	80004d0 <main>

080052f2 <LoopForever>:

LoopForever:
    b LoopForever
 80052f2:	e7fe      	b.n	80052f2 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80052f4:	20007fff 	.word	0x20007fff
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80052f8:	08017a44 	.word	0x08017a44
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80052fc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005300:	20000a3c 	.word	0x20000a3c
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 8005304:	20000a3c 	.word	0x20000a3c
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 8005308:	200070f8 	.word	0x200070f8

0800530c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800530c:	e7fe      	b.n	800530c <ADC1_2_IRQHandler>
	...

08005310 <atexit>:
 8005310:	4601      	mov	r1, r0
 8005312:	2000      	movs	r0, #0
 8005314:	4602      	mov	r2, r0
 8005316:	4603      	mov	r3, r0
 8005318:	f000 bb22 	b.w	8005960 <__register_exitproc>

0800531c <__errno>:
 800531c:	f240 6328 	movw	r3, #1576	; 0x628
 8005320:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	4770      	bx	lr

08005328 <__libc_fini_array>:
 8005328:	b538      	push	{r3, r4, r5, lr}
 800532a:	f647 2444 	movw	r4, #31300	; 0x7a44
 800532e:	f647 2540 	movw	r5, #31296	; 0x7a40
 8005332:	f6c0 0501 	movt	r5, #2049	; 0x801
 8005336:	f6c0 0401 	movt	r4, #2049	; 0x801
 800533a:	1b64      	subs	r4, r4, r5
 800533c:	10a4      	asrs	r4, r4, #2
 800533e:	bf18      	it	ne
 8005340:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
 8005344:	d005      	beq.n	8005352 <__libc_fini_array+0x2a>
 8005346:	3c01      	subs	r4, #1
 8005348:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800534c:	4798      	blx	r3
 800534e:	2c00      	cmp	r4, #0
 8005350:	d1f9      	bne.n	8005346 <__libc_fini_array+0x1e>
 8005352:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005356:	f001 bebd 	b.w	80070d4 <_fini>
 800535a:	bf00      	nop

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	f647 2638 	movw	r6, #31288	; 0x7a38
 8005362:	f647 2538 	movw	r5, #31288	; 0x7a38
 8005366:	f6c0 0501 	movt	r5, #2049	; 0x801
 800536a:	f6c0 0601 	movt	r6, #2049	; 0x801
 800536e:	1b76      	subs	r6, r6, r5
 8005370:	10b6      	asrs	r6, r6, #2
 8005372:	bf1c      	itt	ne
 8005374:	3d04      	subne	r5, #4
 8005376:	2400      	movne	r4, #0
 8005378:	d005      	beq.n	8005386 <__libc_init_array+0x2a>
 800537a:	3401      	adds	r4, #1
 800537c:	f855 3f04 	ldr.w	r3, [r5, #4]!
 8005380:	4798      	blx	r3
 8005382:	42a6      	cmp	r6, r4
 8005384:	d1f9      	bne.n	800537a <__libc_init_array+0x1e>
 8005386:	f647 2640 	movw	r6, #31296	; 0x7a40
 800538a:	f647 2538 	movw	r5, #31288	; 0x7a38
 800538e:	f6c0 0501 	movt	r5, #2049	; 0x801
 8005392:	f6c0 0601 	movt	r6, #2049	; 0x801
 8005396:	1b76      	subs	r6, r6, r5
 8005398:	f001 fe96 	bl	80070c8 <_init>
 800539c:	10b6      	asrs	r6, r6, #2
 800539e:	bf1c      	itt	ne
 80053a0:	3d04      	subne	r5, #4
 80053a2:	2400      	movne	r4, #0
 80053a4:	d006      	beq.n	80053b4 <__libc_init_array+0x58>
 80053a6:	3401      	adds	r4, #1
 80053a8:	f855 3f04 	ldr.w	r3, [r5, #4]!
 80053ac:	4798      	blx	r3
 80053ae:	42a6      	cmp	r6, r4
 80053b0:	d1f9      	bne.n	80053a6 <__libc_init_array+0x4a>
 80053b2:	bd70      	pop	{r4, r5, r6, pc}
 80053b4:	bd70      	pop	{r4, r5, r6, pc}
 80053b6:	bf00      	nop

080053b8 <memset>:
 80053b8:	b4f0      	push	{r4, r5, r6, r7}
 80053ba:	0784      	lsls	r4, r0, #30
 80053bc:	d043      	beq.n	8005446 <memset+0x8e>
 80053be:	1e54      	subs	r4, r2, #1
 80053c0:	2a00      	cmp	r2, #0
 80053c2:	d03e      	beq.n	8005442 <memset+0x8a>
 80053c4:	b2cd      	uxtb	r5, r1
 80053c6:	4603      	mov	r3, r0
 80053c8:	e003      	b.n	80053d2 <memset+0x1a>
 80053ca:	1e62      	subs	r2, r4, #1
 80053cc:	2c00      	cmp	r4, #0
 80053ce:	d038      	beq.n	8005442 <memset+0x8a>
 80053d0:	4614      	mov	r4, r2
 80053d2:	f803 5b01 	strb.w	r5, [r3], #1
 80053d6:	079a      	lsls	r2, r3, #30
 80053d8:	d1f7      	bne.n	80053ca <memset+0x12>
 80053da:	2c03      	cmp	r4, #3
 80053dc:	d92a      	bls.n	8005434 <memset+0x7c>
 80053de:	b2cd      	uxtb	r5, r1
 80053e0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80053e4:	2c0f      	cmp	r4, #15
 80053e6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80053ea:	d915      	bls.n	8005418 <memset+0x60>
 80053ec:	f1a4 0710 	sub.w	r7, r4, #16
 80053f0:	093f      	lsrs	r7, r7, #4
 80053f2:	f103 0610 	add.w	r6, r3, #16
 80053f6:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 80053fa:	461a      	mov	r2, r3
 80053fc:	6015      	str	r5, [r2, #0]
 80053fe:	6055      	str	r5, [r2, #4]
 8005400:	6095      	str	r5, [r2, #8]
 8005402:	60d5      	str	r5, [r2, #12]
 8005404:	3210      	adds	r2, #16
 8005406:	42b2      	cmp	r2, r6
 8005408:	d1f8      	bne.n	80053fc <memset+0x44>
 800540a:	f004 040f 	and.w	r4, r4, #15
 800540e:	3701      	adds	r7, #1
 8005410:	2c03      	cmp	r4, #3
 8005412:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 8005416:	d90d      	bls.n	8005434 <memset+0x7c>
 8005418:	461e      	mov	r6, r3
 800541a:	4622      	mov	r2, r4
 800541c:	3a04      	subs	r2, #4
 800541e:	2a03      	cmp	r2, #3
 8005420:	f846 5b04 	str.w	r5, [r6], #4
 8005424:	d8fa      	bhi.n	800541c <memset+0x64>
 8005426:	1f22      	subs	r2, r4, #4
 8005428:	f022 0203 	bic.w	r2, r2, #3
 800542c:	3204      	adds	r2, #4
 800542e:	4413      	add	r3, r2
 8005430:	f004 0403 	and.w	r4, r4, #3
 8005434:	b12c      	cbz	r4, 8005442 <memset+0x8a>
 8005436:	b2c9      	uxtb	r1, r1
 8005438:	441c      	add	r4, r3
 800543a:	f803 1b01 	strb.w	r1, [r3], #1
 800543e:	42a3      	cmp	r3, r4
 8005440:	d1fb      	bne.n	800543a <memset+0x82>
 8005442:	bcf0      	pop	{r4, r5, r6, r7}
 8005444:	4770      	bx	lr
 8005446:	4614      	mov	r4, r2
 8005448:	4603      	mov	r3, r0
 800544a:	e7c6      	b.n	80053da <memset+0x22>

0800544c <putchar>:
 800544c:	f240 6328 	movw	r3, #1576	; 0x628
 8005450:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005454:	4601      	mov	r1, r0
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	6882      	ldr	r2, [r0, #8]
 800545a:	f001 ba65 	b.w	8006928 <_putc_r>
 800545e:	bf00      	nop

08005460 <_puts_r>:
 8005460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005462:	4604      	mov	r4, r0
 8005464:	b089      	sub	sp, #36	; 0x24
 8005466:	4608      	mov	r0, r1
 8005468:	460d      	mov	r5, r1
 800546a:	f000 f963 	bl	8005734 <strlen>
 800546e:	68a3      	ldr	r3, [r4, #8]
 8005470:	9005      	str	r0, [sp, #20]
 8005472:	8999      	ldrh	r1, [r3, #12]
 8005474:	9504      	str	r5, [sp, #16]
 8005476:	f647 2234 	movw	r2, #31284	; 0x7a34
 800547a:	f6c0 0201 	movt	r2, #2049	; 0x801
 800547e:	9206      	str	r2, [sp, #24]
 8005480:	048a      	lsls	r2, r1, #18
 8005482:	bf5e      	ittt	pl
 8005484:	6e5a      	ldrpl	r2, [r3, #100]	; 0x64
 8005486:	f441 5100 	orrpl.w	r1, r1, #8192	; 0x2000
 800548a:	f422 5200 	bicpl.w	r2, r2, #8192	; 0x2000
 800548e:	f100 0001 	add.w	r0, r0, #1
 8005492:	f04f 0701 	mov.w	r7, #1
 8005496:	bf58      	it	pl
 8005498:	665a      	strpl	r2, [r3, #100]	; 0x64
 800549a:	9003      	str	r0, [sp, #12]
 800549c:	9707      	str	r7, [sp, #28]
 800549e:	ae04      	add	r6, sp, #16
 80054a0:	bf58      	it	pl
 80054a2:	8199      	strhpl	r1, [r3, #12]
 80054a4:	2502      	movs	r5, #2
 80054a6:	4620      	mov	r0, r4
 80054a8:	4619      	mov	r1, r3
 80054aa:	aa01      	add	r2, sp, #4
 80054ac:	9601      	str	r6, [sp, #4]
 80054ae:	9502      	str	r5, [sp, #8]
 80054b0:	f000 fd22 	bl	8005ef8 <__sfvwrite_r>
 80054b4:	2800      	cmp	r0, #0
 80054b6:	bf0c      	ite	eq
 80054b8:	200a      	moveq	r0, #10
 80054ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80054be:	b009      	add	sp, #36	; 0x24
 80054c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054c2:	bf00      	nop

080054c4 <puts>:
 80054c4:	f240 6328 	movw	r3, #1576	; 0x628
 80054c8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80054cc:	4601      	mov	r1, r0
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	f7ff bfc6 	b.w	8005460 <_puts_r>

080054d4 <rand>:
 80054d4:	b410      	push	{r4}
 80054d6:	f240 6328 	movw	r3, #1576	; 0x628
 80054da:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80054de:	f24f 402d 	movw	r0, #62509	; 0xf42d
 80054e2:	6819      	ldr	r1, [r3, #0]
 80054e4:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
 80054e8:	f8d1 40ac 	ldr.w	r4, [r1, #172]	; 0xac
 80054ec:	f6c5 0051 	movt	r0, #22609	; 0x5851
 80054f0:	f647 732d 	movw	r3, #32557	; 0x7f2d
 80054f4:	fb00 f002 	mul.w	r0, r0, r2
 80054f8:	f6c4 4395 	movt	r3, #19605	; 0x4c95
 80054fc:	fb03 0404 	mla	r4, r3, r4, r0
 8005500:	fba2 2303 	umull	r2, r3, r2, r3
 8005504:	4423      	add	r3, r4
 8005506:	3201      	adds	r2, #1
 8005508:	f143 0300 	adc.w	r3, r3, #0
 800550c:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
 8005510:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8005514:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop

0800551c <setvbuf>:
 800551c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005520:	f240 6528 	movw	r5, #1576	; 0x628
 8005524:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005528:	4604      	mov	r4, r0
 800552a:	682e      	ldr	r6, [r5, #0]
 800552c:	4689      	mov	r9, r1
 800552e:	4617      	mov	r7, r2
 8005530:	4698      	mov	r8, r3
 8005532:	b116      	cbz	r6, 800553a <setvbuf+0x1e>
 8005534:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8005536:	2b00      	cmp	r3, #0
 8005538:	d058      	beq.n	80055ec <setvbuf+0xd0>
 800553a:	ea4f 75d8 	mov.w	r5, r8, lsr #31
 800553e:	2f02      	cmp	r7, #2
 8005540:	bf88      	it	hi
 8005542:	f045 0501 	orrhi.w	r5, r5, #1
 8005546:	2d00      	cmp	r5, #0
 8005548:	d133      	bne.n	80055b2 <setvbuf+0x96>
 800554a:	4630      	mov	r0, r6
 800554c:	4621      	mov	r1, r4
 800554e:	f000 fb17 	bl	8005b80 <_fflush_r>
 8005552:	89a3      	ldrh	r3, [r4, #12]
 8005554:	6065      	str	r5, [r4, #4]
 8005556:	061a      	lsls	r2, r3, #24
 8005558:	61a5      	str	r5, [r4, #24]
 800555a:	d42e      	bmi.n	80055ba <setvbuf+0x9e>
 800555c:	f64f 757c 	movw	r5, #65404	; 0xff7c
 8005560:	401d      	ands	r5, r3
 8005562:	2f02      	cmp	r7, #2
 8005564:	81a5      	strh	r5, [r4, #12]
 8005566:	d033      	beq.n	80055d0 <setvbuf+0xb4>
 8005568:	f1b9 0f00 	cmp.w	r9, #0
 800556c:	d042      	beq.n	80055f4 <setvbuf+0xd8>
 800556e:	2f01      	cmp	r7, #1
 8005570:	bf02      	ittt	eq
 8005572:	f045 0501 	orreq.w	r5, r5, #1
 8005576:	f1c8 0300 	rsbeq	r3, r8, #0
 800557a:	81a5      	strheq	r5, [r4, #12]
 800557c:	b2ad      	uxth	r5, r5
 800557e:	bf08      	it	eq
 8005580:	61a3      	streq	r3, [r4, #24]
 8005582:	f005 0008 	and.w	r0, r5, #8
 8005586:	f645 33ad 	movw	r3, #23469	; 0x5bad
 800558a:	f6c0 0300 	movt	r3, #2048	; 0x800
 800558e:	b280      	uxth	r0, r0
 8005590:	63f3      	str	r3, [r6, #60]	; 0x3c
 8005592:	f8c4 9000 	str.w	r9, [r4]
 8005596:	f8c4 9010 	str.w	r9, [r4, #16]
 800559a:	f8c4 8014 	str.w	r8, [r4, #20]
 800559e:	b150      	cbz	r0, 80055b6 <setvbuf+0x9a>
 80055a0:	f015 0f03 	tst.w	r5, #3
 80055a4:	bf0c      	ite	eq
 80055a6:	4643      	moveq	r3, r8
 80055a8:	2300      	movne	r3, #0
 80055aa:	60a3      	str	r3, [r4, #8]
 80055ac:	2000      	movs	r0, #0
 80055ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ba:	4630      	mov	r0, r6
 80055bc:	6921      	ldr	r1, [r4, #16]
 80055be:	f000 fbcd 	bl	8005d5c <_free_r>
 80055c2:	89a3      	ldrh	r3, [r4, #12]
 80055c4:	f64f 757c 	movw	r5, #65404	; 0xff7c
 80055c8:	401d      	ands	r5, r3
 80055ca:	2f02      	cmp	r7, #2
 80055cc:	81a5      	strh	r5, [r4, #12]
 80055ce:	d1cb      	bne.n	8005568 <setvbuf+0x4c>
 80055d0:	2000      	movs	r0, #0
 80055d2:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80055d6:	f045 0502 	orr.w	r5, r5, #2
 80055da:	2100      	movs	r1, #0
 80055dc:	2201      	movs	r2, #1
 80055de:	81a5      	strh	r5, [r4, #12]
 80055e0:	60a1      	str	r1, [r4, #8]
 80055e2:	6023      	str	r3, [r4, #0]
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	6162      	str	r2, [r4, #20]
 80055e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055ec:	4630      	mov	r0, r6
 80055ee:	f000 fae3 	bl	8005bb8 <__sinit>
 80055f2:	e7a2      	b.n	800553a <setvbuf+0x1e>
 80055f4:	f1b8 0f00 	cmp.w	r8, #0
 80055f8:	bf08      	it	eq
 80055fa:	f44f 6880 	moveq.w	r8, #1024	; 0x400
 80055fe:	4640      	mov	r0, r8
 8005600:	f000 fe2a 	bl	8006258 <malloc>
 8005604:	4681      	mov	r9, r0
 8005606:	b128      	cbz	r0, 8005614 <setvbuf+0xf8>
 8005608:	89a5      	ldrh	r5, [r4, #12]
 800560a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800560e:	b2ad      	uxth	r5, r5
 8005610:	81a5      	strh	r5, [r4, #12]
 8005612:	e7ac      	b.n	800556e <setvbuf+0x52>
 8005614:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8005618:	f000 fe1e 	bl	8006258 <malloc>
 800561c:	4681      	mov	r9, r0
 800561e:	b918      	cbnz	r0, 8005628 <setvbuf+0x10c>
 8005620:	89a5      	ldrh	r5, [r4, #12]
 8005622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005626:	e7d4      	b.n	80055d2 <setvbuf+0xb6>
 8005628:	f44f 6880 	mov.w	r8, #1024	; 0x400
 800562c:	e7ec      	b.n	8005608 <setvbuf+0xec>
 800562e:	bf00      	nop

08005630 <strcasecmp>:
 8005630:	f240 13fc 	movw	r3, #508	; 0x1fc
 8005634:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005638:	b430      	push	{r4, r5}
 800563a:	4605      	mov	r5, r0
 800563c:	681c      	ldr	r4, [r3, #0]
 800563e:	e002      	b.n	8005646 <strcasecmp+0x16>
 8005640:	1ad0      	subs	r0, r2, r3
 8005642:	d116      	bne.n	8005672 <strcasecmp+0x42>
 8005644:	b1ab      	cbz	r3, 8005672 <strcasecmp+0x42>
 8005646:	f815 3b01 	ldrb.w	r3, [r5], #1
 800564a:	18e0      	adds	r0, r4, r3
 800564c:	461a      	mov	r2, r3
 800564e:	7840      	ldrb	r0, [r0, #1]
 8005650:	f000 0003 	and.w	r0, r0, #3
 8005654:	2801      	cmp	r0, #1
 8005656:	bf08      	it	eq
 8005658:	f103 0220 	addeq.w	r2, r3, #32
 800565c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005660:	18e0      	adds	r0, r4, r3
 8005662:	7840      	ldrb	r0, [r0, #1]
 8005664:	f000 0003 	and.w	r0, r0, #3
 8005668:	2801      	cmp	r0, #1
 800566a:	d1e9      	bne.n	8005640 <strcasecmp+0x10>
 800566c:	3320      	adds	r3, #32
 800566e:	1ad0      	subs	r0, r2, r3
 8005670:	d0e9      	beq.n	8005646 <strcasecmp+0x16>
 8005672:	bc30      	pop	{r4, r5}
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop

08005678 <strcpy>:
 8005678:	ea80 0201 	eor.w	r2, r0, r1
 800567c:	4684      	mov	ip, r0
 800567e:	f012 0f03 	tst.w	r2, #3
 8005682:	d14f      	bne.n	8005724 <strcpy+0xac>
 8005684:	f011 0f03 	tst.w	r1, #3
 8005688:	d132      	bne.n	80056f0 <strcpy+0x78>
 800568a:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800568e:	f011 0f04 	tst.w	r1, #4
 8005692:	f851 3b04 	ldr.w	r3, [r1], #4
 8005696:	d00b      	beq.n	80056b0 <strcpy+0x38>
 8005698:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 800569c:	439a      	bics	r2, r3
 800569e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80056a2:	bf04      	itt	eq
 80056a4:	f84c 3b04 	streq.w	r3, [ip], #4
 80056a8:	f851 3b04 	ldreq.w	r3, [r1], #4
 80056ac:	d116      	bne.n	80056dc <strcpy+0x64>
 80056ae:	bf00      	nop
 80056b0:	f851 4b04 	ldr.w	r4, [r1], #4
 80056b4:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 80056b8:	439a      	bics	r2, r3
 80056ba:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80056be:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 80056c2:	d10b      	bne.n	80056dc <strcpy+0x64>
 80056c4:	f84c 3b04 	str.w	r3, [ip], #4
 80056c8:	43a2      	bics	r2, r4
 80056ca:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 80056ce:	bf04      	itt	eq
 80056d0:	f851 3b04 	ldreq.w	r3, [r1], #4
 80056d4:	f84c 4b04 	streq.w	r4, [ip], #4
 80056d8:	d0ea      	beq.n	80056b0 <strcpy+0x38>
 80056da:	4623      	mov	r3, r4
 80056dc:	f80c 3b01 	strb.w	r3, [ip], #1
 80056e0:	f013 0fff 	tst.w	r3, #255	; 0xff
 80056e4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80056e8:	d1f8      	bne.n	80056dc <strcpy+0x64>
 80056ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ee:	4770      	bx	lr
 80056f0:	f011 0f01 	tst.w	r1, #1
 80056f4:	d006      	beq.n	8005704 <strcpy+0x8c>
 80056f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056fa:	f80c 2b01 	strb.w	r2, [ip], #1
 80056fe:	2a00      	cmp	r2, #0
 8005700:	bf08      	it	eq
 8005702:	4770      	bxeq	lr
 8005704:	f011 0f02 	tst.w	r1, #2
 8005708:	d0bf      	beq.n	800568a <strcpy+0x12>
 800570a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800570e:	f012 0fff 	tst.w	r2, #255	; 0xff
 8005712:	bf16      	itet	ne
 8005714:	f82c 2b02 	strhne.w	r2, [ip], #2
 8005718:	f88c 2000 	strbeq.w	r2, [ip]
 800571c:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 8005720:	d1b3      	bne.n	800568a <strcpy+0x12>
 8005722:	4770      	bx	lr
 8005724:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005728:	f80c 2b01 	strb.w	r2, [ip], #1
 800572c:	2a00      	cmp	r2, #0
 800572e:	d1f9      	bne.n	8005724 <strcpy+0xac>
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop

08005734 <strlen>:
 8005734:	f020 0103 	bic.w	r1, r0, #3
 8005738:	f010 0003 	ands.w	r0, r0, #3
 800573c:	f1c0 0000 	rsb	r0, r0, #0
 8005740:	f851 3b04 	ldr.w	r3, [r1], #4
 8005744:	f100 0c04 	add.w	ip, r0, #4
 8005748:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800574c:	f06f 0200 	mvn.w	r2, #0
 8005750:	bf1c      	itt	ne
 8005752:	fa22 f20c 	lsrne.w	r2, r2, ip
 8005756:	4313      	orrne	r3, r2
 8005758:	f04f 0c01 	mov.w	ip, #1
 800575c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 8005760:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8005764:	eba3 020c 	sub.w	r2, r3, ip
 8005768:	ea22 0203 	bic.w	r2, r2, r3
 800576c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 8005770:	bf04      	itt	eq
 8005772:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005776:	3004      	addeq	r0, #4
 8005778:	d0f4      	beq.n	8005764 <strlen+0x30>
 800577a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800577e:	bf1f      	itttt	ne
 8005780:	3001      	addne	r0, #1
 8005782:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
 8005786:	3001      	addne	r0, #1
 8005788:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
 800578c:	bf18      	it	ne
 800578e:	3001      	addne	r0, #1
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop

08005794 <strtok>:
 8005794:	f240 6228 	movw	r2, #1576	; 0x628
 8005798:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800579c:	2301      	movs	r3, #1
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	325c      	adds	r2, #92	; 0x5c
 80057a2:	f000 b801 	b.w	80057a8 <__strtok_r>
 80057a6:	bf00      	nop

080057a8 <__strtok_r>:
 80057a8:	b4f0      	push	{r4, r5, r6, r7}
 80057aa:	b320      	cbz	r0, 80057f6 <__strtok_r+0x4e>
 80057ac:	4607      	mov	r7, r0
 80057ae:	460d      	mov	r5, r1
 80057b0:	f817 6b01 	ldrb.w	r6, [r7], #1
 80057b4:	e001      	b.n	80057ba <__strtok_r+0x12>
 80057b6:	42a6      	cmp	r6, r4
 80057b8:	d016      	beq.n	80057e8 <__strtok_r+0x40>
 80057ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057be:	2c00      	cmp	r4, #0
 80057c0:	d1f9      	bne.n	80057b6 <__strtok_r+0xe>
 80057c2:	b1ee      	cbz	r6, 8005800 <__strtok_r+0x58>
 80057c4:	463e      	mov	r6, r7
 80057c6:	460c      	mov	r4, r1
 80057c8:	f816 5b01 	ldrb.w	r5, [r6], #1
 80057cc:	e000      	b.n	80057d0 <__strtok_r+0x28>
 80057ce:	b173      	cbz	r3, 80057ee <__strtok_r+0x46>
 80057d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80057d4:	42ab      	cmp	r3, r5
 80057d6:	d1fa      	bne.n	80057ce <__strtok_r+0x26>
 80057d8:	b15d      	cbz	r5, 80057f2 <__strtok_r+0x4a>
 80057da:	2300      	movs	r3, #0
 80057dc:	703b      	strb	r3, [r7, #0]
 80057de:	6016      	str	r6, [r2, #0]
 80057e0:	4606      	mov	r6, r0
 80057e2:	4630      	mov	r0, r6
 80057e4:	bcf0      	pop	{r4, r5, r6, r7}
 80057e6:	4770      	bx	lr
 80057e8:	b163      	cbz	r3, 8005804 <__strtok_r+0x5c>
 80057ea:	4638      	mov	r0, r7
 80057ec:	e7de      	b.n	80057ac <__strtok_r+0x4>
 80057ee:	4637      	mov	r7, r6
 80057f0:	e7e8      	b.n	80057c4 <__strtok_r+0x1c>
 80057f2:	462e      	mov	r6, r5
 80057f4:	e7f3      	b.n	80057de <__strtok_r+0x36>
 80057f6:	6810      	ldr	r0, [r2, #0]
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d1d7      	bne.n	80057ac <__strtok_r+0x4>
 80057fc:	4606      	mov	r6, r0
 80057fe:	e7f0      	b.n	80057e2 <__strtok_r+0x3a>
 8005800:	6016      	str	r6, [r2, #0]
 8005802:	e7ee      	b.n	80057e2 <__strtok_r+0x3a>
 8005804:	6017      	str	r7, [r2, #0]
 8005806:	4606      	mov	r6, r0
 8005808:	7003      	strb	r3, [r0, #0]
 800580a:	e7ea      	b.n	80057e2 <__strtok_r+0x3a>

0800580c <_strtoul_r>:
 800580c:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005810:	f240 14fc 	movw	r4, #508	; 0x1fc
 8005814:	b082      	sub	sp, #8
 8005816:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800581a:	9001      	str	r0, [sp, #4]
 800581c:	f8d4 c000 	ldr.w	ip, [r4]
 8005820:	460e      	mov	r6, r1
 8005822:	e000      	b.n	8005826 <_strtoul_r+0x1a>
 8005824:	4626      	mov	r6, r4
 8005826:	4634      	mov	r4, r6
 8005828:	f814 5b01 	ldrb.w	r5, [r4], #1
 800582c:	eb0c 0005 	add.w	r0, ip, r5
 8005830:	7840      	ldrb	r0, [r0, #1]
 8005832:	f000 0008 	and.w	r0, r0, #8
 8005836:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 800583a:	2800      	cmp	r0, #0
 800583c:	d1f2      	bne.n	8005824 <_strtoul_r+0x18>
 800583e:	2d2d      	cmp	r5, #45	; 0x2d
 8005840:	d06a      	beq.n	8005918 <_strtoul_r+0x10c>
 8005842:	2d2b      	cmp	r5, #43	; 0x2b
 8005844:	bf08      	it	eq
 8005846:	7875      	ldrbeq	r5, [r6, #1]
 8005848:	46ba      	mov	sl, r7
 800584a:	bf08      	it	eq
 800584c:	1cb4      	addeq	r4, r6, #2
 800584e:	f033 0010 	bics.w	r0, r3, #16
 8005852:	d116      	bne.n	8005882 <_strtoul_r+0x76>
 8005854:	f1d3 0001 	rsbs	r0, r3, #1
 8005858:	bf38      	it	cc
 800585a:	2000      	movcc	r0, #0
 800585c:	2d30      	cmp	r5, #48	; 0x30
 800585e:	d009      	beq.n	8005874 <_strtoul_r+0x68>
 8005860:	b178      	cbz	r0, 8005882 <_strtoul_r+0x76>
 8005862:	f649 1899 	movw	r8, #39321	; 0x9999
 8005866:	230a      	movs	r3, #10
 8005868:	f6c1 1899 	movt	r8, #6553	; 0x1999
 800586c:	469b      	mov	fp, r3
 800586e:	f04f 0905 	mov.w	r9, #5
 8005872:	e00f      	b.n	8005894 <_strtoul_r+0x88>
 8005874:	7826      	ldrb	r6, [r4, #0]
 8005876:	f006 06df 	and.w	r6, r6, #223	; 0xdf
 800587a:	2e58      	cmp	r6, #88	; 0x58
 800587c:	d051      	beq.n	8005922 <_strtoul_r+0x116>
 800587e:	2800      	cmp	r0, #0
 8005880:	d158      	bne.n	8005934 <_strtoul_r+0x128>
 8005882:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8005886:	fbb8 f8f3 	udiv	r8, r8, r3
 800588a:	fb03 f908 	mul.w	r9, r3, r8
 800588e:	ea6f 0909 	mvn.w	r9, r9
 8005892:	469b      	mov	fp, r3
 8005894:	2700      	movs	r7, #0
 8005896:	4638      	mov	r0, r7
 8005898:	e00c      	b.n	80058b4 <_strtoul_r+0xa8>
 800589a:	454d      	cmp	r5, r9
 800589c:	bfd4      	ite	le
 800589e:	2600      	movle	r6, #0
 80058a0:	2601      	movgt	r6, #1
 80058a2:	4540      	cmp	r0, r8
 80058a4:	bf18      	it	ne
 80058a6:	2600      	movne	r6, #0
 80058a8:	b9ee      	cbnz	r6, 80058e6 <_strtoul_r+0xda>
 80058aa:	fb0b 5000 	mla	r0, fp, r0, r5
 80058ae:	2701      	movs	r7, #1
 80058b0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80058b4:	eb0c 0605 	add.w	r6, ip, r5
 80058b8:	7876      	ldrb	r6, [r6, #1]
 80058ba:	f016 0f04 	tst.w	r6, #4
 80058be:	bf18      	it	ne
 80058c0:	3d30      	subne	r5, #48	; 0x30
 80058c2:	d107      	bne.n	80058d4 <_strtoul_r+0xc8>
 80058c4:	f016 0603 	ands.w	r6, r6, #3
 80058c8:	d010      	beq.n	80058ec <_strtoul_r+0xe0>
 80058ca:	2e01      	cmp	r6, #1
 80058cc:	bf14      	ite	ne
 80058ce:	2657      	movne	r6, #87	; 0x57
 80058d0:	2637      	moveq	r6, #55	; 0x37
 80058d2:	1bad      	subs	r5, r5, r6
 80058d4:	42ab      	cmp	r3, r5
 80058d6:	dd09      	ble.n	80058ec <_strtoul_r+0xe0>
 80058d8:	4540      	cmp	r0, r8
 80058da:	bf94      	ite	ls
 80058dc:	2600      	movls	r6, #0
 80058de:	2601      	movhi	r6, #1
 80058e0:	ea56 77d7 	orrs.w	r7, r6, r7, lsr #31
 80058e4:	d0d9      	beq.n	800589a <_strtoul_r+0x8e>
 80058e6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80058ea:	e7e1      	b.n	80058b0 <_strtoul_r+0xa4>
 80058ec:	1c7b      	adds	r3, r7, #1
 80058ee:	d009      	beq.n	8005904 <_strtoul_r+0xf8>
 80058f0:	f1ba 0f00 	cmp.w	sl, #0
 80058f4:	d10e      	bne.n	8005914 <_strtoul_r+0x108>
 80058f6:	b10a      	cbz	r2, 80058fc <_strtoul_r+0xf0>
 80058f8:	b957      	cbnz	r7, 8005910 <_strtoul_r+0x104>
 80058fa:	6011      	str	r1, [r2, #0]
 80058fc:	b002      	add	sp, #8
 80058fe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005902:	4770      	bx	lr
 8005904:	9901      	ldr	r1, [sp, #4]
 8005906:	2322      	movs	r3, #34	; 0x22
 8005908:	600b      	str	r3, [r1, #0]
 800590a:	4638      	mov	r0, r7
 800590c:	2a00      	cmp	r2, #0
 800590e:	d0f5      	beq.n	80058fc <_strtoul_r+0xf0>
 8005910:	1e61      	subs	r1, r4, #1
 8005912:	e7f2      	b.n	80058fa <_strtoul_r+0xee>
 8005914:	4240      	negs	r0, r0
 8005916:	e7ee      	b.n	80058f6 <_strtoul_r+0xea>
 8005918:	1cb4      	adds	r4, r6, #2
 800591a:	7875      	ldrb	r5, [r6, #1]
 800591c:	f04f 0a01 	mov.w	sl, #1
 8005920:	e795      	b.n	800584e <_strtoul_r+0x42>
 8005922:	2310      	movs	r3, #16
 8005924:	7865      	ldrb	r5, [r4, #1]
 8005926:	469b      	mov	fp, r3
 8005928:	f04f 090f 	mov.w	r9, #15
 800592c:	3402      	adds	r4, #2
 800592e:	f06f 4870 	mvn.w	r8, #4026531840	; 0xf0000000
 8005932:	e7af      	b.n	8005894 <_strtoul_r+0x88>
 8005934:	2308      	movs	r3, #8
 8005936:	469b      	mov	fp, r3
 8005938:	f04f 0907 	mov.w	r9, #7
 800593c:	f06f 4860 	mvn.w	r8, #3758096384	; 0xe0000000
 8005940:	e7a8      	b.n	8005894 <_strtoul_r+0x88>
 8005942:	bf00      	nop

08005944 <strtoul>:
 8005944:	b430      	push	{r4, r5}
 8005946:	f240 6428 	movw	r4, #1576	; 0x628
 800594a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 800594e:	460d      	mov	r5, r1
 8005950:	4613      	mov	r3, r2
 8005952:	4601      	mov	r1, r0
 8005954:	462a      	mov	r2, r5
 8005956:	6820      	ldr	r0, [r4, #0]
 8005958:	bc30      	pop	{r4, r5}
 800595a:	f7ff bf57 	b.w	800580c <_strtoul_r>
 800595e:	bf00      	nop

08005960 <__register_exitproc>:
 8005960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005962:	f647 2430 	movw	r4, #31280	; 0x7a30
 8005966:	f6c0 0401 	movt	r4, #2049	; 0x801
 800596a:	b085      	sub	sp, #20
 800596c:	6826      	ldr	r6, [r4, #0]
 800596e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
 8005972:	4607      	mov	r7, r0
 8005974:	2c00      	cmp	r4, #0
 8005976:	d044      	beq.n	8005a02 <__register_exitproc+0xa2>
 8005978:	6865      	ldr	r5, [r4, #4]
 800597a:	2d1f      	cmp	r5, #31
 800597c:	dd21      	ble.n	80059c2 <__register_exitproc+0x62>
 800597e:	f246 2459 	movw	r4, #25177	; 0x6259
 8005982:	f6c0 0400 	movt	r4, #2048	; 0x800
 8005986:	b91c      	cbnz	r4, 8005990 <__register_exitproc+0x30>
 8005988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800598c:	b005      	add	sp, #20
 800598e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005990:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8005994:	9103      	str	r1, [sp, #12]
 8005996:	9202      	str	r2, [sp, #8]
 8005998:	9301      	str	r3, [sp, #4]
 800599a:	f000 fc5d 	bl	8006258 <malloc>
 800599e:	9903      	ldr	r1, [sp, #12]
 80059a0:	9a02      	ldr	r2, [sp, #8]
 80059a2:	9b01      	ldr	r3, [sp, #4]
 80059a4:	4604      	mov	r4, r0
 80059a6:	2800      	cmp	r0, #0
 80059a8:	d0ee      	beq.n	8005988 <__register_exitproc+0x28>
 80059aa:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
 80059ae:	2000      	movs	r0, #0
 80059b0:	6025      	str	r5, [r4, #0]
 80059b2:	6060      	str	r0, [r4, #4]
 80059b4:	4605      	mov	r5, r0
 80059b6:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 80059ba:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 80059be:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
 80059c2:	b93f      	cbnz	r7, 80059d4 <__register_exitproc+0x74>
 80059c4:	1cab      	adds	r3, r5, #2
 80059c6:	2000      	movs	r0, #0
 80059c8:	3501      	adds	r5, #1
 80059ca:	6065      	str	r5, [r4, #4]
 80059cc:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
 80059d0:	b005      	add	sp, #20
 80059d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d4:	eb04 0085 	add.w	r0, r4, r5, lsl #2
 80059d8:	f04f 0c01 	mov.w	ip, #1
 80059dc:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
 80059e0:	f8d4 6188 	ldr.w	r6, [r4, #392]	; 0x188
 80059e4:	fa0c f205 	lsl.w	r2, ip, r5
 80059e8:	4316      	orrs	r6, r2
 80059ea:	2f02      	cmp	r7, #2
 80059ec:	f8c4 6188 	str.w	r6, [r4, #392]	; 0x188
 80059f0:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
 80059f4:	bf02      	ittt	eq
 80059f6:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 80059fa:	431a      	orreq	r2, r3
 80059fc:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 8005a00:	e7e0      	b.n	80059c4 <__register_exitproc+0x64>
 8005a02:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
 8005a06:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
 8005a0a:	e7b5      	b.n	8005978 <__register_exitproc+0x18>

08005a0c <register_fini>:
 8005a0c:	f240 0300 	movw	r3, #0
 8005a10:	f2c0 0300 	movt	r3, #0
 8005a14:	b12b      	cbz	r3, 8005a22 <register_fini+0x16>
 8005a16:	f245 3029 	movw	r0, #21289	; 0x5329
 8005a1a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8005a1e:	f7ff bc77 	b.w	8005310 <atexit>
 8005a22:	4770      	bx	lr

08005a24 <__sflush_r>:
 8005a24:	898b      	ldrh	r3, [r1, #12]
 8005a26:	b29a      	uxth	r2, r3
 8005a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a2c:	460d      	mov	r5, r1
 8005a2e:	0711      	lsls	r1, r2, #28
 8005a30:	4680      	mov	r8, r0
 8005a32:	d43c      	bmi.n	8005aae <__sflush_r+0x8a>
 8005a34:	686a      	ldr	r2, [r5, #4]
 8005a36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005a3a:	2a00      	cmp	r2, #0
 8005a3c:	81ab      	strh	r3, [r5, #12]
 8005a3e:	dd5a      	ble.n	8005af6 <__sflush_r+0xd2>
 8005a40:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005a42:	2c00      	cmp	r4, #0
 8005a44:	d04c      	beq.n	8005ae0 <__sflush_r+0xbc>
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	f403 5680 	and.w	r6, r3, #4096	; 0x1000
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	b2b6      	uxth	r6, r6
 8005a50:	f8d8 7000 	ldr.w	r7, [r8]
 8005a54:	f8c8 2000 	str.w	r2, [r8]
 8005a58:	2e00      	cmp	r6, #0
 8005a5a:	d050      	beq.n	8005afe <__sflush_r+0xda>
 8005a5c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 8005a5e:	075e      	lsls	r6, r3, #29
 8005a60:	d505      	bpl.n	8005a6e <__sflush_r+0x4a>
 8005a62:	6869      	ldr	r1, [r5, #4]
 8005a64:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8005a66:	1a52      	subs	r2, r2, r1
 8005a68:	b10b      	cbz	r3, 8005a6e <__sflush_r+0x4a>
 8005a6a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8005a6c:	1ad2      	subs	r2, r2, r3
 8005a6e:	4640      	mov	r0, r8
 8005a70:	69e9      	ldr	r1, [r5, #28]
 8005a72:	2300      	movs	r3, #0
 8005a74:	47a0      	blx	r4
 8005a76:	1c44      	adds	r4, r0, #1
 8005a78:	d04c      	beq.n	8005b14 <__sflush_r+0xf0>
 8005a7a:	89ab      	ldrh	r3, [r5, #12]
 8005a7c:	692a      	ldr	r2, [r5, #16]
 8005a7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	2100      	movs	r1, #0
 8005a86:	602a      	str	r2, [r5, #0]
 8005a88:	04da      	lsls	r2, r3, #19
 8005a8a:	81ab      	strh	r3, [r5, #12]
 8005a8c:	6069      	str	r1, [r5, #4]
 8005a8e:	d44e      	bmi.n	8005b2e <__sflush_r+0x10a>
 8005a90:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8005a92:	f8c8 7000 	str.w	r7, [r8]
 8005a96:	b319      	cbz	r1, 8005ae0 <__sflush_r+0xbc>
 8005a98:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005a9c:	4299      	cmp	r1, r3
 8005a9e:	d002      	beq.n	8005aa6 <__sflush_r+0x82>
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	f000 f95b 	bl	8005d5c <_free_r>
 8005aa6:	2000      	movs	r0, #0
 8005aa8:	6328      	str	r0, [r5, #48]	; 0x30
 8005aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005aae:	692e      	ldr	r6, [r5, #16]
 8005ab0:	b1b6      	cbz	r6, 8005ae0 <__sflush_r+0xbc>
 8005ab2:	0791      	lsls	r1, r2, #30
 8005ab4:	682c      	ldr	r4, [r5, #0]
 8005ab6:	bf08      	it	eq
 8005ab8:	696b      	ldreq	r3, [r5, #20]
 8005aba:	602e      	str	r6, [r5, #0]
 8005abc:	bf18      	it	ne
 8005abe:	2300      	movne	r3, #0
 8005ac0:	1ba4      	subs	r4, r4, r6
 8005ac2:	60ab      	str	r3, [r5, #8]
 8005ac4:	e00a      	b.n	8005adc <__sflush_r+0xb8>
 8005ac6:	4632      	mov	r2, r6
 8005ac8:	4623      	mov	r3, r4
 8005aca:	6a6f      	ldr	r7, [r5, #36]	; 0x24
 8005acc:	69e9      	ldr	r1, [r5, #28]
 8005ace:	4640      	mov	r0, r8
 8005ad0:	47b8      	blx	r7
 8005ad2:	2800      	cmp	r0, #0
 8005ad4:	ebc0 0404 	rsb	r4, r0, r4
 8005ad8:	4406      	add	r6, r0
 8005ada:	dd04      	ble.n	8005ae6 <__sflush_r+0xc2>
 8005adc:	2c00      	cmp	r4, #0
 8005ade:	dcf2      	bgt.n	8005ac6 <__sflush_r+0xa2>
 8005ae0:	2000      	movs	r0, #0
 8005ae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ae6:	89ab      	ldrh	r3, [r5, #12]
 8005ae8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005aec:	81ab      	strh	r3, [r5, #12]
 8005aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8005af8:	2a00      	cmp	r2, #0
 8005afa:	dca1      	bgt.n	8005a40 <__sflush_r+0x1c>
 8005afc:	e7f0      	b.n	8005ae0 <__sflush_r+0xbc>
 8005afe:	4632      	mov	r2, r6
 8005b00:	2301      	movs	r3, #1
 8005b02:	4640      	mov	r0, r8
 8005b04:	69e9      	ldr	r1, [r5, #28]
 8005b06:	47a0      	blx	r4
 8005b08:	1c43      	adds	r3, r0, #1
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	d01e      	beq.n	8005b4c <__sflush_r+0x128>
 8005b0e:	89ab      	ldrh	r3, [r5, #12]
 8005b10:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8005b12:	e7a4      	b.n	8005a5e <__sflush_r+0x3a>
 8005b14:	f8d8 3000 	ldr.w	r3, [r8]
 8005b18:	b95b      	cbnz	r3, 8005b32 <__sflush_r+0x10e>
 8005b1a:	89a9      	ldrh	r1, [r5, #12]
 8005b1c:	606b      	str	r3, [r5, #4]
 8005b1e:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	692a      	ldr	r2, [r5, #16]
 8005b26:	81ab      	strh	r3, [r5, #12]
 8005b28:	04db      	lsls	r3, r3, #19
 8005b2a:	602a      	str	r2, [r5, #0]
 8005b2c:	d5b0      	bpl.n	8005a90 <__sflush_r+0x6c>
 8005b2e:	6528      	str	r0, [r5, #80]	; 0x50
 8005b30:	e7ae      	b.n	8005a90 <__sflush_r+0x6c>
 8005b32:	2b1d      	cmp	r3, #29
 8005b34:	d001      	beq.n	8005b3a <__sflush_r+0x116>
 8005b36:	2b16      	cmp	r3, #22
 8005b38:	d11b      	bne.n	8005b72 <__sflush_r+0x14e>
 8005b3a:	89a9      	ldrh	r1, [r5, #12]
 8005b3c:	692b      	ldr	r3, [r5, #16]
 8005b3e:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8005b42:	2200      	movs	r2, #0
 8005b44:	81a9      	strh	r1, [r5, #12]
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	606a      	str	r2, [r5, #4]
 8005b4a:	e7a1      	b.n	8005a90 <__sflush_r+0x6c>
 8005b4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d0dc      	beq.n	8005b0e <__sflush_r+0xea>
 8005b54:	2b1d      	cmp	r3, #29
 8005b56:	bf18      	it	ne
 8005b58:	2b16      	cmpne	r3, #22
 8005b5a:	bf15      	itete	ne
 8005b5c:	89ab      	ldrhne	r3, [r5, #12]
 8005b5e:	f8c8 7000 	streq.w	r7, [r8]
 8005b62:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8005b66:	4630      	moveq	r0, r6
 8005b68:	bf1c      	itt	ne
 8005b6a:	81ab      	strhne	r3, [r5, #12]
 8005b6c:	4610      	movne	r0, r2
 8005b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b72:	89ab      	ldrh	r3, [r5, #12]
 8005b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b78:	81ab      	strh	r3, [r5, #12]
 8005b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b7e:	bf00      	nop

08005b80 <_fflush_r>:
 8005b80:	b510      	push	{r4, lr}
 8005b82:	4604      	mov	r4, r0
 8005b84:	b082      	sub	sp, #8
 8005b86:	b108      	cbz	r0, 8005b8c <_fflush_r+0xc>
 8005b88:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005b8a:	b153      	cbz	r3, 8005ba2 <_fflush_r+0x22>
 8005b8c:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8005b90:	b908      	cbnz	r0, 8005b96 <_fflush_r+0x16>
 8005b92:	b002      	add	sp, #8
 8005b94:	bd10      	pop	{r4, pc}
 8005b96:	4620      	mov	r0, r4
 8005b98:	b002      	add	sp, #8
 8005b9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b9e:	f7ff bf41 	b.w	8005a24 <__sflush_r>
 8005ba2:	9101      	str	r1, [sp, #4]
 8005ba4:	f000 f808 	bl	8005bb8 <__sinit>
 8005ba8:	9901      	ldr	r1, [sp, #4]
 8005baa:	e7ef      	b.n	8005b8c <_fflush_r+0xc>

08005bac <_cleanup_r>:
 8005bac:	f646 71d5 	movw	r1, #28629	; 0x6fd5
 8005bb0:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005bb4:	f000 bb2a 	b.w	800620c <_fwalk>

08005bb8 <__sinit>:
 8005bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bbc:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	4607      	mov	r7, r0
 8005bc2:	2c00      	cmp	r4, #0
 8005bc4:	d170      	bne.n	8005ca8 <__sinit+0xf0>
 8005bc6:	6845      	ldr	r5, [r0, #4]
 8005bc8:	f8c0 42e0 	str.w	r4, [r0, #736]	; 0x2e0
 8005bcc:	f645 33ad 	movw	r3, #23469	; 0x5bad
 8005bd0:	f6c0 0300 	movt	r3, #2048	; 0x800
 8005bd4:	2003      	movs	r0, #3
 8005bd6:	f507 713b 	add.w	r1, r7, #748	; 0x2ec
 8005bda:	2204      	movs	r2, #4
 8005bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bde:	f8c7 02e4 	str.w	r0, [r7, #740]	; 0x2e4
 8005be2:	f8c7 12e8 	str.w	r1, [r7, #744]	; 0x2e8
 8005be6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8005bea:	81aa      	strh	r2, [r5, #12]
 8005bec:	602c      	str	r4, [r5, #0]
 8005bee:	606c      	str	r4, [r5, #4]
 8005bf0:	60ac      	str	r4, [r5, #8]
 8005bf2:	666c      	str	r4, [r5, #100]	; 0x64
 8005bf4:	81ec      	strh	r4, [r5, #14]
 8005bf6:	612c      	str	r4, [r5, #16]
 8005bf8:	616c      	str	r4, [r5, #20]
 8005bfa:	61ac      	str	r4, [r5, #24]
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	2208      	movs	r2, #8
 8005c00:	f7ff fbda 	bl	80053b8 <memset>
 8005c04:	f646 5b61 	movw	fp, #28001	; 0x6d61
 8005c08:	68be      	ldr	r6, [r7, #8]
 8005c0a:	61ed      	str	r5, [r5, #28]
 8005c0c:	f646 5a85 	movw	sl, #28037	; 0x6d85
 8005c10:	f646 59bd 	movw	r9, #28093	; 0x6dbd
 8005c14:	f646 58dd 	movw	r8, #28125	; 0x6ddd
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f6c0 0b00 	movt	fp, #2048	; 0x800
 8005c1e:	f6c0 0a00 	movt	sl, #2048	; 0x800
 8005c22:	f6c0 0900 	movt	r9, #2048	; 0x800
 8005c26:	f6c0 0800 	movt	r8, #2048	; 0x800
 8005c2a:	2209      	movs	r2, #9
 8005c2c:	f8c5 b020 	str.w	fp, [r5, #32]
 8005c30:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8005c34:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8005c38:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8005c3c:	4621      	mov	r1, r4
 8005c3e:	81f3      	strh	r3, [r6, #14]
 8005c40:	81b2      	strh	r2, [r6, #12]
 8005c42:	6034      	str	r4, [r6, #0]
 8005c44:	6074      	str	r4, [r6, #4]
 8005c46:	60b4      	str	r4, [r6, #8]
 8005c48:	6674      	str	r4, [r6, #100]	; 0x64
 8005c4a:	6134      	str	r4, [r6, #16]
 8005c4c:	6174      	str	r4, [r6, #20]
 8005c4e:	61b4      	str	r4, [r6, #24]
 8005c50:	2208      	movs	r2, #8
 8005c52:	f106 005c 	add.w	r0, r6, #92	; 0x5c
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	f7ff fbae 	bl	80053b8 <memset>
 8005c5c:	68fd      	ldr	r5, [r7, #12]
 8005c5e:	f8c6 b020 	str.w	fp, [r6, #32]
 8005c62:	2012      	movs	r0, #18
 8005c64:	2202      	movs	r2, #2
 8005c66:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
 8005c6a:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
 8005c6e:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
 8005c72:	61f6      	str	r6, [r6, #28]
 8005c74:	4621      	mov	r1, r4
 8005c76:	81a8      	strh	r0, [r5, #12]
 8005c78:	81ea      	strh	r2, [r5, #14]
 8005c7a:	602c      	str	r4, [r5, #0]
 8005c7c:	606c      	str	r4, [r5, #4]
 8005c7e:	60ac      	str	r4, [r5, #8]
 8005c80:	666c      	str	r4, [r5, #100]	; 0x64
 8005c82:	612c      	str	r4, [r5, #16]
 8005c84:	616c      	str	r4, [r5, #20]
 8005c86:	61ac      	str	r4, [r5, #24]
 8005c88:	f105 005c 	add.w	r0, r5, #92	; 0x5c
 8005c8c:	2208      	movs	r2, #8
 8005c8e:	f7ff fb93 	bl	80053b8 <memset>
 8005c92:	9b01      	ldr	r3, [sp, #4]
 8005c94:	f8c5 b020 	str.w	fp, [r5, #32]
 8005c98:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
 8005c9c:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
 8005ca0:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
 8005ca4:	61ed      	str	r5, [r5, #28]
 8005ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ca8:	b003      	add	sp, #12
 8005caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cae:	bf00      	nop

08005cb0 <__sfp_lock_acquire>:
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop

08005cb4 <__sfp_lock_release>:
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop

08005cb8 <_malloc_trim_r>:
 8005cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cba:	f240 642c 	movw	r4, #1580	; 0x62c
 8005cbe:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005cc2:	460f      	mov	r7, r1
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	f000 fe2b 	bl	8006920 <__malloc_lock>
 8005cca:	68a3      	ldr	r3, [r4, #8]
 8005ccc:	685e      	ldr	r6, [r3, #4]
 8005cce:	f026 0603 	bic.w	r6, r6, #3
 8005cd2:	1bf7      	subs	r7, r6, r7
 8005cd4:	f607 77ef 	addw	r7, r7, #4079	; 0xfef
 8005cd8:	0b3f      	lsrs	r7, r7, #12
 8005cda:	3f01      	subs	r7, #1
 8005cdc:	033f      	lsls	r7, r7, #12
 8005cde:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
 8005ce2:	db07      	blt.n	8005cf4 <_malloc_trim_r+0x3c>
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	f7fa fe0e 	bl	8000908 <_sbrk_r>
 8005cec:	68a3      	ldr	r3, [r4, #8]
 8005cee:	4433      	add	r3, r6
 8005cf0:	4298      	cmp	r0, r3
 8005cf2:	d004      	beq.n	8005cfe <_malloc_trim_r+0x46>
 8005cf4:	4628      	mov	r0, r5
 8005cf6:	f000 fe15 	bl	8006924 <__malloc_unlock>
 8005cfa:	2000      	movs	r0, #0
 8005cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005cfe:	4628      	mov	r0, r5
 8005d00:	4279      	negs	r1, r7
 8005d02:	f7fa fe01 	bl	8000908 <_sbrk_r>
 8005d06:	3001      	adds	r0, #1
 8005d08:	d010      	beq.n	8005d2c <_malloc_trim_r+0x74>
 8005d0a:	f640 6374 	movw	r3, #3700	; 0xe74
 8005d0e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005d12:	68a1      	ldr	r1, [r4, #8]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	1bf6      	subs	r6, r6, r7
 8005d18:	f046 0601 	orr.w	r6, r6, #1
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	1bd7      	subs	r7, r2, r7
 8005d20:	604e      	str	r6, [r1, #4]
 8005d22:	601f      	str	r7, [r3, #0]
 8005d24:	f000 fdfe 	bl	8006924 <__malloc_unlock>
 8005d28:	2001      	movs	r0, #1
 8005d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d2c:	4628      	mov	r0, r5
 8005d2e:	2100      	movs	r1, #0
 8005d30:	f7fa fdea 	bl	8000908 <_sbrk_r>
 8005d34:	68a3      	ldr	r3, [r4, #8]
 8005d36:	1ac2      	subs	r2, r0, r3
 8005d38:	2a0f      	cmp	r2, #15
 8005d3a:	dddb      	ble.n	8005cf4 <_malloc_trim_r+0x3c>
 8005d3c:	f640 2438 	movw	r4, #2616	; 0xa38
 8005d40:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005d44:	f640 6174 	movw	r1, #3700	; 0xe74
 8005d48:	6824      	ldr	r4, [r4, #0]
 8005d4a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005d4e:	f042 0201 	orr.w	r2, r2, #1
 8005d52:	1b00      	subs	r0, r0, r4
 8005d54:	605a      	str	r2, [r3, #4]
 8005d56:	6008      	str	r0, [r1, #0]
 8005d58:	e7cc      	b.n	8005cf4 <_malloc_trim_r+0x3c>
 8005d5a:	bf00      	nop

08005d5c <_free_r>:
 8005d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d60:	460e      	mov	r6, r1
 8005d62:	4681      	mov	r9, r0
 8005d64:	2900      	cmp	r1, #0
 8005d66:	d060      	beq.n	8005e2a <_free_r+0xce>
 8005d68:	f000 fdda 	bl	8006920 <__malloc_lock>
 8005d6c:	f856 1c04 	ldr.w	r1, [r6, #-4]
 8005d70:	f1a6 0408 	sub.w	r4, r6, #8
 8005d74:	f021 0301 	bic.w	r3, r1, #1
 8005d78:	18e2      	adds	r2, r4, r3
 8005d7a:	f240 652c 	movw	r5, #1580	; 0x62c
 8005d7e:	6857      	ldr	r7, [r2, #4]
 8005d80:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8005d84:	f027 0003 	bic.w	r0, r7, #3
 8005d88:	68af      	ldr	r7, [r5, #8]
 8005d8a:	4297      	cmp	r7, r2
 8005d8c:	d063      	beq.n	8005e56 <_free_r+0xfa>
 8005d8e:	f011 0c01 	ands.w	ip, r1, #1
 8005d92:	6050      	str	r0, [r2, #4]
 8005d94:	bf18      	it	ne
 8005d96:	2100      	movne	r1, #0
 8005d98:	d111      	bne.n	8005dbe <_free_r+0x62>
 8005d9a:	f856 1c08 	ldr.w	r1, [r6, #-8]
 8005d9e:	1a64      	subs	r4, r4, r1
 8005da0:	f105 0808 	add.w	r8, r5, #8
 8005da4:	68a6      	ldr	r6, [r4, #8]
 8005da6:	4546      	cmp	r6, r8
 8005da8:	bf18      	it	ne
 8005daa:	f8d4 800c 	ldrne.w	r8, [r4, #12]
 8005dae:	440b      	add	r3, r1
 8005db0:	bf1d      	ittte	ne
 8005db2:	f8c6 800c 	strne.w	r8, [r6, #12]
 8005db6:	4661      	movne	r1, ip
 8005db8:	f8c8 6008 	strne.w	r6, [r8, #8]
 8005dbc:	2101      	moveq	r1, #1
 8005dbe:	1816      	adds	r6, r2, r0
 8005dc0:	6876      	ldr	r6, [r6, #4]
 8005dc2:	07f6      	lsls	r6, r6, #31
 8005dc4:	d408      	bmi.n	8005dd8 <_free_r+0x7c>
 8005dc6:	4403      	add	r3, r0
 8005dc8:	6890      	ldr	r0, [r2, #8]
 8005dca:	b911      	cbnz	r1, 8005dd2 <_free_r+0x76>
 8005dcc:	4e49      	ldr	r6, [pc, #292]	; (8005ef4 <_free_r+0x198>)
 8005dce:	42b0      	cmp	r0, r6
 8005dd0:	d060      	beq.n	8005e94 <_free_r+0x138>
 8005dd2:	68d2      	ldr	r2, [r2, #12]
 8005dd4:	60c2      	str	r2, [r0, #12]
 8005dd6:	6090      	str	r0, [r2, #8]
 8005dd8:	f043 0201 	orr.w	r2, r3, #1
 8005ddc:	6062      	str	r2, [r4, #4]
 8005dde:	50e3      	str	r3, [r4, r3]
 8005de0:	b9f1      	cbnz	r1, 8005e20 <_free_r+0xc4>
 8005de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005de6:	d322      	bcc.n	8005e2e <_free_r+0xd2>
 8005de8:	0a5a      	lsrs	r2, r3, #9
 8005dea:	2a04      	cmp	r2, #4
 8005dec:	d85b      	bhi.n	8005ea6 <_free_r+0x14a>
 8005dee:	0998      	lsrs	r0, r3, #6
 8005df0:	3038      	adds	r0, #56	; 0x38
 8005df2:	0041      	lsls	r1, r0, #1
 8005df4:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8005df8:	f240 612c 	movw	r1, #1580	; 0x62c
 8005dfc:	68aa      	ldr	r2, [r5, #8]
 8005dfe:	42aa      	cmp	r2, r5
 8005e00:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005e04:	d05b      	beq.n	8005ebe <_free_r+0x162>
 8005e06:	6851      	ldr	r1, [r2, #4]
 8005e08:	f021 0103 	bic.w	r1, r1, #3
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	d202      	bcs.n	8005e16 <_free_r+0xba>
 8005e10:	6892      	ldr	r2, [r2, #8]
 8005e12:	4295      	cmp	r5, r2
 8005e14:	d1f7      	bne.n	8005e06 <_free_r+0xaa>
 8005e16:	68d3      	ldr	r3, [r2, #12]
 8005e18:	60e3      	str	r3, [r4, #12]
 8005e1a:	60a2      	str	r2, [r4, #8]
 8005e1c:	609c      	str	r4, [r3, #8]
 8005e1e:	60d4      	str	r4, [r2, #12]
 8005e20:	4648      	mov	r0, r9
 8005e22:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e26:	f000 bd7d 	b.w	8006924 <__malloc_unlock>
 8005e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e2e:	08db      	lsrs	r3, r3, #3
 8005e30:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8005e34:	6868      	ldr	r0, [r5, #4]
 8005e36:	6891      	ldr	r1, [r2, #8]
 8005e38:	60e2      	str	r2, [r4, #12]
 8005e3a:	2601      	movs	r6, #1
 8005e3c:	109b      	asrs	r3, r3, #2
 8005e3e:	fa06 f303 	lsl.w	r3, r6, r3
 8005e42:	4318      	orrs	r0, r3
 8005e44:	60a1      	str	r1, [r4, #8]
 8005e46:	6068      	str	r0, [r5, #4]
 8005e48:	6094      	str	r4, [r2, #8]
 8005e4a:	4648      	mov	r0, r9
 8005e4c:	60cc      	str	r4, [r1, #12]
 8005e4e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e52:	f000 bd67 	b.w	8006924 <__malloc_unlock>
 8005e56:	07cf      	lsls	r7, r1, #31
 8005e58:	4418      	add	r0, r3
 8005e5a:	d407      	bmi.n	8005e6c <_free_r+0x110>
 8005e5c:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8005e60:	1ae4      	subs	r4, r4, r3
 8005e62:	4418      	add	r0, r3
 8005e64:	68a2      	ldr	r2, [r4, #8]
 8005e66:	68e3      	ldr	r3, [r4, #12]
 8005e68:	60d3      	str	r3, [r2, #12]
 8005e6a:	609a      	str	r2, [r3, #8]
 8005e6c:	f640 2234 	movw	r2, #2612	; 0xa34
 8005e70:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005e74:	f040 0101 	orr.w	r1, r0, #1
 8005e78:	6813      	ldr	r3, [r2, #0]
 8005e7a:	6061      	str	r1, [r4, #4]
 8005e7c:	4298      	cmp	r0, r3
 8005e7e:	60ac      	str	r4, [r5, #8]
 8005e80:	d3ce      	bcc.n	8005e20 <_free_r+0xc4>
 8005e82:	f640 6370 	movw	r3, #3696	; 0xe70
 8005e86:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005e8a:	4648      	mov	r0, r9
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	f7ff ff13 	bl	8005cb8 <_malloc_trim_r>
 8005e92:	e7c5      	b.n	8005e20 <_free_r+0xc4>
 8005e94:	f043 0201 	orr.w	r2, r3, #1
 8005e98:	616c      	str	r4, [r5, #20]
 8005e9a:	612c      	str	r4, [r5, #16]
 8005e9c:	60e0      	str	r0, [r4, #12]
 8005e9e:	60a0      	str	r0, [r4, #8]
 8005ea0:	6062      	str	r2, [r4, #4]
 8005ea2:	50e3      	str	r3, [r4, r3]
 8005ea4:	e7bc      	b.n	8005e20 <_free_r+0xc4>
 8005ea6:	2a14      	cmp	r2, #20
 8005ea8:	bf9c      	itt	ls
 8005eaa:	f102 005b 	addls.w	r0, r2, #91	; 0x5b
 8005eae:	0041      	lslls	r1, r0, #1
 8005eb0:	d9a0      	bls.n	8005df4 <_free_r+0x98>
 8005eb2:	2a54      	cmp	r2, #84	; 0x54
 8005eb4:	d80c      	bhi.n	8005ed0 <_free_r+0x174>
 8005eb6:	0b18      	lsrs	r0, r3, #12
 8005eb8:	306e      	adds	r0, #110	; 0x6e
 8005eba:	0041      	lsls	r1, r0, #1
 8005ebc:	e79a      	b.n	8005df4 <_free_r+0x98>
 8005ebe:	684b      	ldr	r3, [r1, #4]
 8005ec0:	1080      	asrs	r0, r0, #2
 8005ec2:	2501      	movs	r5, #1
 8005ec4:	fa05 f000 	lsl.w	r0, r5, r0
 8005ec8:	4303      	orrs	r3, r0
 8005eca:	604b      	str	r3, [r1, #4]
 8005ecc:	4613      	mov	r3, r2
 8005ece:	e7a3      	b.n	8005e18 <_free_r+0xbc>
 8005ed0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005ed4:	d803      	bhi.n	8005ede <_free_r+0x182>
 8005ed6:	0bd8      	lsrs	r0, r3, #15
 8005ed8:	3077      	adds	r0, #119	; 0x77
 8005eda:	0041      	lsls	r1, r0, #1
 8005edc:	e78a      	b.n	8005df4 <_free_r+0x98>
 8005ede:	f240 5154 	movw	r1, #1364	; 0x554
 8005ee2:	428a      	cmp	r2, r1
 8005ee4:	bf9d      	ittte	ls
 8005ee6:	0c98      	lsrls	r0, r3, #18
 8005ee8:	307c      	addls	r0, #124	; 0x7c
 8005eea:	0041      	lslls	r1, r0, #1
 8005eec:	21fc      	movhi	r1, #252	; 0xfc
 8005eee:	bf88      	it	hi
 8005ef0:	207e      	movhi	r0, #126	; 0x7e
 8005ef2:	e77f      	b.n	8005df4 <_free_r+0x98>
 8005ef4:	20000634 	.word	0x20000634

08005ef8 <__sfvwrite_r>:
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	6893      	ldr	r3, [r2, #8]
 8005efe:	b083      	sub	sp, #12
 8005f00:	4616      	mov	r6, r2
 8005f02:	4681      	mov	r9, r0
 8005f04:	460c      	mov	r4, r1
 8005f06:	b33b      	cbz	r3, 8005f58 <__sfvwrite_r+0x60>
 8005f08:	898b      	ldrh	r3, [r1, #12]
 8005f0a:	0719      	lsls	r1, r3, #28
 8005f0c:	d528      	bpl.n	8005f60 <__sfvwrite_r+0x68>
 8005f0e:	6922      	ldr	r2, [r4, #16]
 8005f10:	b332      	cbz	r2, 8005f60 <__sfvwrite_r+0x68>
 8005f12:	f003 0202 	and.w	r2, r3, #2
 8005f16:	b292      	uxth	r2, r2
 8005f18:	6835      	ldr	r5, [r6, #0]
 8005f1a:	2a00      	cmp	r2, #0
 8005f1c:	d02e      	beq.n	8005f7c <__sfvwrite_r+0x84>
 8005f1e:	f04f 0a00 	mov.w	sl, #0
 8005f22:	f44f 4b7c 	mov.w	fp, #64512	; 0xfc00
 8005f26:	46d0      	mov	r8, sl
 8005f28:	f6c7 7bff 	movt	fp, #32767	; 0x7fff
 8005f2c:	45d8      	cmp	r8, fp
 8005f2e:	bf34      	ite	cc
 8005f30:	4643      	movcc	r3, r8
 8005f32:	465b      	movcs	r3, fp
 8005f34:	4652      	mov	r2, sl
 8005f36:	4648      	mov	r0, r9
 8005f38:	f1b8 0f00 	cmp.w	r8, #0
 8005f3c:	d04f      	beq.n	8005fde <__sfvwrite_r+0xe6>
 8005f3e:	69e1      	ldr	r1, [r4, #28]
 8005f40:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8005f42:	47b8      	blx	r7
 8005f44:	2800      	cmp	r0, #0
 8005f46:	dd56      	ble.n	8005ff6 <__sfvwrite_r+0xfe>
 8005f48:	68b3      	ldr	r3, [r6, #8]
 8005f4a:	1a1b      	subs	r3, r3, r0
 8005f4c:	4482      	add	sl, r0
 8005f4e:	ebc0 0808 	rsb	r8, r0, r8
 8005f52:	60b3      	str	r3, [r6, #8]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1e9      	bne.n	8005f2c <__sfvwrite_r+0x34>
 8005f58:	2000      	movs	r0, #0
 8005f5a:	b003      	add	sp, #12
 8005f5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f60:	4648      	mov	r0, r9
 8005f62:	4621      	mov	r1, r4
 8005f64:	f000 ff90 	bl	8006e88 <__swsetup_r>
 8005f68:	2800      	cmp	r0, #0
 8005f6a:	f040 8147 	bne.w	80061fc <__sfvwrite_r+0x304>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	6835      	ldr	r5, [r6, #0]
 8005f72:	f003 0202 	and.w	r2, r3, #2
 8005f76:	b292      	uxth	r2, r2
 8005f78:	2a00      	cmp	r2, #0
 8005f7a:	d1d0      	bne.n	8005f1e <__sfvwrite_r+0x26>
 8005f7c:	f013 0a01 	ands.w	sl, r3, #1
 8005f80:	d142      	bne.n	8006008 <__sfvwrite_r+0x110>
 8005f82:	46d0      	mov	r8, sl
 8005f84:	f1b8 0f00 	cmp.w	r8, #0
 8005f88:	d023      	beq.n	8005fd2 <__sfvwrite_r+0xda>
 8005f8a:	059a      	lsls	r2, r3, #22
 8005f8c:	68a7      	ldr	r7, [r4, #8]
 8005f8e:	d576      	bpl.n	800607e <__sfvwrite_r+0x186>
 8005f90:	45b8      	cmp	r8, r7
 8005f92:	f0c0 80a4 	bcc.w	80060de <__sfvwrite_r+0x1e6>
 8005f96:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8005f9a:	f040 80b2 	bne.w	8006102 <__sfvwrite_r+0x20a>
 8005f9e:	6820      	ldr	r0, [r4, #0]
 8005fa0:	46bb      	mov	fp, r7
 8005fa2:	4651      	mov	r1, sl
 8005fa4:	465a      	mov	r2, fp
 8005fa6:	f000 fc59 	bl	800685c <memmove>
 8005faa:	68a2      	ldr	r2, [r4, #8]
 8005fac:	6821      	ldr	r1, [r4, #0]
 8005fae:	1bd2      	subs	r2, r2, r7
 8005fb0:	eb01 030b 	add.w	r3, r1, fp
 8005fb4:	60a2      	str	r2, [r4, #8]
 8005fb6:	6023      	str	r3, [r4, #0]
 8005fb8:	4642      	mov	r2, r8
 8005fba:	68b3      	ldr	r3, [r6, #8]
 8005fbc:	1a9b      	subs	r3, r3, r2
 8005fbe:	4492      	add	sl, r2
 8005fc0:	ebc2 0808 	rsb	r8, r2, r8
 8005fc4:	60b3      	str	r3, [r6, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d0c6      	beq.n	8005f58 <__sfvwrite_r+0x60>
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	f1b8 0f00 	cmp.w	r8, #0
 8005fd0:	d1db      	bne.n	8005f8a <__sfvwrite_r+0x92>
 8005fd2:	f8d5 a000 	ldr.w	sl, [r5]
 8005fd6:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005fda:	3508      	adds	r5, #8
 8005fdc:	e7d2      	b.n	8005f84 <__sfvwrite_r+0x8c>
 8005fde:	f8d5 a000 	ldr.w	sl, [r5]
 8005fe2:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8005fe6:	3508      	adds	r5, #8
 8005fe8:	e7a0      	b.n	8005f2c <__sfvwrite_r+0x34>
 8005fea:	4648      	mov	r0, r9
 8005fec:	4621      	mov	r1, r4
 8005fee:	f7ff fdc7 	bl	8005b80 <_fflush_r>
 8005ff2:	2800      	cmp	r0, #0
 8005ff4:	d059      	beq.n	80060aa <__sfvwrite_r+0x1b2>
 8005ff6:	89a3      	ldrh	r3, [r4, #12]
 8005ff8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ffc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006000:	81a3      	strh	r3, [r4, #12]
 8006002:	b003      	add	sp, #12
 8006004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	4692      	mov	sl, r2
 800600a:	9201      	str	r2, [sp, #4]
 800600c:	4693      	mov	fp, r2
 800600e:	4690      	mov	r8, r2
 8006010:	f1b8 0f00 	cmp.w	r8, #0
 8006014:	d02b      	beq.n	800606e <__sfvwrite_r+0x176>
 8006016:	9f01      	ldr	r7, [sp, #4]
 8006018:	2f00      	cmp	r7, #0
 800601a:	d064      	beq.n	80060e6 <__sfvwrite_r+0x1ee>
 800601c:	6820      	ldr	r0, [r4, #0]
 800601e:	6921      	ldr	r1, [r4, #16]
 8006020:	f8d4 c008 	ldr.w	ip, [r4, #8]
 8006024:	6962      	ldr	r2, [r4, #20]
 8006026:	45c2      	cmp	sl, r8
 8006028:	bf34      	ite	cc
 800602a:	4653      	movcc	r3, sl
 800602c:	4643      	movcs	r3, r8
 800602e:	4288      	cmp	r0, r1
 8006030:	461f      	mov	r7, r3
 8006032:	d903      	bls.n	800603c <__sfvwrite_r+0x144>
 8006034:	4494      	add	ip, r2
 8006036:	4563      	cmp	r3, ip
 8006038:	f300 80ae 	bgt.w	8006198 <__sfvwrite_r+0x2a0>
 800603c:	4293      	cmp	r3, r2
 800603e:	db36      	blt.n	80060ae <__sfvwrite_r+0x1b6>
 8006040:	4613      	mov	r3, r2
 8006042:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006044:	69e1      	ldr	r1, [r4, #28]
 8006046:	4648      	mov	r0, r9
 8006048:	465a      	mov	r2, fp
 800604a:	47b8      	blx	r7
 800604c:	1e07      	subs	r7, r0, #0
 800604e:	ddd2      	ble.n	8005ff6 <__sfvwrite_r+0xfe>
 8006050:	ebba 0a07 	subs.w	sl, sl, r7
 8006054:	d03a      	beq.n	80060cc <__sfvwrite_r+0x1d4>
 8006056:	68b3      	ldr	r3, [r6, #8]
 8006058:	1bdb      	subs	r3, r3, r7
 800605a:	44bb      	add	fp, r7
 800605c:	ebc7 0808 	rsb	r8, r7, r8
 8006060:	60b3      	str	r3, [r6, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f43f af78 	beq.w	8005f58 <__sfvwrite_r+0x60>
 8006068:	f1b8 0f00 	cmp.w	r8, #0
 800606c:	d1d3      	bne.n	8006016 <__sfvwrite_r+0x11e>
 800606e:	2700      	movs	r7, #0
 8006070:	f8d5 b000 	ldr.w	fp, [r5]
 8006074:	f8d5 8004 	ldr.w	r8, [r5, #4]
 8006078:	9701      	str	r7, [sp, #4]
 800607a:	3508      	adds	r5, #8
 800607c:	e7c8      	b.n	8006010 <__sfvwrite_r+0x118>
 800607e:	6820      	ldr	r0, [r4, #0]
 8006080:	6923      	ldr	r3, [r4, #16]
 8006082:	4298      	cmp	r0, r3
 8006084:	d802      	bhi.n	800608c <__sfvwrite_r+0x194>
 8006086:	6963      	ldr	r3, [r4, #20]
 8006088:	4598      	cmp	r8, r3
 800608a:	d272      	bcs.n	8006172 <__sfvwrite_r+0x27a>
 800608c:	45b8      	cmp	r8, r7
 800608e:	bf38      	it	cc
 8006090:	4647      	movcc	r7, r8
 8006092:	463a      	mov	r2, r7
 8006094:	4651      	mov	r1, sl
 8006096:	f000 fbe1 	bl	800685c <memmove>
 800609a:	68a3      	ldr	r3, [r4, #8]
 800609c:	6822      	ldr	r2, [r4, #0]
 800609e:	1bdb      	subs	r3, r3, r7
 80060a0:	443a      	add	r2, r7
 80060a2:	60a3      	str	r3, [r4, #8]
 80060a4:	6022      	str	r2, [r4, #0]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d09f      	beq.n	8005fea <__sfvwrite_r+0xf2>
 80060aa:	463a      	mov	r2, r7
 80060ac:	e785      	b.n	8005fba <__sfvwrite_r+0xc2>
 80060ae:	461a      	mov	r2, r3
 80060b0:	4659      	mov	r1, fp
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	f000 fbd2 	bl	800685c <memmove>
 80060b8:	9b00      	ldr	r3, [sp, #0]
 80060ba:	68a1      	ldr	r1, [r4, #8]
 80060bc:	6822      	ldr	r2, [r4, #0]
 80060be:	1ac9      	subs	r1, r1, r3
 80060c0:	ebba 0a07 	subs.w	sl, sl, r7
 80060c4:	4413      	add	r3, r2
 80060c6:	60a1      	str	r1, [r4, #8]
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	d1c4      	bne.n	8006056 <__sfvwrite_r+0x15e>
 80060cc:	4648      	mov	r0, r9
 80060ce:	4621      	mov	r1, r4
 80060d0:	f7ff fd56 	bl	8005b80 <_fflush_r>
 80060d4:	2800      	cmp	r0, #0
 80060d6:	d18e      	bne.n	8005ff6 <__sfvwrite_r+0xfe>
 80060d8:	f8cd a004 	str.w	sl, [sp, #4]
 80060dc:	e7bb      	b.n	8006056 <__sfvwrite_r+0x15e>
 80060de:	6820      	ldr	r0, [r4, #0]
 80060e0:	4647      	mov	r7, r8
 80060e2:	46c3      	mov	fp, r8
 80060e4:	e75d      	b.n	8005fa2 <__sfvwrite_r+0xaa>
 80060e6:	4658      	mov	r0, fp
 80060e8:	210a      	movs	r1, #10
 80060ea:	4642      	mov	r2, r8
 80060ec:	f000 fb6e 	bl	80067cc <memchr>
 80060f0:	2800      	cmp	r0, #0
 80060f2:	d07e      	beq.n	80061f2 <__sfvwrite_r+0x2fa>
 80060f4:	f100 0a01 	add.w	sl, r0, #1
 80060f8:	2701      	movs	r7, #1
 80060fa:	ebcb 0a0a 	rsb	sl, fp, sl
 80060fe:	9701      	str	r7, [sp, #4]
 8006100:	e78c      	b.n	800601c <__sfvwrite_r+0x124>
 8006102:	6822      	ldr	r2, [r4, #0]
 8006104:	6921      	ldr	r1, [r4, #16]
 8006106:	6967      	ldr	r7, [r4, #20]
 8006108:	ebc1 0c02 	rsb	ip, r1, r2
 800610c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8006110:	f10c 0201 	add.w	r2, ip, #1
 8006114:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
 8006118:	4442      	add	r2, r8
 800611a:	107f      	asrs	r7, r7, #1
 800611c:	4297      	cmp	r7, r2
 800611e:	bf34      	ite	cc
 8006120:	4617      	movcc	r7, r2
 8006122:	463a      	movcs	r2, r7
 8006124:	055b      	lsls	r3, r3, #21
 8006126:	d54d      	bpl.n	80061c4 <__sfvwrite_r+0x2cc>
 8006128:	4611      	mov	r1, r2
 800612a:	4648      	mov	r0, r9
 800612c:	f8cd c000 	str.w	ip, [sp]
 8006130:	f000 f89a 	bl	8006268 <_malloc_r>
 8006134:	f8dd c000 	ldr.w	ip, [sp]
 8006138:	4683      	mov	fp, r0
 800613a:	2800      	cmp	r0, #0
 800613c:	d061      	beq.n	8006202 <__sfvwrite_r+0x30a>
 800613e:	4662      	mov	r2, ip
 8006140:	6921      	ldr	r1, [r4, #16]
 8006142:	f8cd c000 	str.w	ip, [sp]
 8006146:	f7fa f8a1 	bl	800028c <memcpy>
 800614a:	89a2      	ldrh	r2, [r4, #12]
 800614c:	f8dd c000 	ldr.w	ip, [sp]
 8006150:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006154:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006158:	81a2      	strh	r2, [r4, #12]
 800615a:	eb0b 000c 	add.w	r0, fp, ip
 800615e:	ebcc 0207 	rsb	r2, ip, r7
 8006162:	f8c4 b010 	str.w	fp, [r4, #16]
 8006166:	6167      	str	r7, [r4, #20]
 8006168:	6020      	str	r0, [r4, #0]
 800616a:	60a2      	str	r2, [r4, #8]
 800616c:	4647      	mov	r7, r8
 800616e:	46c3      	mov	fp, r8
 8006170:	e717      	b.n	8005fa2 <__sfvwrite_r+0xaa>
 8006172:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8006176:	4590      	cmp	r8, r2
 8006178:	bf38      	it	cc
 800617a:	4642      	movcc	r2, r8
 800617c:	fb92 f2f3 	sdiv	r2, r2, r3
 8006180:	fb02 f303 	mul.w	r3, r2, r3
 8006184:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006186:	69e1      	ldr	r1, [r4, #28]
 8006188:	4648      	mov	r0, r9
 800618a:	4652      	mov	r2, sl
 800618c:	47b8      	blx	r7
 800618e:	2800      	cmp	r0, #0
 8006190:	f77f af31 	ble.w	8005ff6 <__sfvwrite_r+0xfe>
 8006194:	4602      	mov	r2, r0
 8006196:	e710      	b.n	8005fba <__sfvwrite_r+0xc2>
 8006198:	4662      	mov	r2, ip
 800619a:	4659      	mov	r1, fp
 800619c:	f8cd c000 	str.w	ip, [sp]
 80061a0:	f000 fb5c 	bl	800685c <memmove>
 80061a4:	f8dd c000 	ldr.w	ip, [sp]
 80061a8:	6823      	ldr	r3, [r4, #0]
 80061aa:	4463      	add	r3, ip
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	4648      	mov	r0, r9
 80061b0:	4621      	mov	r1, r4
 80061b2:	f7ff fce5 	bl	8005b80 <_fflush_r>
 80061b6:	f8dd c000 	ldr.w	ip, [sp]
 80061ba:	2800      	cmp	r0, #0
 80061bc:	f47f af1b 	bne.w	8005ff6 <__sfvwrite_r+0xfe>
 80061c0:	4667      	mov	r7, ip
 80061c2:	e745      	b.n	8006050 <__sfvwrite_r+0x158>
 80061c4:	4648      	mov	r0, r9
 80061c6:	f8cd c000 	str.w	ip, [sp]
 80061ca:	f000 fbd9 	bl	8006980 <_realloc_r>
 80061ce:	f8dd c000 	ldr.w	ip, [sp]
 80061d2:	4683      	mov	fp, r0
 80061d4:	2800      	cmp	r0, #0
 80061d6:	d1c0      	bne.n	800615a <__sfvwrite_r+0x262>
 80061d8:	4648      	mov	r0, r9
 80061da:	6921      	ldr	r1, [r4, #16]
 80061dc:	f7ff fdbe 	bl	8005d5c <_free_r>
 80061e0:	89a3      	ldrh	r3, [r4, #12]
 80061e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061e6:	041b      	lsls	r3, r3, #16
 80061e8:	220c      	movs	r2, #12
 80061ea:	0c1b      	lsrs	r3, r3, #16
 80061ec:	f8c9 2000 	str.w	r2, [r9]
 80061f0:	e702      	b.n	8005ff8 <__sfvwrite_r+0x100>
 80061f2:	2701      	movs	r7, #1
 80061f4:	f108 0a01 	add.w	sl, r8, #1
 80061f8:	9701      	str	r7, [sp, #4]
 80061fa:	e70f      	b.n	800601c <__sfvwrite_r+0x124>
 80061fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006200:	e6ab      	b.n	8005f5a <__sfvwrite_r+0x62>
 8006202:	230c      	movs	r3, #12
 8006204:	f8c9 3000 	str.w	r3, [r9]
 8006208:	89a3      	ldrh	r3, [r4, #12]
 800620a:	e6f5      	b.n	8005ff8 <__sfvwrite_r+0x100>

0800620c <_fwalk>:
 800620c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006210:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
 8006214:	4688      	mov	r8, r1
 8006216:	d01a      	beq.n	800624e <_fwalk+0x42>
 8006218:	2600      	movs	r6, #0
 800621a:	687d      	ldr	r5, [r7, #4]
 800621c:	68bc      	ldr	r4, [r7, #8]
 800621e:	3d01      	subs	r5, #1
 8006220:	d40f      	bmi.n	8006242 <_fwalk+0x36>
 8006222:	89a3      	ldrh	r3, [r4, #12]
 8006224:	2b01      	cmp	r3, #1
 8006226:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
 800622a:	d906      	bls.n	800623a <_fwalk+0x2e>
 800622c:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8006230:	3301      	adds	r3, #1
 8006232:	4620      	mov	r0, r4
 8006234:	d001      	beq.n	800623a <_fwalk+0x2e>
 8006236:	47c0      	blx	r8
 8006238:	4306      	orrs	r6, r0
 800623a:	1c6b      	adds	r3, r5, #1
 800623c:	f104 0468 	add.w	r4, r4, #104	; 0x68
 8006240:	d1ef      	bne.n	8006222 <_fwalk+0x16>
 8006242:	683f      	ldr	r7, [r7, #0]
 8006244:	2f00      	cmp	r7, #0
 8006246:	d1e8      	bne.n	800621a <_fwalk+0xe>
 8006248:	4630      	mov	r0, r6
 800624a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800624e:	463e      	mov	r6, r7
 8006250:	4630      	mov	r0, r6
 8006252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006256:	bf00      	nop

08006258 <malloc>:
 8006258:	f240 6328 	movw	r3, #1576	; 0x628
 800625c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006260:	4601      	mov	r1, r0
 8006262:	6818      	ldr	r0, [r3, #0]
 8006264:	f000 b800 	b.w	8006268 <_malloc_r>

08006268 <_malloc_r>:
 8006268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800626c:	f101 050b 	add.w	r5, r1, #11
 8006270:	2d16      	cmp	r5, #22
 8006272:	bf87      	ittee	hi
 8006274:	f025 0507 	bichi.w	r5, r5, #7
 8006278:	0feb      	lsrhi	r3, r5, #31
 800627a:	2300      	movls	r3, #0
 800627c:	2510      	movls	r5, #16
 800627e:	428d      	cmp	r5, r1
 8006280:	bf2c      	ite	cs
 8006282:	4619      	movcs	r1, r3
 8006284:	f043 0101 	orrcc.w	r1, r3, #1
 8006288:	b083      	sub	sp, #12
 800628a:	4607      	mov	r7, r0
 800628c:	2900      	cmp	r1, #0
 800628e:	f040 80b5 	bne.w	80063fc <_malloc_r+0x194>
 8006292:	f000 fb45 	bl	8006920 <__malloc_lock>
 8006296:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800629a:	d21f      	bcs.n	80062dc <_malloc_r+0x74>
 800629c:	f240 662c 	movw	r6, #1580	; 0x62c
 80062a0:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80062a4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
 80062a8:	eb06 03cc 	add.w	r3, r6, ip, lsl #3
 80062ac:	68dc      	ldr	r4, [r3, #12]
 80062ae:	429c      	cmp	r4, r3
 80062b0:	f000 81f4 	beq.w	800669c <_malloc_r+0x434>
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	68e2      	ldr	r2, [r4, #12]
 80062b8:	68a1      	ldr	r1, [r4, #8]
 80062ba:	f023 0303 	bic.w	r3, r3, #3
 80062be:	4423      	add	r3, r4
 80062c0:	4638      	mov	r0, r7
 80062c2:	685d      	ldr	r5, [r3, #4]
 80062c4:	60ca      	str	r2, [r1, #12]
 80062c6:	f045 0501 	orr.w	r5, r5, #1
 80062ca:	6091      	str	r1, [r2, #8]
 80062cc:	605d      	str	r5, [r3, #4]
 80062ce:	f000 fb29 	bl	8006924 <__malloc_unlock>
 80062d2:	3408      	adds	r4, #8
 80062d4:	4620      	mov	r0, r4
 80062d6:	b003      	add	sp, #12
 80062d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062dc:	ea5f 2c55 	movs.w	ip, r5, lsr #9
 80062e0:	bf04      	itt	eq
 80062e2:	217e      	moveq	r1, #126	; 0x7e
 80062e4:	f04f 0c3f 	moveq.w	ip, #63	; 0x3f
 80062e8:	f040 808f 	bne.w	800640a <_malloc_r+0x1a2>
 80062ec:	f240 662c 	movw	r6, #1580	; 0x62c
 80062f0:	f2c2 0600 	movt	r6, #8192	; 0x2000
 80062f4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
 80062f8:	68cc      	ldr	r4, [r1, #12]
 80062fa:	42a1      	cmp	r1, r4
 80062fc:	d106      	bne.n	800630c <_malloc_r+0xa4>
 80062fe:	e00d      	b.n	800631c <_malloc_r+0xb4>
 8006300:	2b00      	cmp	r3, #0
 8006302:	f280 8163 	bge.w	80065cc <_malloc_r+0x364>
 8006306:	68e4      	ldr	r4, [r4, #12]
 8006308:	42a1      	cmp	r1, r4
 800630a:	d007      	beq.n	800631c <_malloc_r+0xb4>
 800630c:	6862      	ldr	r2, [r4, #4]
 800630e:	f022 0203 	bic.w	r2, r2, #3
 8006312:	1b53      	subs	r3, r2, r5
 8006314:	2b0f      	cmp	r3, #15
 8006316:	ddf3      	ble.n	8006300 <_malloc_r+0x98>
 8006318:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800631c:	f10c 0c01 	add.w	ip, ip, #1
 8006320:	f240 632c 	movw	r3, #1580	; 0x62c
 8006324:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006328:	6934      	ldr	r4, [r6, #16]
 800632a:	f103 0e08 	add.w	lr, r3, #8
 800632e:	4574      	cmp	r4, lr
 8006330:	bf08      	it	eq
 8006332:	685a      	ldreq	r2, [r3, #4]
 8006334:	d022      	beq.n	800637c <_malloc_r+0x114>
 8006336:	6861      	ldr	r1, [r4, #4]
 8006338:	f021 0103 	bic.w	r1, r1, #3
 800633c:	1b4a      	subs	r2, r1, r5
 800633e:	2a0f      	cmp	r2, #15
 8006340:	f300 8190 	bgt.w	8006664 <_malloc_r+0x3fc>
 8006344:	2a00      	cmp	r2, #0
 8006346:	f8c3 e014 	str.w	lr, [r3, #20]
 800634a:	f8c3 e010 	str.w	lr, [r3, #16]
 800634e:	da67      	bge.n	8006420 <_malloc_r+0x1b8>
 8006350:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006354:	f080 815f 	bcs.w	8006616 <_malloc_r+0x3ae>
 8006358:	08c9      	lsrs	r1, r1, #3
 800635a:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
 800635e:	ea4f 08a1 	mov.w	r8, r1, asr #2
 8006362:	685a      	ldr	r2, [r3, #4]
 8006364:	6881      	ldr	r1, [r0, #8]
 8006366:	60e0      	str	r0, [r4, #12]
 8006368:	f04f 0901 	mov.w	r9, #1
 800636c:	fa09 f808 	lsl.w	r8, r9, r8
 8006370:	ea48 0202 	orr.w	r2, r8, r2
 8006374:	60a1      	str	r1, [r4, #8]
 8006376:	605a      	str	r2, [r3, #4]
 8006378:	6084      	str	r4, [r0, #8]
 800637a:	60cc      	str	r4, [r1, #12]
 800637c:	ea4f 03ac 	mov.w	r3, ip, asr #2
 8006380:	2001      	movs	r0, #1
 8006382:	4098      	lsls	r0, r3
 8006384:	4290      	cmp	r0, r2
 8006386:	d858      	bhi.n	800643a <_malloc_r+0x1d2>
 8006388:	4202      	tst	r2, r0
 800638a:	d106      	bne.n	800639a <_malloc_r+0x132>
 800638c:	f02c 0c03 	bic.w	ip, ip, #3
 8006390:	0040      	lsls	r0, r0, #1
 8006392:	4202      	tst	r2, r0
 8006394:	f10c 0c04 	add.w	ip, ip, #4
 8006398:	d0fa      	beq.n	8006390 <_malloc_r+0x128>
 800639a:	eb06 08cc 	add.w	r8, r6, ip, lsl #3
 800639e:	4644      	mov	r4, r8
 80063a0:	46e1      	mov	r9, ip
 80063a2:	68e3      	ldr	r3, [r4, #12]
 80063a4:	429c      	cmp	r4, r3
 80063a6:	d107      	bne.n	80063b8 <_malloc_r+0x150>
 80063a8:	e16f      	b.n	800668a <_malloc_r+0x422>
 80063aa:	2a00      	cmp	r2, #0
 80063ac:	f280 8180 	bge.w	80066b0 <_malloc_r+0x448>
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	429c      	cmp	r4, r3
 80063b4:	f000 8169 	beq.w	800668a <_malloc_r+0x422>
 80063b8:	6859      	ldr	r1, [r3, #4]
 80063ba:	f021 0103 	bic.w	r1, r1, #3
 80063be:	1b4a      	subs	r2, r1, r5
 80063c0:	2a0f      	cmp	r2, #15
 80063c2:	ddf2      	ble.n	80063aa <_malloc_r+0x142>
 80063c4:	461c      	mov	r4, r3
 80063c6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80063ca:	f854 8f08 	ldr.w	r8, [r4, #8]!
 80063ce:	1959      	adds	r1, r3, r5
 80063d0:	f045 0901 	orr.w	r9, r5, #1
 80063d4:	f042 0501 	orr.w	r5, r2, #1
 80063d8:	f8c3 9004 	str.w	r9, [r3, #4]
 80063dc:	4638      	mov	r0, r7
 80063de:	f8c8 c00c 	str.w	ip, [r8, #12]
 80063e2:	f8cc 8008 	str.w	r8, [ip, #8]
 80063e6:	6171      	str	r1, [r6, #20]
 80063e8:	6131      	str	r1, [r6, #16]
 80063ea:	f8c1 e00c 	str.w	lr, [r1, #12]
 80063ee:	f8c1 e008 	str.w	lr, [r1, #8]
 80063f2:	604d      	str	r5, [r1, #4]
 80063f4:	508a      	str	r2, [r1, r2]
 80063f6:	f000 fa95 	bl	8006924 <__malloc_unlock>
 80063fa:	e76b      	b.n	80062d4 <_malloc_r+0x6c>
 80063fc:	230c      	movs	r3, #12
 80063fe:	2400      	movs	r4, #0
 8006400:	6003      	str	r3, [r0, #0]
 8006402:	4620      	mov	r0, r4
 8006404:	b003      	add	sp, #12
 8006406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800640a:	f1bc 0f04 	cmp.w	ip, #4
 800640e:	f200 80ee 	bhi.w	80065ee <_malloc_r+0x386>
 8006412:	ea4f 1c95 	mov.w	ip, r5, lsr #6
 8006416:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 800641a:	ea4f 014c 	mov.w	r1, ip, lsl #1
 800641e:	e765      	b.n	80062ec <_malloc_r+0x84>
 8006420:	4421      	add	r1, r4
 8006422:	4638      	mov	r0, r7
 8006424:	684b      	ldr	r3, [r1, #4]
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	604b      	str	r3, [r1, #4]
 800642c:	f000 fa7a 	bl	8006924 <__malloc_unlock>
 8006430:	3408      	adds	r4, #8
 8006432:	4620      	mov	r0, r4
 8006434:	b003      	add	sp, #12
 8006436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800643a:	68b4      	ldr	r4, [r6, #8]
 800643c:	6863      	ldr	r3, [r4, #4]
 800643e:	f023 0903 	bic.w	r9, r3, #3
 8006442:	454d      	cmp	r5, r9
 8006444:	d804      	bhi.n	8006450 <_malloc_r+0x1e8>
 8006446:	ebc5 0309 	rsb	r3, r5, r9
 800644a:	2b0f      	cmp	r3, #15
 800644c:	f300 80ae 	bgt.w	80065ac <_malloc_r+0x344>
 8006450:	f640 6370 	movw	r3, #3696	; 0xe70
 8006454:	f640 2a38 	movw	sl, #2616	; 0xa38
 8006458:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800645c:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f8da 1000 	ldr.w	r1, [sl]
 8006466:	442b      	add	r3, r5
 8006468:	3101      	adds	r1, #1
 800646a:	bf1d      	ittte	ne
 800646c:	f503 5380 	addne.w	r3, r3, #4096	; 0x1000
 8006470:	330f      	addne	r3, #15
 8006472:	f423 637f 	bicne.w	r3, r3, #4080	; 0xff0
 8006476:	f103 0c10 	addeq.w	ip, r3, #16
 800647a:	bf18      	it	ne
 800647c:	f023 0c0f 	bicne.w	ip, r3, #15
 8006480:	eb04 0209 	add.w	r2, r4, r9
 8006484:	4661      	mov	r1, ip
 8006486:	4638      	mov	r0, r7
 8006488:	9201      	str	r2, [sp, #4]
 800648a:	f8cd c000 	str.w	ip, [sp]
 800648e:	f7fa fa3b 	bl	8000908 <_sbrk_r>
 8006492:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8006496:	4680      	mov	r8, r0
 8006498:	9a01      	ldr	r2, [sp, #4]
 800649a:	f8dd c000 	ldr.w	ip, [sp]
 800649e:	f000 811d 	beq.w	80066dc <_malloc_r+0x474>
 80064a2:	4282      	cmp	r2, r0
 80064a4:	f200 8117 	bhi.w	80066d6 <_malloc_r+0x46e>
 80064a8:	f640 6b74 	movw	fp, #3700	; 0xe74
 80064ac:	f2c2 0b00 	movt	fp, #8192	; 0x2000
 80064b0:	4542      	cmp	r2, r8
 80064b2:	f8db 3000 	ldr.w	r3, [fp]
 80064b6:	4463      	add	r3, ip
 80064b8:	f8cb 3000 	str.w	r3, [fp]
 80064bc:	f000 815d 	beq.w	800677a <_malloc_r+0x512>
 80064c0:	f8da 0000 	ldr.w	r0, [sl]
 80064c4:	f640 2138 	movw	r1, #2616	; 0xa38
 80064c8:	3001      	adds	r0, #1
 80064ca:	bf18      	it	ne
 80064cc:	ebc2 0208 	rsbne	r2, r2, r8
 80064d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80064d4:	bf16      	itet	ne
 80064d6:	189b      	addne	r3, r3, r2
 80064d8:	f8c1 8000 	streq.w	r8, [r1]
 80064dc:	f8cb 3000 	strne.w	r3, [fp]
 80064e0:	f018 0307 	ands.w	r3, r8, #7
 80064e4:	bf1f      	itttt	ne
 80064e6:	f1c3 0208 	rsbne	r2, r3, #8
 80064ea:	4490      	addne	r8, r2
 80064ec:	f5c3 5380 	rsbne	r3, r3, #4096	; 0x1000
 80064f0:	f103 0a08 	addne.w	sl, r3, #8
 80064f4:	eb08 030c 	add.w	r3, r8, ip
 80064f8:	bf08      	it	eq
 80064fa:	f44f 5a80 	moveq.w	sl, #4096	; 0x1000
 80064fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006502:	ebc3 0a0a 	rsb	sl, r3, sl
 8006506:	4651      	mov	r1, sl
 8006508:	4638      	mov	r0, r7
 800650a:	f7fa f9fd 	bl	8000908 <_sbrk_r>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	bf18      	it	ne
 8006512:	ebc8 0200 	rsbne	r2, r8, r0
 8006516:	f8db 3000 	ldr.w	r3, [fp]
 800651a:	f8c6 8008 	str.w	r8, [r6, #8]
 800651e:	bf15      	itete	ne
 8006520:	4452      	addne	r2, sl
 8006522:	f04f 0a00 	moveq.w	sl, #0
 8006526:	f042 0201 	orrne.w	r2, r2, #1
 800652a:	2201      	moveq	r2, #1
 800652c:	4453      	add	r3, sl
 800652e:	42b4      	cmp	r4, r6
 8006530:	f640 6a74 	movw	sl, #3700	; 0xe74
 8006534:	f8c8 2004 	str.w	r2, [r8, #4]
 8006538:	f8cb 3000 	str.w	r3, [fp]
 800653c:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8006540:	d015      	beq.n	800656e <_malloc_r+0x306>
 8006542:	f1b9 0f0f 	cmp.w	r9, #15
 8006546:	f240 80f8 	bls.w	800673a <_malloc_r+0x4d2>
 800654a:	6861      	ldr	r1, [r4, #4]
 800654c:	f1a9 020c 	sub.w	r2, r9, #12
 8006550:	f022 0207 	bic.w	r2, r2, #7
 8006554:	f001 0e01 	and.w	lr, r1, #1
 8006558:	18a1      	adds	r1, r4, r2
 800655a:	2005      	movs	r0, #5
 800655c:	ea42 0e0e 	orr.w	lr, r2, lr
 8006560:	2a0f      	cmp	r2, #15
 8006562:	f8c4 e004 	str.w	lr, [r4, #4]
 8006566:	6048      	str	r0, [r1, #4]
 8006568:	6088      	str	r0, [r1, #8]
 800656a:	f200 8112 	bhi.w	8006792 <_malloc_r+0x52a>
 800656e:	f640 626c 	movw	r2, #3692	; 0xe6c
 8006572:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006576:	68b4      	ldr	r4, [r6, #8]
 8006578:	6811      	ldr	r1, [r2, #0]
 800657a:	428b      	cmp	r3, r1
 800657c:	bf88      	it	hi
 800657e:	6013      	strhi	r3, [r2, #0]
 8006580:	f640 6268 	movw	r2, #3688	; 0xe68
 8006584:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8006588:	6811      	ldr	r1, [r2, #0]
 800658a:	428b      	cmp	r3, r1
 800658c:	bf88      	it	hi
 800658e:	6013      	strhi	r3, [r2, #0]
 8006590:	6862      	ldr	r2, [r4, #4]
 8006592:	f022 0203 	bic.w	r2, r2, #3
 8006596:	4295      	cmp	r5, r2
 8006598:	ebc5 0302 	rsb	r3, r5, r2
 800659c:	d801      	bhi.n	80065a2 <_malloc_r+0x33a>
 800659e:	2b0f      	cmp	r3, #15
 80065a0:	dc04      	bgt.n	80065ac <_malloc_r+0x344>
 80065a2:	4638      	mov	r0, r7
 80065a4:	f000 f9be 	bl	8006924 <__malloc_unlock>
 80065a8:	2400      	movs	r4, #0
 80065aa:	e693      	b.n	80062d4 <_malloc_r+0x6c>
 80065ac:	1962      	adds	r2, r4, r5
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	f045 0501 	orr.w	r5, r5, #1
 80065b6:	6065      	str	r5, [r4, #4]
 80065b8:	4638      	mov	r0, r7
 80065ba:	60b2      	str	r2, [r6, #8]
 80065bc:	6053      	str	r3, [r2, #4]
 80065be:	f000 f9b1 	bl	8006924 <__malloc_unlock>
 80065c2:	3408      	adds	r4, #8
 80065c4:	4620      	mov	r0, r4
 80065c6:	b003      	add	sp, #12
 80065c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065cc:	4422      	add	r2, r4
 80065ce:	68e3      	ldr	r3, [r4, #12]
 80065d0:	6850      	ldr	r0, [r2, #4]
 80065d2:	68a1      	ldr	r1, [r4, #8]
 80065d4:	f040 0501 	orr.w	r5, r0, #1
 80065d8:	60cb      	str	r3, [r1, #12]
 80065da:	4638      	mov	r0, r7
 80065dc:	6099      	str	r1, [r3, #8]
 80065de:	6055      	str	r5, [r2, #4]
 80065e0:	f000 f9a0 	bl	8006924 <__malloc_unlock>
 80065e4:	3408      	adds	r4, #8
 80065e6:	4620      	mov	r0, r4
 80065e8:	b003      	add	sp, #12
 80065ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ee:	f1bc 0f14 	cmp.w	ip, #20
 80065f2:	bf9c      	itt	ls
 80065f4:	f10c 0c5b 	addls.w	ip, ip, #91	; 0x5b
 80065f8:	ea4f 014c 	movls.w	r1, ip, lsl #1
 80065fc:	f67f ae76 	bls.w	80062ec <_malloc_r+0x84>
 8006600:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
 8006604:	f200 808f 	bhi.w	8006726 <_malloc_r+0x4be>
 8006608:	ea4f 3c15 	mov.w	ip, r5, lsr #12
 800660c:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
 8006610:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8006614:	e66a      	b.n	80062ec <_malloc_r+0x84>
 8006616:	0a4b      	lsrs	r3, r1, #9
 8006618:	2b04      	cmp	r3, #4
 800661a:	d958      	bls.n	80066ce <_malloc_r+0x466>
 800661c:	2b14      	cmp	r3, #20
 800661e:	bf9c      	itt	ls
 8006620:	f103 025b 	addls.w	r2, r3, #91	; 0x5b
 8006624:	0050      	lslls	r0, r2, #1
 8006626:	d905      	bls.n	8006634 <_malloc_r+0x3cc>
 8006628:	2b54      	cmp	r3, #84	; 0x54
 800662a:	f200 80ba 	bhi.w	80067a2 <_malloc_r+0x53a>
 800662e:	0b0a      	lsrs	r2, r1, #12
 8006630:	326e      	adds	r2, #110	; 0x6e
 8006632:	0050      	lsls	r0, r2, #1
 8006634:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8006638:	f240 682c 	movw	r8, #1580	; 0x62c
 800663c:	6883      	ldr	r3, [r0, #8]
 800663e:	4283      	cmp	r3, r0
 8006640:	f2c2 0800 	movt	r8, #8192	; 0x2000
 8006644:	d07f      	beq.n	8006746 <_malloc_r+0x4de>
 8006646:	685a      	ldr	r2, [r3, #4]
 8006648:	f022 0203 	bic.w	r2, r2, #3
 800664c:	4291      	cmp	r1, r2
 800664e:	d202      	bcs.n	8006656 <_malloc_r+0x3ee>
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	4298      	cmp	r0, r3
 8006654:	d1f7      	bne.n	8006646 <_malloc_r+0x3de>
 8006656:	68d9      	ldr	r1, [r3, #12]
 8006658:	6872      	ldr	r2, [r6, #4]
 800665a:	60e1      	str	r1, [r4, #12]
 800665c:	60a3      	str	r3, [r4, #8]
 800665e:	608c      	str	r4, [r1, #8]
 8006660:	60dc      	str	r4, [r3, #12]
 8006662:	e68b      	b.n	800637c <_malloc_r+0x114>
 8006664:	1961      	adds	r1, r4, r5
 8006666:	f042 0601 	orr.w	r6, r2, #1
 800666a:	f045 0501 	orr.w	r5, r5, #1
 800666e:	6065      	str	r5, [r4, #4]
 8006670:	4638      	mov	r0, r7
 8006672:	6159      	str	r1, [r3, #20]
 8006674:	6119      	str	r1, [r3, #16]
 8006676:	f8c1 e00c 	str.w	lr, [r1, #12]
 800667a:	f8c1 e008 	str.w	lr, [r1, #8]
 800667e:	604e      	str	r6, [r1, #4]
 8006680:	508a      	str	r2, [r1, r2]
 8006682:	3408      	adds	r4, #8
 8006684:	f000 f94e 	bl	8006924 <__malloc_unlock>
 8006688:	e624      	b.n	80062d4 <_malloc_r+0x6c>
 800668a:	f109 0901 	add.w	r9, r9, #1
 800668e:	f019 0f03 	tst.w	r9, #3
 8006692:	f104 0408 	add.w	r4, r4, #8
 8006696:	f47f ae84 	bne.w	80063a2 <_malloc_r+0x13a>
 800669a:	e028      	b.n	80066ee <_malloc_r+0x486>
 800669c:	f104 0308 	add.w	r3, r4, #8
 80066a0:	6964      	ldr	r4, [r4, #20]
 80066a2:	42a3      	cmp	r3, r4
 80066a4:	bf08      	it	eq
 80066a6:	f10c 0c02 	addeq.w	ip, ip, #2
 80066aa:	f43f ae39 	beq.w	8006320 <_malloc_r+0xb8>
 80066ae:	e601      	b.n	80062b4 <_malloc_r+0x4c>
 80066b0:	4419      	add	r1, r3
 80066b2:	461c      	mov	r4, r3
 80066b4:	6848      	ldr	r0, [r1, #4]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f854 2f08 	ldr.w	r2, [r4, #8]!
 80066bc:	f040 0501 	orr.w	r5, r0, #1
 80066c0:	604d      	str	r5, [r1, #4]
 80066c2:	4638      	mov	r0, r7
 80066c4:	60d3      	str	r3, [r2, #12]
 80066c6:	609a      	str	r2, [r3, #8]
 80066c8:	f000 f92c 	bl	8006924 <__malloc_unlock>
 80066cc:	e602      	b.n	80062d4 <_malloc_r+0x6c>
 80066ce:	098a      	lsrs	r2, r1, #6
 80066d0:	3238      	adds	r2, #56	; 0x38
 80066d2:	0050      	lsls	r0, r2, #1
 80066d4:	e7ae      	b.n	8006634 <_malloc_r+0x3cc>
 80066d6:	42b4      	cmp	r4, r6
 80066d8:	f43f aee6 	beq.w	80064a8 <_malloc_r+0x240>
 80066dc:	68b4      	ldr	r4, [r6, #8]
 80066de:	6862      	ldr	r2, [r4, #4]
 80066e0:	f022 0203 	bic.w	r2, r2, #3
 80066e4:	e757      	b.n	8006596 <_malloc_r+0x32e>
 80066e6:	f8d8 8000 	ldr.w	r8, [r8]
 80066ea:	4598      	cmp	r8, r3
 80066ec:	d16b      	bne.n	80067c6 <_malloc_r+0x55e>
 80066ee:	f01c 0f03 	tst.w	ip, #3
 80066f2:	f1a8 0308 	sub.w	r3, r8, #8
 80066f6:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80066fa:	d1f4      	bne.n	80066e6 <_malloc_r+0x47e>
 80066fc:	6873      	ldr	r3, [r6, #4]
 80066fe:	ea23 0300 	bic.w	r3, r3, r0
 8006702:	6073      	str	r3, [r6, #4]
 8006704:	0040      	lsls	r0, r0, #1
 8006706:	4298      	cmp	r0, r3
 8006708:	f63f ae97 	bhi.w	800643a <_malloc_r+0x1d2>
 800670c:	2800      	cmp	r0, #0
 800670e:	f43f ae94 	beq.w	800643a <_malloc_r+0x1d2>
 8006712:	4203      	tst	r3, r0
 8006714:	46cc      	mov	ip, r9
 8006716:	f47f ae40 	bne.w	800639a <_malloc_r+0x132>
 800671a:	0040      	lsls	r0, r0, #1
 800671c:	4203      	tst	r3, r0
 800671e:	f10c 0c04 	add.w	ip, ip, #4
 8006722:	d0fa      	beq.n	800671a <_malloc_r+0x4b2>
 8006724:	e639      	b.n	800639a <_malloc_r+0x132>
 8006726:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
 800672a:	d817      	bhi.n	800675c <_malloc_r+0x4f4>
 800672c:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
 8006730:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
 8006734:	ea4f 014c 	mov.w	r1, ip, lsl #1
 8006738:	e5d8      	b.n	80062ec <_malloc_r+0x84>
 800673a:	2301      	movs	r3, #1
 800673c:	f8c8 3004 	str.w	r3, [r8, #4]
 8006740:	4644      	mov	r4, r8
 8006742:	2200      	movs	r2, #0
 8006744:	e727      	b.n	8006596 <_malloc_r+0x32e>
 8006746:	1091      	asrs	r1, r2, #2
 8006748:	2001      	movs	r0, #1
 800674a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800674e:	fa00 f101 	lsl.w	r1, r0, r1
 8006752:	430a      	orrs	r2, r1
 8006754:	f8c8 2004 	str.w	r2, [r8, #4]
 8006758:	4619      	mov	r1, r3
 800675a:	e77e      	b.n	800665a <_malloc_r+0x3f2>
 800675c:	f240 5354 	movw	r3, #1364	; 0x554
 8006760:	459c      	cmp	ip, r3
 8006762:	bf9d      	ittte	ls
 8006764:	ea4f 4c95 	movls.w	ip, r5, lsr #18
 8006768:	f10c 0c7c 	addls.w	ip, ip, #124	; 0x7c
 800676c:	ea4f 014c 	movls.w	r1, ip, lsl #1
 8006770:	21fc      	movhi	r1, #252	; 0xfc
 8006772:	bf88      	it	hi
 8006774:	f04f 0c7e 	movhi.w	ip, #126	; 0x7e
 8006778:	e5b8      	b.n	80062ec <_malloc_r+0x84>
 800677a:	f3c2 010b 	ubfx	r1, r2, #0, #12
 800677e:	2900      	cmp	r1, #0
 8006780:	f47f ae9e 	bne.w	80064c0 <_malloc_r+0x258>
 8006784:	eb0c 0109 	add.w	r1, ip, r9
 8006788:	68b2      	ldr	r2, [r6, #8]
 800678a:	f041 0101 	orr.w	r1, r1, #1
 800678e:	6051      	str	r1, [r2, #4]
 8006790:	e6ed      	b.n	800656e <_malloc_r+0x306>
 8006792:	f104 0108 	add.w	r1, r4, #8
 8006796:	4638      	mov	r0, r7
 8006798:	f7ff fae0 	bl	8005d5c <_free_r>
 800679c:	f8da 3000 	ldr.w	r3, [sl]
 80067a0:	e6e5      	b.n	800656e <_malloc_r+0x306>
 80067a2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80067a6:	d803      	bhi.n	80067b0 <_malloc_r+0x548>
 80067a8:	0bca      	lsrs	r2, r1, #15
 80067aa:	3277      	adds	r2, #119	; 0x77
 80067ac:	0050      	lsls	r0, r2, #1
 80067ae:	e741      	b.n	8006634 <_malloc_r+0x3cc>
 80067b0:	f240 5254 	movw	r2, #1364	; 0x554
 80067b4:	4293      	cmp	r3, r2
 80067b6:	bf9d      	ittte	ls
 80067b8:	0c8a      	lsrls	r2, r1, #18
 80067ba:	327c      	addls	r2, #124	; 0x7c
 80067bc:	0050      	lslls	r0, r2, #1
 80067be:	20fc      	movhi	r0, #252	; 0xfc
 80067c0:	bf88      	it	hi
 80067c2:	227e      	movhi	r2, #126	; 0x7e
 80067c4:	e736      	b.n	8006634 <_malloc_r+0x3cc>
 80067c6:	6873      	ldr	r3, [r6, #4]
 80067c8:	e79c      	b.n	8006704 <_malloc_r+0x49c>
 80067ca:	bf00      	nop

080067cc <memchr>:
 80067cc:	0783      	lsls	r3, r0, #30
 80067ce:	b470      	push	{r4, r5, r6}
 80067d0:	b2c9      	uxtb	r1, r1
 80067d2:	d03f      	beq.n	8006854 <memchr+0x88>
 80067d4:	1e54      	subs	r4, r2, #1
 80067d6:	b32a      	cbz	r2, 8006824 <memchr+0x58>
 80067d8:	7803      	ldrb	r3, [r0, #0]
 80067da:	428b      	cmp	r3, r1
 80067dc:	d023      	beq.n	8006826 <memchr+0x5a>
 80067de:	1c43      	adds	r3, r0, #1
 80067e0:	e004      	b.n	80067ec <memchr+0x20>
 80067e2:	b1fc      	cbz	r4, 8006824 <memchr+0x58>
 80067e4:	7804      	ldrb	r4, [r0, #0]
 80067e6:	428c      	cmp	r4, r1
 80067e8:	d01d      	beq.n	8006826 <memchr+0x5a>
 80067ea:	4614      	mov	r4, r2
 80067ec:	f013 0f03 	tst.w	r3, #3
 80067f0:	4618      	mov	r0, r3
 80067f2:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 80067f6:	f103 0301 	add.w	r3, r3, #1
 80067fa:	d1f2      	bne.n	80067e2 <memchr+0x16>
 80067fc:	2c03      	cmp	r4, #3
 80067fe:	d814      	bhi.n	800682a <memchr+0x5e>
 8006800:	1e65      	subs	r5, r4, #1
 8006802:	b34c      	cbz	r4, 8006858 <memchr+0x8c>
 8006804:	7803      	ldrb	r3, [r0, #0]
 8006806:	428b      	cmp	r3, r1
 8006808:	d00d      	beq.n	8006826 <memchr+0x5a>
 800680a:	1c42      	adds	r2, r0, #1
 800680c:	2300      	movs	r3, #0
 800680e:	e002      	b.n	8006816 <memchr+0x4a>
 8006810:	7804      	ldrb	r4, [r0, #0]
 8006812:	428c      	cmp	r4, r1
 8006814:	d007      	beq.n	8006826 <memchr+0x5a>
 8006816:	42ab      	cmp	r3, r5
 8006818:	4610      	mov	r0, r2
 800681a:	f103 0301 	add.w	r3, r3, #1
 800681e:	f102 0201 	add.w	r2, r2, #1
 8006822:	d1f5      	bne.n	8006810 <memchr+0x44>
 8006824:	2000      	movs	r0, #0
 8006826:	bc70      	pop	{r4, r5, r6}
 8006828:	4770      	bx	lr
 800682a:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 800682e:	4603      	mov	r3, r0
 8006830:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 8006834:	4618      	mov	r0, r3
 8006836:	3304      	adds	r3, #4
 8006838:	6802      	ldr	r2, [r0, #0]
 800683a:	4072      	eors	r2, r6
 800683c:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
 8006840:	ea25 0202 	bic.w	r2, r5, r2
 8006844:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 8006848:	d1da      	bne.n	8006800 <memchr+0x34>
 800684a:	3c04      	subs	r4, #4
 800684c:	2c03      	cmp	r4, #3
 800684e:	4618      	mov	r0, r3
 8006850:	d8f0      	bhi.n	8006834 <memchr+0x68>
 8006852:	e7d5      	b.n	8006800 <memchr+0x34>
 8006854:	4614      	mov	r4, r2
 8006856:	e7d1      	b.n	80067fc <memchr+0x30>
 8006858:	4620      	mov	r0, r4
 800685a:	e7e4      	b.n	8006826 <memchr+0x5a>

0800685c <memmove>:
 800685c:	4288      	cmp	r0, r1
 800685e:	b4f0      	push	{r4, r5, r6, r7}
 8006860:	d910      	bls.n	8006884 <memmove+0x28>
 8006862:	188c      	adds	r4, r1, r2
 8006864:	42a0      	cmp	r0, r4
 8006866:	d20d      	bcs.n	8006884 <memmove+0x28>
 8006868:	1885      	adds	r5, r0, r2
 800686a:	1e53      	subs	r3, r2, #1
 800686c:	b142      	cbz	r2, 8006880 <memmove+0x24>
 800686e:	4621      	mov	r1, r4
 8006870:	462a      	mov	r2, r5
 8006872:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
 8006876:	3b01      	subs	r3, #1
 8006878:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800687c:	1c5c      	adds	r4, r3, #1
 800687e:	d1f8      	bne.n	8006872 <memmove+0x16>
 8006880:	bcf0      	pop	{r4, r5, r6, r7}
 8006882:	4770      	bx	lr
 8006884:	2a0f      	cmp	r2, #15
 8006886:	d940      	bls.n	800690a <memmove+0xae>
 8006888:	ea40 0301 	orr.w	r3, r0, r1
 800688c:	079b      	lsls	r3, r3, #30
 800688e:	d140      	bne.n	8006912 <memmove+0xb6>
 8006890:	f1a2 0710 	sub.w	r7, r2, #16
 8006894:	093f      	lsrs	r7, r7, #4
 8006896:	eb00 1607 	add.w	r6, r0, r7, lsl #4
 800689a:	3610      	adds	r6, #16
 800689c:	460c      	mov	r4, r1
 800689e:	4603      	mov	r3, r0
 80068a0:	6825      	ldr	r5, [r4, #0]
 80068a2:	601d      	str	r5, [r3, #0]
 80068a4:	6865      	ldr	r5, [r4, #4]
 80068a6:	605d      	str	r5, [r3, #4]
 80068a8:	68a5      	ldr	r5, [r4, #8]
 80068aa:	609d      	str	r5, [r3, #8]
 80068ac:	68e5      	ldr	r5, [r4, #12]
 80068ae:	3310      	adds	r3, #16
 80068b0:	f843 5c04 	str.w	r5, [r3, #-4]
 80068b4:	42b3      	cmp	r3, r6
 80068b6:	f104 0410 	add.w	r4, r4, #16
 80068ba:	d1f1      	bne.n	80068a0 <memmove+0x44>
 80068bc:	1c7b      	adds	r3, r7, #1
 80068be:	f002 0c0f 	and.w	ip, r2, #15
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	f1bc 0f03 	cmp.w	ip, #3
 80068c8:	4419      	add	r1, r3
 80068ca:	4403      	add	r3, r0
 80068cc:	d923      	bls.n	8006916 <memmove+0xba>
 80068ce:	460e      	mov	r6, r1
 80068d0:	461d      	mov	r5, r3
 80068d2:	4664      	mov	r4, ip
 80068d4:	f856 7b04 	ldr.w	r7, [r6], #4
 80068d8:	3c04      	subs	r4, #4
 80068da:	2c03      	cmp	r4, #3
 80068dc:	f845 7b04 	str.w	r7, [r5], #4
 80068e0:	d8f8      	bhi.n	80068d4 <memmove+0x78>
 80068e2:	f1ac 0404 	sub.w	r4, ip, #4
 80068e6:	f024 0403 	bic.w	r4, r4, #3
 80068ea:	3404      	adds	r4, #4
 80068ec:	f002 0203 	and.w	r2, r2, #3
 80068f0:	4423      	add	r3, r4
 80068f2:	4421      	add	r1, r4
 80068f4:	2a00      	cmp	r2, #0
 80068f6:	d0c3      	beq.n	8006880 <memmove+0x24>
 80068f8:	441a      	add	r2, r3
 80068fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068fe:	f803 4b01 	strb.w	r4, [r3], #1
 8006902:	4293      	cmp	r3, r2
 8006904:	d1f9      	bne.n	80068fa <memmove+0x9e>
 8006906:	bcf0      	pop	{r4, r5, r6, r7}
 8006908:	4770      	bx	lr
 800690a:	4603      	mov	r3, r0
 800690c:	2a00      	cmp	r2, #0
 800690e:	d1f3      	bne.n	80068f8 <memmove+0x9c>
 8006910:	e7b6      	b.n	8006880 <memmove+0x24>
 8006912:	4603      	mov	r3, r0
 8006914:	e7f0      	b.n	80068f8 <memmove+0x9c>
 8006916:	4662      	mov	r2, ip
 8006918:	2a00      	cmp	r2, #0
 800691a:	d1ed      	bne.n	80068f8 <memmove+0x9c>
 800691c:	e7b0      	b.n	8006880 <memmove+0x24>
 800691e:	bf00      	nop

08006920 <__malloc_lock>:
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop

08006924 <__malloc_unlock>:
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop

08006928 <_putc_r>:
 8006928:	b570      	push	{r4, r5, r6, lr}
 800692a:	460d      	mov	r5, r1
 800692c:	4614      	mov	r4, r2
 800692e:	4606      	mov	r6, r0
 8006930:	b108      	cbz	r0, 8006936 <_putc_r+0xe>
 8006932:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006934:	b1d3      	cbz	r3, 800696c <_putc_r+0x44>
 8006936:	68a3      	ldr	r3, [r4, #8]
 8006938:	3b01      	subs	r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	60a3      	str	r3, [r4, #8]
 800693e:	db06      	blt.n	800694e <_putc_r+0x26>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	701d      	strb	r5, [r3, #0]
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	6022      	str	r2, [r4, #0]
 800694a:	7818      	ldrb	r0, [r3, #0]
 800694c:	bd70      	pop	{r4, r5, r6, pc}
 800694e:	69a2      	ldr	r2, [r4, #24]
 8006950:	4293      	cmp	r3, r2
 8006952:	db0e      	blt.n	8006972 <_putc_r+0x4a>
 8006954:	6823      	ldr	r3, [r4, #0]
 8006956:	701d      	strb	r5, [r3, #0]
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	7819      	ldrb	r1, [r3, #0]
 800695c:	290a      	cmp	r1, #10
 800695e:	d1f2      	bne.n	8006946 <_putc_r+0x1e>
 8006960:	4630      	mov	r0, r6
 8006962:	4622      	mov	r2, r4
 8006964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006968:	f000 ba3c 	b.w	8006de4 <__swbuf_r>
 800696c:	f7ff f924 	bl	8005bb8 <__sinit>
 8006970:	e7e1      	b.n	8006936 <_putc_r+0xe>
 8006972:	4630      	mov	r0, r6
 8006974:	4629      	mov	r1, r5
 8006976:	4622      	mov	r2, r4
 8006978:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800697c:	f000 ba32 	b.w	8006de4 <__swbuf_r>

08006980 <_realloc_r>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	460c      	mov	r4, r1
 8006986:	b083      	sub	sp, #12
 8006988:	4690      	mov	r8, r2
 800698a:	4681      	mov	r9, r0
 800698c:	2900      	cmp	r1, #0
 800698e:	f000 8124 	beq.w	8006bda <_realloc_r+0x25a>
 8006992:	f7ff ffc5 	bl	8006920 <__malloc_lock>
 8006996:	f108 060b 	add.w	r6, r8, #11
 800699a:	2e16      	cmp	r6, #22
 800699c:	bf8c      	ite	hi
 800699e:	f026 0607 	bichi.w	r6, r6, #7
 80069a2:	2210      	movls	r2, #16
 80069a4:	f854 cc04 	ldr.w	ip, [r4, #-4]
 80069a8:	bf8d      	iteet	hi
 80069aa:	0ff3      	lsrhi	r3, r6, #31
 80069ac:	4616      	movls	r6, r2
 80069ae:	2300      	movls	r3, #0
 80069b0:	4632      	movhi	r2, r6
 80069b2:	4546      	cmp	r6, r8
 80069b4:	bf38      	it	cc
 80069b6:	f043 0301 	orrcc.w	r3, r3, #1
 80069ba:	f02c 0503 	bic.w	r5, ip, #3
 80069be:	f1a4 0708 	sub.w	r7, r4, #8
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	f040 810f 	bne.w	8006be6 <_realloc_r+0x266>
 80069c8:	4295      	cmp	r5, r2
 80069ca:	db15      	blt.n	80069f8 <_realloc_r+0x78>
 80069cc:	4660      	mov	r0, ip
 80069ce:	1bab      	subs	r3, r5, r6
 80069d0:	2b0f      	cmp	r3, #15
 80069d2:	f000 0c01 	and.w	ip, r0, #1
 80069d6:	f200 80c6 	bhi.w	8006b66 <_realloc_r+0x1e6>
 80069da:	ea4c 0305 	orr.w	r3, ip, r5
 80069de:	443d      	add	r5, r7
 80069e0:	607b      	str	r3, [r7, #4]
 80069e2:	686b      	ldr	r3, [r5, #4]
 80069e4:	f043 0301 	orr.w	r3, r3, #1
 80069e8:	606b      	str	r3, [r5, #4]
 80069ea:	4648      	mov	r0, r9
 80069ec:	f7ff ff9a 	bl	8006924 <__malloc_unlock>
 80069f0:	4620      	mov	r0, r4
 80069f2:	b003      	add	sp, #12
 80069f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069f8:	f240 6a2c 	movw	sl, #1580	; 0x62c
 80069fc:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8006a00:	1979      	adds	r1, r7, r5
 8006a02:	f8da 0008 	ldr.w	r0, [sl, #8]
 8006a06:	4288      	cmp	r0, r1
 8006a08:	f000 80f2 	beq.w	8006bf0 <_realloc_r+0x270>
 8006a0c:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8006a10:	f02e 0b01 	bic.w	fp, lr, #1
 8006a14:	448b      	add	fp, r1
 8006a16:	f8db b004 	ldr.w	fp, [fp, #4]
 8006a1a:	f01b 0f01 	tst.w	fp, #1
 8006a1e:	bf1c      	itt	ne
 8006a20:	469e      	movne	lr, r3
 8006a22:	4671      	movne	r1, lr
 8006a24:	d054      	beq.n	8006ad0 <_realloc_r+0x150>
 8006a26:	f01c 0f01 	tst.w	ip, #1
 8006a2a:	f040 80ad 	bne.w	8006b88 <_realloc_r+0x208>
 8006a2e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8006a32:	ebc3 0b07 	rsb	fp, r3, r7
 8006a36:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	442b      	add	r3, r5
 8006a40:	2900      	cmp	r1, #0
 8006a42:	d052      	beq.n	8006aea <_realloc_r+0x16a>
 8006a44:	4281      	cmp	r1, r0
 8006a46:	f000 811f 	beq.w	8006c88 <_realloc_r+0x308>
 8006a4a:	449e      	add	lr, r3
 8006a4c:	4596      	cmp	lr, r2
 8006a4e:	db4c      	blt.n	8006aea <_realloc_r+0x16a>
 8006a50:	68cb      	ldr	r3, [r1, #12]
 8006a52:	688a      	ldr	r2, [r1, #8]
 8006a54:	465f      	mov	r7, fp
 8006a56:	60d3      	str	r3, [r2, #12]
 8006a58:	609a      	str	r2, [r3, #8]
 8006a5a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006a5e:	f8db 300c 	ldr.w	r3, [fp, #12]
 8006a62:	1f2a      	subs	r2, r5, #4
 8006a64:	2a24      	cmp	r2, #36	; 0x24
 8006a66:	60cb      	str	r3, [r1, #12]
 8006a68:	6099      	str	r1, [r3, #8]
 8006a6a:	f200 8165 	bhi.w	8006d38 <_realloc_r+0x3b8>
 8006a6e:	2a13      	cmp	r2, #19
 8006a70:	bf98      	it	ls
 8006a72:	463b      	movls	r3, r7
 8006a74:	d920      	bls.n	8006ab8 <_realloc_r+0x138>
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	f8cb 3008 	str.w	r3, [fp, #8]
 8006a7c:	6863      	ldr	r3, [r4, #4]
 8006a7e:	2a1b      	cmp	r2, #27
 8006a80:	f8cb 300c 	str.w	r3, [fp, #12]
 8006a84:	bf9c      	itt	ls
 8006a86:	3408      	addls	r4, #8
 8006a88:	f10b 0310 	addls.w	r3, fp, #16
 8006a8c:	d914      	bls.n	8006ab8 <_realloc_r+0x138>
 8006a8e:	68a3      	ldr	r3, [r4, #8]
 8006a90:	f8cb 3010 	str.w	r3, [fp, #16]
 8006a94:	68e3      	ldr	r3, [r4, #12]
 8006a96:	2a24      	cmp	r2, #36	; 0x24
 8006a98:	f8cb 3014 	str.w	r3, [fp, #20]
 8006a9c:	bf03      	ittte	eq
 8006a9e:	6923      	ldreq	r3, [r4, #16]
 8006aa0:	f8cb 3018 	streq.w	r3, [fp, #24]
 8006aa4:	6962      	ldreq	r2, [r4, #20]
 8006aa6:	3410      	addne	r4, #16
 8006aa8:	bf11      	iteee	ne
 8006aaa:	f10b 0318 	addne.w	r3, fp, #24
 8006aae:	f10b 0320 	addeq.w	r3, fp, #32
 8006ab2:	f8cb 201c 	streq.w	r2, [fp, #28]
 8006ab6:	3418      	addeq	r4, #24
 8006ab8:	6822      	ldr	r2, [r4, #0]
 8006aba:	601a      	str	r2, [r3, #0]
 8006abc:	6862      	ldr	r2, [r4, #4]
 8006abe:	605a      	str	r2, [r3, #4]
 8006ac0:	68a2      	ldr	r2, [r4, #8]
 8006ac2:	609a      	str	r2, [r3, #8]
 8006ac4:	463c      	mov	r4, r7
 8006ac6:	4675      	mov	r5, lr
 8006ac8:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006acc:	465f      	mov	r7, fp
 8006ace:	e77e      	b.n	80069ce <_realloc_r+0x4e>
 8006ad0:	f02e 0e03 	bic.w	lr, lr, #3
 8006ad4:	eb0e 0305 	add.w	r3, lr, r5
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	dba4      	blt.n	8006a26 <_realloc_r+0xa6>
 8006adc:	68ca      	ldr	r2, [r1, #12]
 8006ade:	6889      	ldr	r1, [r1, #8]
 8006ae0:	4660      	mov	r0, ip
 8006ae2:	60ca      	str	r2, [r1, #12]
 8006ae4:	461d      	mov	r5, r3
 8006ae6:	6091      	str	r1, [r2, #8]
 8006ae8:	e771      	b.n	80069ce <_realloc_r+0x4e>
 8006aea:	4293      	cmp	r3, r2
 8006aec:	db4c      	blt.n	8006b88 <_realloc_r+0x208>
 8006aee:	465f      	mov	r7, fp
 8006af0:	f8db 100c 	ldr.w	r1, [fp, #12]
 8006af4:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8006af8:	1f2a      	subs	r2, r5, #4
 8006afa:	2a24      	cmp	r2, #36	; 0x24
 8006afc:	60c1      	str	r1, [r0, #12]
 8006afe:	6088      	str	r0, [r1, #8]
 8006b00:	f200 80b4 	bhi.w	8006c6c <_realloc_r+0x2ec>
 8006b04:	2a13      	cmp	r2, #19
 8006b06:	bf98      	it	ls
 8006b08:	463a      	movls	r2, r7
 8006b0a:	d920      	bls.n	8006b4e <_realloc_r+0x1ce>
 8006b0c:	6821      	ldr	r1, [r4, #0]
 8006b0e:	f8cb 1008 	str.w	r1, [fp, #8]
 8006b12:	6861      	ldr	r1, [r4, #4]
 8006b14:	2a1b      	cmp	r2, #27
 8006b16:	f8cb 100c 	str.w	r1, [fp, #12]
 8006b1a:	bf9c      	itt	ls
 8006b1c:	3408      	addls	r4, #8
 8006b1e:	f10b 0210 	addls.w	r2, fp, #16
 8006b22:	d914      	bls.n	8006b4e <_realloc_r+0x1ce>
 8006b24:	68a1      	ldr	r1, [r4, #8]
 8006b26:	f8cb 1010 	str.w	r1, [fp, #16]
 8006b2a:	68e1      	ldr	r1, [r4, #12]
 8006b2c:	2a24      	cmp	r2, #36	; 0x24
 8006b2e:	f8cb 1014 	str.w	r1, [fp, #20]
 8006b32:	bf03      	ittte	eq
 8006b34:	6922      	ldreq	r2, [r4, #16]
 8006b36:	f8cb 2018 	streq.w	r2, [fp, #24]
 8006b3a:	6961      	ldreq	r1, [r4, #20]
 8006b3c:	3410      	addne	r4, #16
 8006b3e:	bf11      	iteee	ne
 8006b40:	f10b 0218 	addne.w	r2, fp, #24
 8006b44:	f10b 0220 	addeq.w	r2, fp, #32
 8006b48:	f8cb 101c 	streq.w	r1, [fp, #28]
 8006b4c:	3418      	addeq	r4, #24
 8006b4e:	6821      	ldr	r1, [r4, #0]
 8006b50:	6011      	str	r1, [r2, #0]
 8006b52:	6861      	ldr	r1, [r4, #4]
 8006b54:	6051      	str	r1, [r2, #4]
 8006b56:	68a1      	ldr	r1, [r4, #8]
 8006b58:	6091      	str	r1, [r2, #8]
 8006b5a:	463c      	mov	r4, r7
 8006b5c:	461d      	mov	r5, r3
 8006b5e:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006b62:	465f      	mov	r7, fp
 8006b64:	e733      	b.n	80069ce <_realloc_r+0x4e>
 8006b66:	19b9      	adds	r1, r7, r6
 8006b68:	f043 0201 	orr.w	r2, r3, #1
 8006b6c:	ea4c 0606 	orr.w	r6, ip, r6
 8006b70:	440b      	add	r3, r1
 8006b72:	607e      	str	r6, [r7, #4]
 8006b74:	604a      	str	r2, [r1, #4]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	f042 0201 	orr.w	r2, r2, #1
 8006b7c:	3108      	adds	r1, #8
 8006b7e:	605a      	str	r2, [r3, #4]
 8006b80:	4648      	mov	r0, r9
 8006b82:	f7ff f8eb 	bl	8005d5c <_free_r>
 8006b86:	e730      	b.n	80069ea <_realloc_r+0x6a>
 8006b88:	4641      	mov	r1, r8
 8006b8a:	4648      	mov	r0, r9
 8006b8c:	f7ff fb6c 	bl	8006268 <_malloc_r>
 8006b90:	4680      	mov	r8, r0
 8006b92:	b1d8      	cbz	r0, 8006bcc <_realloc_r+0x24c>
 8006b94:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006b98:	f023 0201 	bic.w	r2, r3, #1
 8006b9c:	443a      	add	r2, r7
 8006b9e:	f1a0 0108 	sub.w	r1, r0, #8
 8006ba2:	4291      	cmp	r1, r2
 8006ba4:	f000 80c1 	beq.w	8006d2a <_realloc_r+0x3aa>
 8006ba8:	1f2a      	subs	r2, r5, #4
 8006baa:	2a24      	cmp	r2, #36	; 0x24
 8006bac:	d868      	bhi.n	8006c80 <_realloc_r+0x300>
 8006bae:	2a13      	cmp	r2, #19
 8006bb0:	bf9c      	itt	ls
 8006bb2:	4603      	movls	r3, r0
 8006bb4:	4622      	movls	r2, r4
 8006bb6:	d83a      	bhi.n	8006c2e <_realloc_r+0x2ae>
 8006bb8:	6811      	ldr	r1, [r2, #0]
 8006bba:	6019      	str	r1, [r3, #0]
 8006bbc:	6851      	ldr	r1, [r2, #4]
 8006bbe:	6059      	str	r1, [r3, #4]
 8006bc0:	6892      	ldr	r2, [r2, #8]
 8006bc2:	609a      	str	r2, [r3, #8]
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4648      	mov	r0, r9
 8006bc8:	f7ff f8c8 	bl	8005d5c <_free_r>
 8006bcc:	4648      	mov	r0, r9
 8006bce:	f7ff fea9 	bl	8006924 <__malloc_unlock>
 8006bd2:	4640      	mov	r0, r8
 8006bd4:	b003      	add	sp, #12
 8006bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bda:	4611      	mov	r1, r2
 8006bdc:	b003      	add	sp, #12
 8006bde:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be2:	f7ff bb41 	b.w	8006268 <_malloc_r>
 8006be6:	230c      	movs	r3, #12
 8006be8:	f8c9 3000 	str.w	r3, [r9]
 8006bec:	2000      	movs	r0, #0
 8006bee:	e700      	b.n	80069f2 <_realloc_r+0x72>
 8006bf0:	6843      	ldr	r3, [r0, #4]
 8006bf2:	f023 0e03 	bic.w	lr, r3, #3
 8006bf6:	f106 0110 	add.w	r1, r6, #16
 8006bfa:	eb0e 0305 	add.w	r3, lr, r5
 8006bfe:	428b      	cmp	r3, r1
 8006c00:	bfb8      	it	lt
 8006c02:	4601      	movlt	r1, r0
 8006c04:	f6ff af0f 	blt.w	8006a26 <_realloc_r+0xa6>
 8006c08:	4437      	add	r7, r6
 8006c0a:	1b9b      	subs	r3, r3, r6
 8006c0c:	f043 0301 	orr.w	r3, r3, #1
 8006c10:	f8ca 7008 	str.w	r7, [sl, #8]
 8006c14:	607b      	str	r3, [r7, #4]
 8006c16:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006c1a:	f003 0301 	and.w	r3, r3, #1
 8006c1e:	431e      	orrs	r6, r3
 8006c20:	4648      	mov	r0, r9
 8006c22:	f844 6c04 	str.w	r6, [r4, #-4]
 8006c26:	f7ff fe7d 	bl	8006924 <__malloc_unlock>
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	e6e1      	b.n	80069f2 <_realloc_r+0x72>
 8006c2e:	6823      	ldr	r3, [r4, #0]
 8006c30:	6003      	str	r3, [r0, #0]
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	2a1b      	cmp	r2, #27
 8006c36:	6043      	str	r3, [r0, #4]
 8006c38:	bf9c      	itt	ls
 8006c3a:	f104 0208 	addls.w	r2, r4, #8
 8006c3e:	f100 0308 	addls.w	r3, r0, #8
 8006c42:	d9b9      	bls.n	8006bb8 <_realloc_r+0x238>
 8006c44:	68a3      	ldr	r3, [r4, #8]
 8006c46:	6083      	str	r3, [r0, #8]
 8006c48:	68e3      	ldr	r3, [r4, #12]
 8006c4a:	2a24      	cmp	r2, #36	; 0x24
 8006c4c:	60c3      	str	r3, [r0, #12]
 8006c4e:	bf03      	ittte	eq
 8006c50:	6923      	ldreq	r3, [r4, #16]
 8006c52:	6103      	streq	r3, [r0, #16]
 8006c54:	6962      	ldreq	r2, [r4, #20]
 8006c56:	f100 0310 	addne.w	r3, r0, #16
 8006c5a:	bf09      	itett	eq
 8006c5c:	6142      	streq	r2, [r0, #20]
 8006c5e:	f104 0210 	addne.w	r2, r4, #16
 8006c62:	f100 0318 	addeq.w	r3, r0, #24
 8006c66:	f104 0218 	addeq.w	r2, r4, #24
 8006c6a:	e7a5      	b.n	8006bb8 <_realloc_r+0x238>
 8006c6c:	4621      	mov	r1, r4
 8006c6e:	4638      	mov	r0, r7
 8006c70:	461d      	mov	r5, r3
 8006c72:	463c      	mov	r4, r7
 8006c74:	f7ff fdf2 	bl	800685c <memmove>
 8006c78:	465f      	mov	r7, fp
 8006c7a:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006c7e:	e6a6      	b.n	80069ce <_realloc_r+0x4e>
 8006c80:	4621      	mov	r1, r4
 8006c82:	f7ff fdeb 	bl	800685c <memmove>
 8006c86:	e79d      	b.n	8006bc4 <_realloc_r+0x244>
 8006c88:	eb0e 0c03 	add.w	ip, lr, r3
 8006c8c:	f106 0110 	add.w	r1, r6, #16
 8006c90:	458c      	cmp	ip, r1
 8006c92:	f6ff af2a 	blt.w	8006aea <_realloc_r+0x16a>
 8006c96:	465f      	mov	r7, fp
 8006c98:	f8db 300c 	ldr.w	r3, [fp, #12]
 8006c9c:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006ca0:	1f2a      	subs	r2, r5, #4
 8006ca2:	2a24      	cmp	r2, #36	; 0x24
 8006ca4:	60cb      	str	r3, [r1, #12]
 8006ca6:	6099      	str	r1, [r3, #8]
 8006ca8:	d850      	bhi.n	8006d4c <_realloc_r+0x3cc>
 8006caa:	2a13      	cmp	r2, #19
 8006cac:	bf98      	it	ls
 8006cae:	463b      	movls	r3, r7
 8006cb0:	d920      	bls.n	8006cf4 <_realloc_r+0x374>
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	f8cb 3008 	str.w	r3, [fp, #8]
 8006cb8:	6863      	ldr	r3, [r4, #4]
 8006cba:	2a1b      	cmp	r2, #27
 8006cbc:	f8cb 300c 	str.w	r3, [fp, #12]
 8006cc0:	bf9c      	itt	ls
 8006cc2:	3408      	addls	r4, #8
 8006cc4:	f10b 0310 	addls.w	r3, fp, #16
 8006cc8:	d914      	bls.n	8006cf4 <_realloc_r+0x374>
 8006cca:	68a3      	ldr	r3, [r4, #8]
 8006ccc:	f8cb 3010 	str.w	r3, [fp, #16]
 8006cd0:	68e3      	ldr	r3, [r4, #12]
 8006cd2:	2a24      	cmp	r2, #36	; 0x24
 8006cd4:	f8cb 3014 	str.w	r3, [fp, #20]
 8006cd8:	bf03      	ittte	eq
 8006cda:	6923      	ldreq	r3, [r4, #16]
 8006cdc:	f8cb 3018 	streq.w	r3, [fp, #24]
 8006ce0:	6962      	ldreq	r2, [r4, #20]
 8006ce2:	3410      	addne	r4, #16
 8006ce4:	bf11      	iteee	ne
 8006ce6:	f10b 0318 	addne.w	r3, fp, #24
 8006cea:	f10b 0320 	addeq.w	r3, fp, #32
 8006cee:	f8cb 201c 	streq.w	r2, [fp, #28]
 8006cf2:	3418      	addeq	r4, #24
 8006cf4:	6822      	ldr	r2, [r4, #0]
 8006cf6:	601a      	str	r2, [r3, #0]
 8006cf8:	6862      	ldr	r2, [r4, #4]
 8006cfa:	605a      	str	r2, [r3, #4]
 8006cfc:	68a2      	ldr	r2, [r4, #8]
 8006cfe:	609a      	str	r2, [r3, #8]
 8006d00:	eb0b 0306 	add.w	r3, fp, r6
 8006d04:	ebc6 020c 	rsb	r2, r6, ip
 8006d08:	f042 0201 	orr.w	r2, r2, #1
 8006d0c:	f8ca 3008 	str.w	r3, [sl, #8]
 8006d10:	605a      	str	r2, [r3, #4]
 8006d12:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	431e      	orrs	r6, r3
 8006d1c:	4648      	mov	r0, r9
 8006d1e:	f8cb 6004 	str.w	r6, [fp, #4]
 8006d22:	f7ff fdff 	bl	8006924 <__malloc_unlock>
 8006d26:	4638      	mov	r0, r7
 8006d28:	e663      	b.n	80069f2 <_realloc_r+0x72>
 8006d2a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006d2e:	f022 0203 	bic.w	r2, r2, #3
 8006d32:	4415      	add	r5, r2
 8006d34:	4618      	mov	r0, r3
 8006d36:	e64a      	b.n	80069ce <_realloc_r+0x4e>
 8006d38:	4621      	mov	r1, r4
 8006d3a:	4638      	mov	r0, r7
 8006d3c:	4675      	mov	r5, lr
 8006d3e:	463c      	mov	r4, r7
 8006d40:	f7ff fd8c 	bl	800685c <memmove>
 8006d44:	465f      	mov	r7, fp
 8006d46:	f8db 0004 	ldr.w	r0, [fp, #4]
 8006d4a:	e640      	b.n	80069ce <_realloc_r+0x4e>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4638      	mov	r0, r7
 8006d50:	f8cd c004 	str.w	ip, [sp, #4]
 8006d54:	f7ff fd82 	bl	800685c <memmove>
 8006d58:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006d5c:	e7d0      	b.n	8006d00 <_realloc_r+0x380>
 8006d5e:	bf00      	nop

08006d60 <__sread>:
 8006d60:	b510      	push	{r4, lr}
 8006d62:	460c      	mov	r4, r1
 8006d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d68:	f7f9 febe 	bl	8000ae8 <_read_r>
 8006d6c:	2800      	cmp	r0, #0
 8006d6e:	bfab      	itete	ge
 8006d70:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8006d72:	89a3      	ldrhlt	r3, [r4, #12]
 8006d74:	181b      	addge	r3, r3, r0
 8006d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d7a:	bfac      	ite	ge
 8006d7c:	6523      	strge	r3, [r4, #80]	; 0x50
 8006d7e:	81a3      	strhlt	r3, [r4, #12]
 8006d80:	bd10      	pop	{r4, pc}
 8006d82:	bf00      	nop

08006d84 <__swrite>:
 8006d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d88:	460c      	mov	r4, r1
 8006d8a:	8989      	ldrh	r1, [r1, #12]
 8006d8c:	461d      	mov	r5, r3
 8006d8e:	05cb      	lsls	r3, r1, #23
 8006d90:	4616      	mov	r6, r2
 8006d92:	4607      	mov	r7, r0
 8006d94:	d506      	bpl.n	8006da4 <__swrite+0x20>
 8006d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	f7f9 fdd7 	bl	8000950 <_lseek_r>
 8006da2:	89a1      	ldrh	r1, [r4, #12]
 8006da4:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
 8006da8:	81a1      	strh	r1, [r4, #12]
 8006daa:	4638      	mov	r0, r7
 8006dac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006db0:	4632      	mov	r2, r6
 8006db2:	462b      	mov	r3, r5
 8006db4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006db8:	f7f9 bf26 	b.w	8000c08 <_write_r>

08006dbc <__sseek>:
 8006dbc:	b510      	push	{r4, lr}
 8006dbe:	460c      	mov	r4, r1
 8006dc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc4:	f7f9 fdc4 	bl	8000950 <_lseek_r>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	1c42      	adds	r2, r0, #1
 8006dcc:	bf0e      	itee	eq
 8006dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006dd6:	6520      	strne	r0, [r4, #80]	; 0x50
 8006dd8:	81a3      	strh	r3, [r4, #12]
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <__sclose>:
 8006ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de0:	f7f9 bdac 	b.w	800093c <_close_r>

08006de4 <__swbuf_r>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	460d      	mov	r5, r1
 8006de8:	4614      	mov	r4, r2
 8006dea:	4607      	mov	r7, r0
 8006dec:	b110      	cbz	r0, 8006df4 <__swbuf_r+0x10>
 8006dee:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d046      	beq.n	8006e82 <__swbuf_r+0x9e>
 8006df4:	89a2      	ldrh	r2, [r4, #12]
 8006df6:	69a0      	ldr	r0, [r4, #24]
 8006df8:	b293      	uxth	r3, r2
 8006dfa:	60a0      	str	r0, [r4, #8]
 8006dfc:	0718      	lsls	r0, r3, #28
 8006dfe:	d52d      	bpl.n	8006e5c <__swbuf_r+0x78>
 8006e00:	6926      	ldr	r6, [r4, #16]
 8006e02:	2e00      	cmp	r6, #0
 8006e04:	d02a      	beq.n	8006e5c <__swbuf_r+0x78>
 8006e06:	0499      	lsls	r1, r3, #18
 8006e08:	bf5f      	itttt	pl
 8006e0a:	6e63      	ldrpl	r3, [r4, #100]	; 0x64
 8006e0c:	f423 5300 	bicpl.w	r3, r3, #8192	; 0x2000
 8006e10:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8006e14:	6663      	strpl	r3, [r4, #100]	; 0x64
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	bf58      	it	pl
 8006e1a:	81a2      	strhpl	r2, [r4, #12]
 8006e1c:	6962      	ldr	r2, [r4, #20]
 8006e1e:	1b9e      	subs	r6, r3, r6
 8006e20:	4296      	cmp	r6, r2
 8006e22:	b2ed      	uxtb	r5, r5
 8006e24:	bfb8      	it	lt
 8006e26:	3601      	addlt	r6, #1
 8006e28:	da22      	bge.n	8006e70 <__swbuf_r+0x8c>
 8006e2a:	68a2      	ldr	r2, [r4, #8]
 8006e2c:	1c59      	adds	r1, r3, #1
 8006e2e:	3a01      	subs	r2, #1
 8006e30:	60a2      	str	r2, [r4, #8]
 8006e32:	6021      	str	r1, [r4, #0]
 8006e34:	701d      	strb	r5, [r3, #0]
 8006e36:	6963      	ldr	r3, [r4, #20]
 8006e38:	42b3      	cmp	r3, r6
 8006e3a:	d006      	beq.n	8006e4a <__swbuf_r+0x66>
 8006e3c:	89a3      	ldrh	r3, [r4, #12]
 8006e3e:	07db      	lsls	r3, r3, #31
 8006e40:	d501      	bpl.n	8006e46 <__swbuf_r+0x62>
 8006e42:	2d0a      	cmp	r5, #10
 8006e44:	d001      	beq.n	8006e4a <__swbuf_r+0x66>
 8006e46:	4628      	mov	r0, r5
 8006e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	f7fe fe97 	bl	8005b80 <_fflush_r>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d0f7      	beq.n	8006e46 <__swbuf_r+0x62>
 8006e56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	4621      	mov	r1, r4
 8006e60:	f000 f812 	bl	8006e88 <__swsetup_r>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d1f6      	bne.n	8006e56 <__swbuf_r+0x72>
 8006e68:	89a2      	ldrh	r2, [r4, #12]
 8006e6a:	6926      	ldr	r6, [r4, #16]
 8006e6c:	b293      	uxth	r3, r2
 8006e6e:	e7ca      	b.n	8006e06 <__swbuf_r+0x22>
 8006e70:	4638      	mov	r0, r7
 8006e72:	4621      	mov	r1, r4
 8006e74:	f7fe fe84 	bl	8005b80 <_fflush_r>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	d1ec      	bne.n	8006e56 <__swbuf_r+0x72>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	2601      	movs	r6, #1
 8006e80:	e7d3      	b.n	8006e2a <__swbuf_r+0x46>
 8006e82:	f7fe fe99 	bl	8005bb8 <__sinit>
 8006e86:	e7b5      	b.n	8006df4 <__swbuf_r+0x10>

08006e88 <__swsetup_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	f240 6328 	movw	r3, #1576	; 0x628
 8006e8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006e92:	4605      	mov	r5, r0
 8006e94:	6818      	ldr	r0, [r3, #0]
 8006e96:	460c      	mov	r4, r1
 8006e98:	b110      	cbz	r0, 8006ea0 <__swsetup_r+0x18>
 8006e9a:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8006e9c:	2a00      	cmp	r2, #0
 8006e9e:	d036      	beq.n	8006f0e <__swsetup_r+0x86>
 8006ea0:	89a2      	ldrh	r2, [r4, #12]
 8006ea2:	b293      	uxth	r3, r2
 8006ea4:	0718      	lsls	r0, r3, #28
 8006ea6:	d50c      	bpl.n	8006ec2 <__swsetup_r+0x3a>
 8006ea8:	6921      	ldr	r1, [r4, #16]
 8006eaa:	b1a9      	cbz	r1, 8006ed8 <__swsetup_r+0x50>
 8006eac:	f013 0201 	ands.w	r2, r3, #1
 8006eb0:	d01e      	beq.n	8006ef0 <__swsetup_r+0x68>
 8006eb2:	6963      	ldr	r3, [r4, #20]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	425b      	negs	r3, r3
 8006eb8:	61a3      	str	r3, [r4, #24]
 8006eba:	60a2      	str	r2, [r4, #8]
 8006ebc:	b1f1      	cbz	r1, 8006efc <__swsetup_r+0x74>
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	bd38      	pop	{r3, r4, r5, pc}
 8006ec2:	06d9      	lsls	r1, r3, #27
 8006ec4:	d53b      	bpl.n	8006f3e <__swsetup_r+0xb6>
 8006ec6:	075b      	lsls	r3, r3, #29
 8006ec8:	d424      	bmi.n	8006f14 <__swsetup_r+0x8c>
 8006eca:	6921      	ldr	r1, [r4, #16]
 8006ecc:	f042 0308 	orr.w	r3, r2, #8
 8006ed0:	81a3      	strh	r3, [r4, #12]
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2900      	cmp	r1, #0
 8006ed6:	d1e9      	bne.n	8006eac <__swsetup_r+0x24>
 8006ed8:	f403 7220 	and.w	r2, r3, #640	; 0x280
 8006edc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8006ee0:	d0e4      	beq.n	8006eac <__swsetup_r+0x24>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f000 f87d 	bl	8006fe4 <__smakebuf_r>
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	6921      	ldr	r1, [r4, #16]
 8006eee:	e7dd      	b.n	8006eac <__swsetup_r+0x24>
 8006ef0:	0798      	lsls	r0, r3, #30
 8006ef2:	bf58      	it	pl
 8006ef4:	6962      	ldrpl	r2, [r4, #20]
 8006ef6:	60a2      	str	r2, [r4, #8]
 8006ef8:	2900      	cmp	r1, #0
 8006efa:	d1e0      	bne.n	8006ebe <__swsetup_r+0x36>
 8006efc:	89a3      	ldrh	r3, [r4, #12]
 8006efe:	061a      	lsls	r2, r3, #24
 8006f00:	d5dd      	bpl.n	8006ebe <__swsetup_r+0x36>
 8006f02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f06:	81a3      	strh	r3, [r4, #12]
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f0c:	bd38      	pop	{r3, r4, r5, pc}
 8006f0e:	f7fe fe53 	bl	8005bb8 <__sinit>
 8006f12:	e7c5      	b.n	8006ea0 <__swsetup_r+0x18>
 8006f14:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006f16:	b149      	cbz	r1, 8006f2c <__swsetup_r+0xa4>
 8006f18:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006f1c:	4299      	cmp	r1, r3
 8006f1e:	d003      	beq.n	8006f28 <__swsetup_r+0xa0>
 8006f20:	4628      	mov	r0, r5
 8006f22:	f7fe ff1b 	bl	8005d5c <_free_r>
 8006f26:	89a2      	ldrh	r2, [r4, #12]
 8006f28:	2300      	movs	r3, #0
 8006f2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f2c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
 8006f30:	6921      	ldr	r1, [r4, #16]
 8006f32:	0412      	lsls	r2, r2, #16
 8006f34:	2300      	movs	r3, #0
 8006f36:	0c12      	lsrs	r2, r2, #16
 8006f38:	e884 000a 	stmia.w	r4, {r1, r3}
 8006f3c:	e7c6      	b.n	8006ecc <__swsetup_r+0x44>
 8006f3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f42:	2309      	movs	r3, #9
 8006f44:	602b      	str	r3, [r5, #0]
 8006f46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f4a:	81a2      	strh	r2, [r4, #12]
 8006f4c:	bd38      	pop	{r3, r4, r5, pc}
 8006f4e:	bf00      	nop

08006f50 <_fclose_r>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	460c      	mov	r4, r1
 8006f54:	4605      	mov	r5, r0
 8006f56:	b131      	cbz	r1, 8006f66 <_fclose_r+0x16>
 8006f58:	b110      	cbz	r0, 8006f60 <_fclose_r+0x10>
 8006f5a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d030      	beq.n	8006fc2 <_fclose_r+0x72>
 8006f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f64:	b90b      	cbnz	r3, 8006f6a <_fclose_r+0x1a>
 8006f66:	2000      	movs	r0, #0
 8006f68:	bd70      	pop	{r4, r5, r6, pc}
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	4621      	mov	r1, r4
 8006f6e:	f7fe fe07 	bl	8005b80 <_fflush_r>
 8006f72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006f74:	4606      	mov	r6, r0
 8006f76:	b13b      	cbz	r3, 8006f88 <_fclose_r+0x38>
 8006f78:	4628      	mov	r0, r5
 8006f7a:	69e1      	ldr	r1, [r4, #28]
 8006f7c:	4798      	blx	r3
 8006f7e:	ea36 0620 	bics.w	r6, r6, r0, asr #32
 8006f82:	bf28      	it	cs
 8006f84:	f04f 36ff 	movcs.w	r6, #4294967295	; 0xffffffff
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	061b      	lsls	r3, r3, #24
 8006f8c:	d41c      	bmi.n	8006fc8 <_fclose_r+0x78>
 8006f8e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006f90:	b141      	cbz	r1, 8006fa4 <_fclose_r+0x54>
 8006f92:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8006f96:	4299      	cmp	r1, r3
 8006f98:	d002      	beq.n	8006fa0 <_fclose_r+0x50>
 8006f9a:	4628      	mov	r0, r5
 8006f9c:	f7fe fede 	bl	8005d5c <_free_r>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	6323      	str	r3, [r4, #48]	; 0x30
 8006fa4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006fa6:	b121      	cbz	r1, 8006fb2 <_fclose_r+0x62>
 8006fa8:	4628      	mov	r0, r5
 8006faa:	f7fe fed7 	bl	8005d5c <_free_r>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	6463      	str	r3, [r4, #68]	; 0x44
 8006fb2:	f7fe fe7d 	bl	8005cb0 <__sfp_lock_acquire>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	81a3      	strh	r3, [r4, #12]
 8006fba:	f7fe fe7b 	bl	8005cb4 <__sfp_lock_release>
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	bd70      	pop	{r4, r5, r6, pc}
 8006fc2:	f7fe fdf9 	bl	8005bb8 <__sinit>
 8006fc6:	e7cb      	b.n	8006f60 <_fclose_r+0x10>
 8006fc8:	4628      	mov	r0, r5
 8006fca:	6921      	ldr	r1, [r4, #16]
 8006fcc:	f7fe fec6 	bl	8005d5c <_free_r>
 8006fd0:	e7dd      	b.n	8006f8e <_fclose_r+0x3e>
 8006fd2:	bf00      	nop

08006fd4 <fclose>:
 8006fd4:	f240 6328 	movw	r3, #1576	; 0x628
 8006fd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8006fdc:	4601      	mov	r1, r0
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	f7ff bfb6 	b.w	8006f50 <_fclose_r>

08006fe4 <__smakebuf_r>:
 8006fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fe6:	898b      	ldrh	r3, [r1, #12]
 8006fe8:	b29a      	uxth	r2, r3
 8006fea:	0796      	lsls	r6, r2, #30
 8006fec:	b091      	sub	sp, #68	; 0x44
 8006fee:	460c      	mov	r4, r1
 8006ff0:	4605      	mov	r5, r0
 8006ff2:	d43a      	bmi.n	800706a <__smakebuf_r+0x86>
 8006ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff8:	2900      	cmp	r1, #0
 8006ffa:	db17      	blt.n	800702c <__smakebuf_r+0x48>
 8006ffc:	aa01      	add	r2, sp, #4
 8006ffe:	f7f9 fca0 	bl	8000942 <_fstat_r>
 8007002:	2800      	cmp	r0, #0
 8007004:	db10      	blt.n	8007028 <__smakebuf_r+0x44>
 8007006:	9b02      	ldr	r3, [sp, #8]
 8007008:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800700c:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
 8007010:	424f      	negs	r7, r1
 8007012:	414f      	adcs	r7, r1
 8007014:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007018:	d02f      	beq.n	800707a <__smakebuf_r+0x96>
 800701a:	89a3      	ldrh	r3, [r4, #12]
 800701c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007020:	81a3      	strh	r3, [r4, #12]
 8007022:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007026:	e00b      	b.n	8007040 <__smakebuf_r+0x5c>
 8007028:	89a3      	ldrh	r3, [r4, #12]
 800702a:	b29a      	uxth	r2, r3
 800702c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007030:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007034:	81a3      	strh	r3, [r4, #12]
 8007036:	bf14      	ite	ne
 8007038:	2640      	movne	r6, #64	; 0x40
 800703a:	f44f 6680 	moveq.w	r6, #1024	; 0x400
 800703e:	2700      	movs	r7, #0
 8007040:	4628      	mov	r0, r5
 8007042:	4631      	mov	r1, r6
 8007044:	f7ff f910 	bl	8006268 <_malloc_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	d030      	beq.n	80070ae <__smakebuf_r+0xca>
 800704c:	89a2      	ldrh	r2, [r4, #12]
 800704e:	f645 33ad 	movw	r3, #23469	; 0x5bad
 8007052:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007056:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800705a:	63eb      	str	r3, [r5, #60]	; 0x3c
 800705c:	6020      	str	r0, [r4, #0]
 800705e:	6120      	str	r0, [r4, #16]
 8007060:	6166      	str	r6, [r4, #20]
 8007062:	81a2      	strh	r2, [r4, #12]
 8007064:	b9bf      	cbnz	r7, 8007096 <__smakebuf_r+0xb2>
 8007066:	b011      	add	sp, #68	; 0x44
 8007068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706a:	f101 0343 	add.w	r3, r1, #67	; 0x43
 800706e:	2201      	movs	r2, #1
 8007070:	600b      	str	r3, [r1, #0]
 8007072:	610b      	str	r3, [r1, #16]
 8007074:	614a      	str	r2, [r1, #20]
 8007076:	b011      	add	sp, #68	; 0x44
 8007078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800707a:	f646 53bd 	movw	r3, #28093	; 0x6dbd
 800707e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007080:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007084:	429a      	cmp	r2, r3
 8007086:	d1c8      	bne.n	800701a <__smakebuf_r+0x36>
 8007088:	89a3      	ldrh	r3, [r4, #12]
 800708a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800708e:	4333      	orrs	r3, r6
 8007090:	81a3      	strh	r3, [r4, #12]
 8007092:	64e6      	str	r6, [r4, #76]	; 0x4c
 8007094:	e7d4      	b.n	8007040 <__smakebuf_r+0x5c>
 8007096:	4628      	mov	r0, r5
 8007098:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800709c:	f7f9 fc56 	bl	800094c <_isatty_r>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d0e0      	beq.n	8007066 <__smakebuf_r+0x82>
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	f043 0301 	orr.w	r3, r3, #1
 80070aa:	81a3      	strh	r3, [r4, #12]
 80070ac:	e7db      	b.n	8007066 <__smakebuf_r+0x82>
 80070ae:	89a3      	ldrh	r3, [r4, #12]
 80070b0:	059a      	lsls	r2, r3, #22
 80070b2:	d4d8      	bmi.n	8007066 <__smakebuf_r+0x82>
 80070b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070b8:	f043 0302 	orr.w	r3, r3, #2
 80070bc:	2101      	movs	r1, #1
 80070be:	81a3      	strh	r3, [r4, #12]
 80070c0:	6022      	str	r2, [r4, #0]
 80070c2:	6122      	str	r2, [r4, #16]
 80070c4:	6161      	str	r1, [r4, #20]
 80070c6:	e7ce      	b.n	8007066 <__smakebuf_r+0x82>

080070c8 <_init>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr

080070d4 <_fini>:
 80070d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070d6:	bf00      	nop
 80070d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070da:	bc08      	pop	{r3}
 80070dc:	469e      	mov	lr, r3
 80070de:	4770      	bx	lr
